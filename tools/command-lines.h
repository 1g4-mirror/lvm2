/* Do not edit. This file is generated by scripts/create-commands */
/* using command definitions from scripts/command-lines.in */

commands[0].name = "lvchange";
commands[0].command_line_id = "lvchange_properties";
commands[0].command_line_enum = lvchange_properties_CMD;
commands[0].fn = lvchange;
commands[0].ro_count = 20;
commands[0].rp_count = 1;
commands[0].oo_count = 20;
commands[0].op_count = 0;
commands[0].cmd_flags = CMD_FLAG_ONE_REQUIRED_OPT;
commands[0].desc = "DESC: Change a general LV property.";
commands[0].usage = "lvchange ( --addtag Tag, --deltag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --contiguous y|n, --detachprofile, --metadataprofile String, --profile String, --permission rw|r, --readahead auto|none|NumberSectors, --setactivationskip y|n, --errorwhenfull y|n, --discards passdown|nopassdown|ignore, --zero y|n, --cachemode writethrough|writeback, --cachepolicy String, --cachesettings String, --minrecoveryrate Number[k|unit], --maxrecoveryrate Number[k|unit], --writebehind Number, --writemostly PV ) VG|LV|Tag|Select ..."
" [ --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[0].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[0].required_opt_args[0].opt = addtag_ARG;
commands[0].required_opt_args[0].def.val_bits = val_enum_to_bit(tag_VAL);
commands[0].required_opt_args[1].opt = deltag_ARG;
commands[0].required_opt_args[1].def.val_bits = val_enum_to_bit(tag_VAL);
commands[0].required_opt_args[2].opt = alloc_ARG;
commands[0].required_opt_args[2].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[0].required_opt_args[3].opt = contiguous_ARG;
commands[0].required_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[0].required_opt_args[4].opt = detachprofile_ARG;
commands[0].required_opt_args[5].opt = metadataprofile_ARG;
commands[0].required_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[0].required_opt_args[6].opt = profile_ARG;
commands[0].required_opt_args[6].def.val_bits = val_enum_to_bit(string_VAL);
commands[0].required_opt_args[7].opt = permission_ARG;
commands[0].required_opt_args[7].def.val_bits = val_enum_to_bit(permission_VAL);
commands[0].required_opt_args[8].opt = readahead_ARG;
commands[0].required_opt_args[8].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[0].required_opt_args[9].opt = setactivationskip_ARG;
commands[0].required_opt_args[9].def.val_bits = val_enum_to_bit(bool_VAL);
commands[0].required_opt_args[10].opt = errorwhenfull_ARG;
commands[0].required_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[0].required_opt_args[11].opt = discards_ARG;
commands[0].required_opt_args[11].def.val_bits = val_enum_to_bit(discards_VAL);
commands[0].required_opt_args[12].opt = zero_ARG;
commands[0].required_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[0].required_opt_args[13].opt = cachemode_ARG;
commands[0].required_opt_args[13].def.val_bits = val_enum_to_bit(cachemode_VAL);
commands[0].required_opt_args[14].opt = cachepolicy_ARG;
commands[0].required_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[0].required_opt_args[15].opt = cachesettings_ARG;
commands[0].required_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[0].required_opt_args[16].opt = minrecoveryrate_ARG;
commands[0].required_opt_args[16].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[0].required_opt_args[17].opt = maxrecoveryrate_ARG;
commands[0].required_opt_args[17].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[0].required_opt_args[18].opt = writebehind_ARG;
commands[0].required_opt_args[18].def.val_bits = val_enum_to_bit(number_VAL);
commands[0].required_opt_args[19].opt = writemostly_ARG;
commands[0].required_opt_args[19].def.val_bits = val_enum_to_bit(pv_VAL);
commands[0].required_pos_args[0].pos = 1;
commands[0].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[0].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[0].optional_opt_args[0].opt = commandprofile_ARG;
commands[0].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[0].optional_opt_args[1].opt = config_ARG;
commands[0].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[0].optional_opt_args[2].opt = debug_ARG;
commands[0].optional_opt_args[3].opt = driverloaded_ARG;
commands[0].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[0].optional_opt_args[4].opt = help_ARG;
commands[0].optional_opt_args[5].opt = profile_ARG;
commands[0].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[0].optional_opt_args[6].opt = quiet_ARG;
commands[0].optional_opt_args[7].opt = verbose_ARG;
commands[0].optional_opt_args[8].opt = version_ARG;
commands[0].optional_opt_args[9].opt = yes_ARG;
commands[0].optional_opt_args[10].opt = autobackup_ARG;
commands[0].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[0].optional_opt_args[11].opt = force_ARG;
commands[0].optional_opt_args[12].opt = ignorelockingfailure_ARG;
commands[0].optional_opt_args[13].opt = ignoremonitoring_ARG;
commands[0].optional_opt_args[14].opt = ignoreskippedcluster_ARG;
commands[0].optional_opt_args[15].opt = noudevsync_ARG;
commands[0].optional_opt_args[16].opt = reportformat_ARG;
commands[0].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[0].optional_opt_args[17].opt = sysinit_ARG;
commands[0].optional_opt_args[18].opt = test_ARG;
commands[0].optional_opt_args[19].opt = select_ARG;
commands[0].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);

commands[1].name = "lvchange";
commands[1].command_line_id = "lvchange_resync";
commands[1].command_line_enum = lvchange_resync_CMD;
commands[1].fn = lvchange;
commands[1].ro_count = 1;
commands[1].rp_count = 1;
commands[1].oo_count = 20;
commands[1].op_count = 0;
commands[1].desc = "";
commands[1].usage = "lvchange --resync VG|LV|Tag|Select ..."
" [ --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[1].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[1].required_opt_args[0].opt = resync_ARG;
commands[1].required_pos_args[0].pos = 1;
commands[1].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[1].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[1].optional_opt_args[0].opt = commandprofile_ARG;
commands[1].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[1].optional_opt_args[1].opt = config_ARG;
commands[1].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[1].optional_opt_args[2].opt = debug_ARG;
commands[1].optional_opt_args[3].opt = driverloaded_ARG;
commands[1].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[1].optional_opt_args[4].opt = help_ARG;
commands[1].optional_opt_args[5].opt = profile_ARG;
commands[1].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[1].optional_opt_args[6].opt = quiet_ARG;
commands[1].optional_opt_args[7].opt = verbose_ARG;
commands[1].optional_opt_args[8].opt = version_ARG;
commands[1].optional_opt_args[9].opt = yes_ARG;
commands[1].optional_opt_args[10].opt = autobackup_ARG;
commands[1].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[1].optional_opt_args[11].opt = force_ARG;
commands[1].optional_opt_args[12].opt = ignorelockingfailure_ARG;
commands[1].optional_opt_args[13].opt = ignoremonitoring_ARG;
commands[1].optional_opt_args[14].opt = ignoreskippedcluster_ARG;
commands[1].optional_opt_args[15].opt = noudevsync_ARG;
commands[1].optional_opt_args[16].opt = reportformat_ARG;
commands[1].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[1].optional_opt_args[17].opt = sysinit_ARG;
commands[1].optional_opt_args[18].opt = test_ARG;
commands[1].optional_opt_args[19].opt = select_ARG;
commands[1].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);

commands[2].name = "lvchange";
commands[2].command_line_id = "lvchange_syncaction";
commands[2].command_line_enum = lvchange_syncaction_CMD;
commands[2].fn = lvchange;
commands[2].ro_count = 1;
commands[2].rp_count = 1;
commands[2].oo_count = 20;
commands[2].op_count = 0;
commands[2].desc = "";
commands[2].usage = "lvchange --syncaction String VG|LV|Tag|Select ..."
" [ --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[2].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[2].required_opt_args[0].opt = syncaction_ARG;
commands[2].required_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[2].required_pos_args[0].pos = 1;
commands[2].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[2].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[2].optional_opt_args[0].opt = commandprofile_ARG;
commands[2].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[2].optional_opt_args[1].opt = config_ARG;
commands[2].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[2].optional_opt_args[2].opt = debug_ARG;
commands[2].optional_opt_args[3].opt = driverloaded_ARG;
commands[2].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[2].optional_opt_args[4].opt = help_ARG;
commands[2].optional_opt_args[5].opt = profile_ARG;
commands[2].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[2].optional_opt_args[6].opt = quiet_ARG;
commands[2].optional_opt_args[7].opt = verbose_ARG;
commands[2].optional_opt_args[8].opt = version_ARG;
commands[2].optional_opt_args[9].opt = yes_ARG;
commands[2].optional_opt_args[10].opt = autobackup_ARG;
commands[2].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[2].optional_opt_args[11].opt = force_ARG;
commands[2].optional_opt_args[12].opt = ignorelockingfailure_ARG;
commands[2].optional_opt_args[13].opt = ignoremonitoring_ARG;
commands[2].optional_opt_args[14].opt = ignoreskippedcluster_ARG;
commands[2].optional_opt_args[15].opt = noudevsync_ARG;
commands[2].optional_opt_args[16].opt = reportformat_ARG;
commands[2].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[2].optional_opt_args[17].opt = sysinit_ARG;
commands[2].optional_opt_args[18].opt = test_ARG;
commands[2].optional_opt_args[19].opt = select_ARG;
commands[2].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);

commands[3].name = "lvchange";
commands[3].command_line_id = "lvchange_rebuild";
commands[3].command_line_enum = lvchange_rebuild_CMD;
commands[3].fn = lvchange;
commands[3].ro_count = 1;
commands[3].rp_count = 1;
commands[3].oo_count = 20;
commands[3].op_count = 0;
commands[3].desc = "";
commands[3].usage = "lvchange --rebuild PV VG|LV|Tag|Select ..."
" [ --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[3].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[3].required_opt_args[0].opt = rebuild_ARG;
commands[3].required_opt_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[3].required_pos_args[0].pos = 1;
commands[3].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[3].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[3].optional_opt_args[0].opt = commandprofile_ARG;
commands[3].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[3].optional_opt_args[1].opt = config_ARG;
commands[3].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[3].optional_opt_args[2].opt = debug_ARG;
commands[3].optional_opt_args[3].opt = driverloaded_ARG;
commands[3].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[3].optional_opt_args[4].opt = help_ARG;
commands[3].optional_opt_args[5].opt = profile_ARG;
commands[3].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[3].optional_opt_args[6].opt = quiet_ARG;
commands[3].optional_opt_args[7].opt = verbose_ARG;
commands[3].optional_opt_args[8].opt = version_ARG;
commands[3].optional_opt_args[9].opt = yes_ARG;
commands[3].optional_opt_args[10].opt = autobackup_ARG;
commands[3].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[3].optional_opt_args[11].opt = force_ARG;
commands[3].optional_opt_args[12].opt = ignorelockingfailure_ARG;
commands[3].optional_opt_args[13].opt = ignoremonitoring_ARG;
commands[3].optional_opt_args[14].opt = ignoreskippedcluster_ARG;
commands[3].optional_opt_args[15].opt = noudevsync_ARG;
commands[3].optional_opt_args[16].opt = reportformat_ARG;
commands[3].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[3].optional_opt_args[17].opt = sysinit_ARG;
commands[3].optional_opt_args[18].opt = test_ARG;
commands[3].optional_opt_args[19].opt = select_ARG;
commands[3].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);

commands[4].name = "lvchange";
commands[4].command_line_id = "lvchange_activate";
commands[4].command_line_enum = lvchange_activate_CMD;
commands[4].fn = lvchange;
commands[4].ro_count = 1;
commands[4].rp_count = 1;
commands[4].oo_count = 43;
commands[4].op_count = 0;
commands[4].desc = "DESC: Activate or deactivate an LV.";
commands[4].usage = "lvchange --activate y|n|ay VG|LV|Tag|Select ..."
" [ --activationmode partial|degraded|complete, --partial, --ignoreactivationskip, --addtag Tag, --deltag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --contiguous y|n, --detachprofile, --metadataprofile String, --permission rw|r, --readahead auto|none|NumberSectors, --setactivationskip y|n, --errorwhenfull y|n, --discards passdown|nopassdown|ignore, --zero y|n, --cachemode writethrough|writeback, --cachepolicy String, --cachesettings String, --minrecoveryrate Number[k|unit], --maxrecoveryrate Number[k|unit], --writebehind Number, --writemostly PV, --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[4].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[4].required_opt_args[0].opt = activate_ARG;
commands[4].required_opt_args[0].def.val_bits = val_enum_to_bit(activation_VAL);
commands[4].required_pos_args[0].pos = 1;
commands[4].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[4].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[4].optional_opt_args[0].opt = commandprofile_ARG;
commands[4].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[4].optional_opt_args[1].opt = config_ARG;
commands[4].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[4].optional_opt_args[2].opt = debug_ARG;
commands[4].optional_opt_args[3].opt = driverloaded_ARG;
commands[4].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[4].optional_opt_args[4].opt = help_ARG;
commands[4].optional_opt_args[5].opt = profile_ARG;
commands[4].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[4].optional_opt_args[6].opt = quiet_ARG;
commands[4].optional_opt_args[7].opt = verbose_ARG;
commands[4].optional_opt_args[8].opt = version_ARG;
commands[4].optional_opt_args[9].opt = yes_ARG;
commands[4].optional_opt_args[10].opt = activationmode_ARG;
commands[4].optional_opt_args[10].def.val_bits = val_enum_to_bit(activationmode_VAL);
commands[4].optional_opt_args[11].opt = partial_ARG;
commands[4].optional_opt_args[12].opt = ignoreactivationskip_ARG;
commands[4].optional_opt_args[13].opt = addtag_ARG;
commands[4].optional_opt_args[13].def.val_bits = val_enum_to_bit(tag_VAL);
commands[4].optional_opt_args[14].opt = deltag_ARG;
commands[4].optional_opt_args[14].def.val_bits = val_enum_to_bit(tag_VAL);
commands[4].optional_opt_args[15].opt = alloc_ARG;
commands[4].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[4].optional_opt_args[16].opt = contiguous_ARG;
commands[4].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[4].optional_opt_args[17].opt = detachprofile_ARG;
commands[4].optional_opt_args[18].opt = metadataprofile_ARG;
commands[4].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[4].optional_opt_args[19].opt = profile_ARG;
commands[4].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);
commands[4].optional_opt_args[20].opt = permission_ARG;
commands[4].optional_opt_args[20].def.val_bits = val_enum_to_bit(permission_VAL);
commands[4].optional_opt_args[21].opt = readahead_ARG;
commands[4].optional_opt_args[21].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[4].optional_opt_args[22].opt = setactivationskip_ARG;
commands[4].optional_opt_args[22].def.val_bits = val_enum_to_bit(bool_VAL);
commands[4].optional_opt_args[23].opt = errorwhenfull_ARG;
commands[4].optional_opt_args[23].def.val_bits = val_enum_to_bit(bool_VAL);
commands[4].optional_opt_args[24].opt = discards_ARG;
commands[4].optional_opt_args[24].def.val_bits = val_enum_to_bit(discards_VAL);
commands[4].optional_opt_args[25].opt = zero_ARG;
commands[4].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[4].optional_opt_args[26].opt = cachemode_ARG;
commands[4].optional_opt_args[26].def.val_bits = val_enum_to_bit(cachemode_VAL);
commands[4].optional_opt_args[27].opt = cachepolicy_ARG;
commands[4].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[4].optional_opt_args[28].opt = cachesettings_ARG;
commands[4].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[4].optional_opt_args[29].opt = minrecoveryrate_ARG;
commands[4].optional_opt_args[29].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[4].optional_opt_args[30].opt = maxrecoveryrate_ARG;
commands[4].optional_opt_args[30].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[4].optional_opt_args[31].opt = writebehind_ARG;
commands[4].optional_opt_args[31].def.val_bits = val_enum_to_bit(number_VAL);
commands[4].optional_opt_args[32].opt = writemostly_ARG;
commands[4].optional_opt_args[32].def.val_bits = val_enum_to_bit(pv_VAL);
commands[4].optional_opt_args[33].opt = autobackup_ARG;
commands[4].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[4].optional_opt_args[34].opt = force_ARG;
commands[4].optional_opt_args[35].opt = ignorelockingfailure_ARG;
commands[4].optional_opt_args[36].opt = ignoremonitoring_ARG;
commands[4].optional_opt_args[37].opt = ignoreskippedcluster_ARG;
commands[4].optional_opt_args[38].opt = noudevsync_ARG;
commands[4].optional_opt_args[39].opt = reportformat_ARG;
commands[4].optional_opt_args[39].def.val_bits = val_enum_to_bit(string_VAL);
commands[4].optional_opt_args[40].opt = sysinit_ARG;
commands[4].optional_opt_args[41].opt = test_ARG;
commands[4].optional_opt_args[42].opt = select_ARG;
commands[4].optional_opt_args[42].def.val_bits = val_enum_to_bit(string_VAL);

commands[5].name = "lvchange";
commands[5].command_line_id = "lvchange_refresh";
commands[5].command_line_enum = lvchange_refresh_CMD;
commands[5].fn = lvchange;
commands[5].ro_count = 1;
commands[5].rp_count = 1;
commands[5].oo_count = 20;
commands[5].op_count = 0;
commands[5].desc = "";
commands[5].usage = "lvchange --refresh VG|LV|Tag|Select ..."
" [ --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[5].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[5].required_opt_args[0].opt = refresh_ARG;
commands[5].required_pos_args[0].pos = 1;
commands[5].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[5].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[5].optional_opt_args[0].opt = commandprofile_ARG;
commands[5].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[5].optional_opt_args[1].opt = config_ARG;
commands[5].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[5].optional_opt_args[2].opt = debug_ARG;
commands[5].optional_opt_args[3].opt = driverloaded_ARG;
commands[5].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[5].optional_opt_args[4].opt = help_ARG;
commands[5].optional_opt_args[5].opt = profile_ARG;
commands[5].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[5].optional_opt_args[6].opt = quiet_ARG;
commands[5].optional_opt_args[7].opt = verbose_ARG;
commands[5].optional_opt_args[8].opt = version_ARG;
commands[5].optional_opt_args[9].opt = yes_ARG;
commands[5].optional_opt_args[10].opt = autobackup_ARG;
commands[5].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[5].optional_opt_args[11].opt = force_ARG;
commands[5].optional_opt_args[12].opt = ignorelockingfailure_ARG;
commands[5].optional_opt_args[13].opt = ignoremonitoring_ARG;
commands[5].optional_opt_args[14].opt = ignoreskippedcluster_ARG;
commands[5].optional_opt_args[15].opt = noudevsync_ARG;
commands[5].optional_opt_args[16].opt = reportformat_ARG;
commands[5].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[5].optional_opt_args[17].opt = sysinit_ARG;
commands[5].optional_opt_args[18].opt = test_ARG;
commands[5].optional_opt_args[19].opt = select_ARG;
commands[5].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);

commands[6].name = "lvchange";
commands[6].command_line_id = "lvchange_monitor";
commands[6].command_line_enum = lvchange_monitor_CMD;
commands[6].fn = lvchange;
commands[6].ro_count = 1;
commands[6].rp_count = 1;
commands[6].oo_count = 21;
commands[6].op_count = 0;
commands[6].desc = "DESC: Monitor or unmonitor an LV.";
commands[6].usage = "lvchange --monitor y|n VG|LV|Tag|Select ..."
" [ --poll y|n, --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[6].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[6].required_opt_args[0].opt = monitor_ARG;
commands[6].required_opt_args[0].def.val_bits = val_enum_to_bit(bool_VAL);
commands[6].required_pos_args[0].pos = 1;
commands[6].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[6].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[6].optional_opt_args[0].opt = commandprofile_ARG;
commands[6].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[6].optional_opt_args[1].opt = config_ARG;
commands[6].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[6].optional_opt_args[2].opt = debug_ARG;
commands[6].optional_opt_args[3].opt = driverloaded_ARG;
commands[6].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[6].optional_opt_args[4].opt = help_ARG;
commands[6].optional_opt_args[5].opt = profile_ARG;
commands[6].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[6].optional_opt_args[6].opt = quiet_ARG;
commands[6].optional_opt_args[7].opt = verbose_ARG;
commands[6].optional_opt_args[8].opt = version_ARG;
commands[6].optional_opt_args[9].opt = yes_ARG;
commands[6].optional_opt_args[10].opt = poll_ARG;
commands[6].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[6].optional_opt_args[11].opt = autobackup_ARG;
commands[6].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[6].optional_opt_args[12].opt = force_ARG;
commands[6].optional_opt_args[13].opt = ignorelockingfailure_ARG;
commands[6].optional_opt_args[14].opt = ignoremonitoring_ARG;
commands[6].optional_opt_args[15].opt = ignoreskippedcluster_ARG;
commands[6].optional_opt_args[16].opt = noudevsync_ARG;
commands[6].optional_opt_args[17].opt = reportformat_ARG;
commands[6].optional_opt_args[17].def.val_bits = val_enum_to_bit(string_VAL);
commands[6].optional_opt_args[18].opt = sysinit_ARG;
commands[6].optional_opt_args[19].opt = test_ARG;
commands[6].optional_opt_args[20].opt = select_ARG;
commands[6].optional_opt_args[20].def.val_bits = val_enum_to_bit(string_VAL);

commands[7].name = "lvchange";
commands[7].command_line_id = "lvchange_poll";
commands[7].command_line_enum = lvchange_poll_CMD;
commands[7].fn = lvchange;
commands[7].ro_count = 1;
commands[7].rp_count = 1;
commands[7].oo_count = 21;
commands[7].op_count = 0;
commands[7].desc = "";
commands[7].usage = "lvchange --poll y|n VG|LV|Tag|Select ..."
" [ --monitor y|n, --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[7].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[7].required_opt_args[0].opt = poll_ARG;
commands[7].required_opt_args[0].def.val_bits = val_enum_to_bit(bool_VAL);
commands[7].required_pos_args[0].pos = 1;
commands[7].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[7].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[7].optional_opt_args[0].opt = commandprofile_ARG;
commands[7].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[7].optional_opt_args[1].opt = config_ARG;
commands[7].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[7].optional_opt_args[2].opt = debug_ARG;
commands[7].optional_opt_args[3].opt = driverloaded_ARG;
commands[7].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[7].optional_opt_args[4].opt = help_ARG;
commands[7].optional_opt_args[5].opt = profile_ARG;
commands[7].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[7].optional_opt_args[6].opt = quiet_ARG;
commands[7].optional_opt_args[7].opt = verbose_ARG;
commands[7].optional_opt_args[8].opt = version_ARG;
commands[7].optional_opt_args[9].opt = yes_ARG;
commands[7].optional_opt_args[10].opt = monitor_ARG;
commands[7].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[7].optional_opt_args[11].opt = autobackup_ARG;
commands[7].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[7].optional_opt_args[12].opt = force_ARG;
commands[7].optional_opt_args[13].opt = ignorelockingfailure_ARG;
commands[7].optional_opt_args[14].opt = ignoremonitoring_ARG;
commands[7].optional_opt_args[15].opt = ignoreskippedcluster_ARG;
commands[7].optional_opt_args[16].opt = noudevsync_ARG;
commands[7].optional_opt_args[17].opt = reportformat_ARG;
commands[7].optional_opt_args[17].def.val_bits = val_enum_to_bit(string_VAL);
commands[7].optional_opt_args[18].opt = sysinit_ARG;
commands[7].optional_opt_args[19].opt = test_ARG;
commands[7].optional_opt_args[20].opt = select_ARG;
commands[7].optional_opt_args[20].def.val_bits = val_enum_to_bit(string_VAL);

commands[8].name = "lvchange";
commands[8].command_line_id = "lvchange_persistent";
commands[8].command_line_enum = lvchange_persistent_CMD;
commands[8].fn = lvchange;
commands[8].ro_count = 1;
commands[8].rp_count = 1;
commands[8].oo_count = 22;
commands[8].op_count = 0;
commands[8].desc = "";
commands[8].usage = "lvchange --persistent y|n VG|LV|Tag|Select ..."
" [ --minor Number, --major Number, --autobackup y|n, --ignorelockingfailure, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --sysinit, --select String ]";
commands[8].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[8].required_opt_args[0].opt = persistent_ARG;
commands[8].required_opt_args[0].def.val_bits = val_enum_to_bit(bool_VAL);
commands[8].required_pos_args[0].pos = 1;
commands[8].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[8].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[8].optional_opt_args[0].opt = commandprofile_ARG;
commands[8].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[8].optional_opt_args[1].opt = config_ARG;
commands[8].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[8].optional_opt_args[2].opt = debug_ARG;
commands[8].optional_opt_args[3].opt = driverloaded_ARG;
commands[8].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[8].optional_opt_args[4].opt = help_ARG;
commands[8].optional_opt_args[5].opt = profile_ARG;
commands[8].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[8].optional_opt_args[6].opt = quiet_ARG;
commands[8].optional_opt_args[7].opt = verbose_ARG;
commands[8].optional_opt_args[8].opt = version_ARG;
commands[8].optional_opt_args[9].opt = yes_ARG;
commands[8].optional_opt_args[10].opt = minor_ARG;
commands[8].optional_opt_args[10].def.val_bits = val_enum_to_bit(number_VAL);
commands[8].optional_opt_args[11].opt = major_ARG;
commands[8].optional_opt_args[11].def.val_bits = val_enum_to_bit(number_VAL);
commands[8].optional_opt_args[12].opt = autobackup_ARG;
commands[8].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[8].optional_opt_args[13].opt = force_ARG;
commands[8].optional_opt_args[14].opt = ignorelockingfailure_ARG;
commands[8].optional_opt_args[15].opt = ignoremonitoring_ARG;
commands[8].optional_opt_args[16].opt = ignoreskippedcluster_ARG;
commands[8].optional_opt_args[17].opt = noudevsync_ARG;
commands[8].optional_opt_args[18].opt = reportformat_ARG;
commands[8].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[8].optional_opt_args[19].opt = sysinit_ARG;
commands[8].optional_opt_args[20].opt = test_ARG;
commands[8].optional_opt_args[21].opt = select_ARG;
commands[8].optional_opt_args[21].def.val_bits = val_enum_to_bit(string_VAL);

commands[9].name = "lvconvert";
commands[9].command_line_id = "lvconvert_merge";
commands[9].command_line_enum = lvconvert_merge_CMD;
commands[9].fn = lvconvert;
commands[9].ro_count = 1;
commands[9].rp_count = 1;
commands[9].oo_count = 12;
commands[9].op_count = 0;
commands[9].desc = "DESC: Merge LV that was previously split from a mirror.  DESC: Merge thin LV into its origin LV.  DESC: Merge COW snapshot LV into its origin.";
commands[9].usage = "lvconvert --merge VG|LV_linear_striped_snapshot_raid_thin|Tag ..."
" [ --background, --interval Number ]";
commands[9].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[9].required_opt_args[0].opt = merge_ARG;
commands[9].required_pos_args[0].pos = 1;
commands[9].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL);
commands[9].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_SNAPSHOT | ARG_DEF_LV_RAID | ARG_DEF_LV_THIN;
commands[9].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[9].optional_opt_args[0].opt = commandprofile_ARG;
commands[9].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[9].optional_opt_args[1].opt = config_ARG;
commands[9].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[9].optional_opt_args[2].opt = debug_ARG;
commands[9].optional_opt_args[3].opt = driverloaded_ARG;
commands[9].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[9].optional_opt_args[4].opt = help_ARG;
commands[9].optional_opt_args[5].opt = profile_ARG;
commands[9].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[9].optional_opt_args[6].opt = quiet_ARG;
commands[9].optional_opt_args[7].opt = verbose_ARG;
commands[9].optional_opt_args[8].opt = version_ARG;
commands[9].optional_opt_args[9].opt = yes_ARG;
commands[9].optional_opt_args[10].opt = background_ARG;
commands[9].optional_opt_args[11].opt = interval_ARG;
commands[9].optional_opt_args[11].def.val_bits = val_enum_to_bit(number_VAL);

commands[10].name = "lvconvert";
commands[10].command_line_id = "lvconvert_combine_split_snapshot";
commands[10].command_line_enum = lvconvert_combine_split_snapshot_CMD;
commands[10].fn = lvconvert;
commands[10].ro_count = 1;
commands[10].rp_count = 2;
commands[10].oo_count = 18;
commands[10].op_count = 0;
commands[10].desc = "DESC: Combine LV with a previously split snapshot LV.";
commands[10].usage = "lvconvert --type snapshot LV_linear_striped_raid LV_snapshot"
" [ --chunksize Number[k|unit], --zero y|n, --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[10].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[10].required_opt_args[0].opt = type_ARG;
commands[10].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[10].required_opt_args[0].def.str = "snapshot";
commands[10].required_pos_args[0].pos = 1;
commands[10].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[10].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_RAID;
commands[10].required_pos_args[1].pos = 2;
commands[10].required_pos_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[10].required_pos_args[1].def.lv_types = ARG_DEF_LV_SNAPSHOT;
commands[10].optional_opt_args[0].opt = commandprofile_ARG;
commands[10].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[10].optional_opt_args[1].opt = config_ARG;
commands[10].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[10].optional_opt_args[2].opt = debug_ARG;
commands[10].optional_opt_args[3].opt = driverloaded_ARG;
commands[10].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[10].optional_opt_args[4].opt = help_ARG;
commands[10].optional_opt_args[5].opt = profile_ARG;
commands[10].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[10].optional_opt_args[6].opt = quiet_ARG;
commands[10].optional_opt_args[7].opt = verbose_ARG;
commands[10].optional_opt_args[8].opt = version_ARG;
commands[10].optional_opt_args[9].opt = yes_ARG;
commands[10].optional_opt_args[10].opt = chunksize_ARG;
commands[10].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[10].optional_opt_args[11].opt = zero_ARG;
commands[10].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[10].optional_opt_args[12].opt = alloc_ARG;
commands[10].optional_opt_args[12].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[10].optional_opt_args[13].opt = background_ARG;
commands[10].optional_opt_args[14].opt = force_ARG;
commands[10].optional_opt_args[15].opt = noudevsync_ARG;
commands[10].optional_opt_args[16].opt = test_ARG;
commands[10].optional_opt_args[17].opt = usepolicies_ARG;

commands[11].name = "lvconvert";
commands[11].command_line_id = "lvconvert_to_thin_with_external";
commands[11].command_line_enum = lvconvert_to_thin_with_external_CMD;
commands[11].fn = lvconvert;
commands[11].ro_count = 2;
commands[11].rp_count = 1;
commands[11].oo_count = 23;
commands[11].op_count = 0;
commands[11].desc = "DESC: Convert LV to type thin with an external origin.";
commands[11].usage = "lvconvert --type thin --thinpool LV LV_linear_striped_raid"
" [ --thin, --originname LV_new, --poolmetadata LV, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --readahead auto|none|NumberSectors, --chunksize Number[k|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[11].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[11].required_opt_args[0].opt = type_ARG;
commands[11].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[11].required_opt_args[0].def.str = "thin";
commands[11].required_opt_args[1].opt = thinpool_ARG;
commands[11].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[11].required_pos_args[0].pos = 1;
commands[11].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[11].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_RAID;
commands[11].optional_opt_args[0].opt = commandprofile_ARG;
commands[11].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[11].optional_opt_args[1].opt = config_ARG;
commands[11].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[11].optional_opt_args[2].opt = debug_ARG;
commands[11].optional_opt_args[3].opt = driverloaded_ARG;
commands[11].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[11].optional_opt_args[4].opt = help_ARG;
commands[11].optional_opt_args[5].opt = profile_ARG;
commands[11].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[11].optional_opt_args[6].opt = quiet_ARG;
commands[11].optional_opt_args[7].opt = verbose_ARG;
commands[11].optional_opt_args[8].opt = version_ARG;
commands[11].optional_opt_args[9].opt = yes_ARG;
commands[11].optional_opt_args[10].opt = thin_ARG;
commands[11].optional_opt_args[11].opt = originname_ARG;
commands[11].optional_opt_args[11].def.val_bits = val_enum_to_bit(lv_VAL);
commands[11].optional_opt_args[11].def.flags = ARG_DEF_FLAG_NEW;
commands[11].optional_opt_args[12].opt = poolmetadata_ARG;
commands[11].optional_opt_args[12].def.val_bits = val_enum_to_bit(lv_VAL);
commands[11].optional_opt_args[13].opt = poolmetadatasize_ARG;
commands[11].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[11].optional_opt_args[14].opt = poolmetadataspare_ARG;
commands[11].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[11].optional_opt_args[15].opt = readahead_ARG;
commands[11].optional_opt_args[15].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[11].optional_opt_args[16].opt = chunksize_ARG;
commands[11].optional_opt_args[16].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[11].optional_opt_args[17].opt = alloc_ARG;
commands[11].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[11].optional_opt_args[18].opt = background_ARG;
commands[11].optional_opt_args[19].opt = force_ARG;
commands[11].optional_opt_args[20].opt = noudevsync_ARG;
commands[11].optional_opt_args[21].opt = test_ARG;
commands[11].optional_opt_args[22].opt = usepolicies_ARG;

commands[12].name = "lvconvert";
commands[12].command_line_id = "lvconvert_to_thin_with_external";
commands[12].command_line_enum = lvconvert_to_thin_with_external_CMD;
commands[12].fn = lvconvert;
commands[12].ro_count = 2;
commands[12].rp_count = 1;
commands[12].oo_count = 23;
commands[12].op_count = 0;
commands[12].desc = "DESC: Convert LV to type thin with an external origin  DESC: (variant, infers --type thin).";
commands[12].usage = "lvconvert --thin --thinpool LV LV_linear_striped_raid"
" [ --type thin, --originname LV_new, --poolmetadata LV, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --readahead auto|none|NumberSectors, --chunksize Number[k|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[12].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[12].required_opt_args[0].opt = thin_ARG;
commands[12].required_opt_args[1].opt = thinpool_ARG;
commands[12].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[12].required_pos_args[0].pos = 1;
commands[12].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[12].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_RAID;
commands[12].optional_opt_args[0].opt = commandprofile_ARG;
commands[12].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[12].optional_opt_args[1].opt = config_ARG;
commands[12].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[12].optional_opt_args[2].opt = debug_ARG;
commands[12].optional_opt_args[3].opt = driverloaded_ARG;
commands[12].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[12].optional_opt_args[4].opt = help_ARG;
commands[12].optional_opt_args[5].opt = profile_ARG;
commands[12].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[12].optional_opt_args[6].opt = quiet_ARG;
commands[12].optional_opt_args[7].opt = verbose_ARG;
commands[12].optional_opt_args[8].opt = version_ARG;
commands[12].optional_opt_args[9].opt = yes_ARG;
commands[12].optional_opt_args[10].opt = type_ARG;
commands[12].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[12].optional_opt_args[10].def.str = "thin";
commands[12].optional_opt_args[11].opt = originname_ARG;
commands[12].optional_opt_args[11].def.val_bits = val_enum_to_bit(lv_VAL);
commands[12].optional_opt_args[11].def.flags = ARG_DEF_FLAG_NEW;
commands[12].optional_opt_args[12].opt = poolmetadata_ARG;
commands[12].optional_opt_args[12].def.val_bits = val_enum_to_bit(lv_VAL);
commands[12].optional_opt_args[13].opt = poolmetadatasize_ARG;
commands[12].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[12].optional_opt_args[14].opt = poolmetadataspare_ARG;
commands[12].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[12].optional_opt_args[15].opt = readahead_ARG;
commands[12].optional_opt_args[15].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[12].optional_opt_args[16].opt = chunksize_ARG;
commands[12].optional_opt_args[16].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[12].optional_opt_args[17].opt = alloc_ARG;
commands[12].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[12].optional_opt_args[18].opt = background_ARG;
commands[12].optional_opt_args[19].opt = force_ARG;
commands[12].optional_opt_args[20].opt = noudevsync_ARG;
commands[12].optional_opt_args[21].opt = test_ARG;
commands[12].optional_opt_args[22].opt = usepolicies_ARG;

commands[13].name = "lvconvert";
commands[13].command_line_id = "lvconvert_to_cache_vol";
commands[13].command_line_enum = lvconvert_to_cache_vol_CMD;
commands[13].fn = lvconvert;
commands[13].ro_count = 2;
commands[13].rp_count = 1;
commands[13].oo_count = 24;
commands[13].op_count = 0;
commands[13].desc = "DESC: Convert LV to type cache.";
commands[13].usage = "lvconvert --type cache --cachepool LV LV_linear_striped_raid_thinpool"
" [ --cache, --cachepolicy String, --cachesettings String, --poolmetadata LV, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --readahead auto|none|NumberSectors, --chunksize Number[k|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[13].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[13].required_opt_args[0].opt = type_ARG;
commands[13].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[13].required_opt_args[0].def.str = "cache";
commands[13].required_opt_args[1].opt = cachepool_ARG;
commands[13].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[13].required_pos_args[0].pos = 1;
commands[13].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[13].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_RAID | ARG_DEF_LV_THINPOOL;
commands[13].optional_opt_args[0].opt = commandprofile_ARG;
commands[13].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[13].optional_opt_args[1].opt = config_ARG;
commands[13].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[13].optional_opt_args[2].opt = debug_ARG;
commands[13].optional_opt_args[3].opt = driverloaded_ARG;
commands[13].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[13].optional_opt_args[4].opt = help_ARG;
commands[13].optional_opt_args[5].opt = profile_ARG;
commands[13].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[13].optional_opt_args[6].opt = quiet_ARG;
commands[13].optional_opt_args[7].opt = verbose_ARG;
commands[13].optional_opt_args[8].opt = version_ARG;
commands[13].optional_opt_args[9].opt = yes_ARG;
commands[13].optional_opt_args[10].opt = cache_ARG;
commands[13].optional_opt_args[11].opt = cachepolicy_ARG;
commands[13].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[13].optional_opt_args[12].opt = cachesettings_ARG;
commands[13].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[13].optional_opt_args[13].opt = poolmetadata_ARG;
commands[13].optional_opt_args[13].def.val_bits = val_enum_to_bit(lv_VAL);
commands[13].optional_opt_args[14].opt = poolmetadatasize_ARG;
commands[13].optional_opt_args[14].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[13].optional_opt_args[15].opt = poolmetadataspare_ARG;
commands[13].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[13].optional_opt_args[16].opt = readahead_ARG;
commands[13].optional_opt_args[16].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[13].optional_opt_args[17].opt = chunksize_ARG;
commands[13].optional_opt_args[17].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[13].optional_opt_args[18].opt = alloc_ARG;
commands[13].optional_opt_args[18].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[13].optional_opt_args[19].opt = background_ARG;
commands[13].optional_opt_args[20].opt = force_ARG;
commands[13].optional_opt_args[21].opt = noudevsync_ARG;
commands[13].optional_opt_args[22].opt = test_ARG;
commands[13].optional_opt_args[23].opt = usepolicies_ARG;

commands[14].name = "lvconvert";
commands[14].command_line_id = "lvconvert_to_cache_vol";
commands[14].command_line_enum = lvconvert_to_cache_vol_CMD;
commands[14].fn = lvconvert;
commands[14].ro_count = 2;
commands[14].rp_count = 1;
commands[14].oo_count = 24;
commands[14].op_count = 0;
commands[14].desc = "DESC: Convert LV to type cache (variant, infers --type cache).";
commands[14].usage = "lvconvert --cache --cachepool LV LV_linear_striped_raid_thinpool"
" [ --type cache, --cachepolicy String, --cachesettings String, --poolmetadata LV, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --readahead auto|none|NumberSectors, --chunksize Number[k|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[14].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[14].required_opt_args[0].opt = cache_ARG;
commands[14].required_opt_args[1].opt = cachepool_ARG;
commands[14].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[14].required_pos_args[0].pos = 1;
commands[14].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[14].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_RAID | ARG_DEF_LV_THINPOOL;
commands[14].optional_opt_args[0].opt = commandprofile_ARG;
commands[14].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[14].optional_opt_args[1].opt = config_ARG;
commands[14].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[14].optional_opt_args[2].opt = debug_ARG;
commands[14].optional_opt_args[3].opt = driverloaded_ARG;
commands[14].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[14].optional_opt_args[4].opt = help_ARG;
commands[14].optional_opt_args[5].opt = profile_ARG;
commands[14].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[14].optional_opt_args[6].opt = quiet_ARG;
commands[14].optional_opt_args[7].opt = verbose_ARG;
commands[14].optional_opt_args[8].opt = version_ARG;
commands[14].optional_opt_args[9].opt = yes_ARG;
commands[14].optional_opt_args[10].opt = type_ARG;
commands[14].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[14].optional_opt_args[10].def.str = "cache";
commands[14].optional_opt_args[11].opt = cachepolicy_ARG;
commands[14].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[14].optional_opt_args[12].opt = cachesettings_ARG;
commands[14].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[14].optional_opt_args[13].opt = poolmetadata_ARG;
commands[14].optional_opt_args[13].def.val_bits = val_enum_to_bit(lv_VAL);
commands[14].optional_opt_args[14].opt = poolmetadatasize_ARG;
commands[14].optional_opt_args[14].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[14].optional_opt_args[15].opt = poolmetadataspare_ARG;
commands[14].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[14].optional_opt_args[16].opt = readahead_ARG;
commands[14].optional_opt_args[16].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[14].optional_opt_args[17].opt = chunksize_ARG;
commands[14].optional_opt_args[17].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[14].optional_opt_args[18].opt = alloc_ARG;
commands[14].optional_opt_args[18].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[14].optional_opt_args[19].opt = background_ARG;
commands[14].optional_opt_args[20].opt = force_ARG;
commands[14].optional_opt_args[21].opt = noudevsync_ARG;
commands[14].optional_opt_args[22].opt = test_ARG;
commands[14].optional_opt_args[23].opt = usepolicies_ARG;

commands[15].name = "lvconvert";
commands[15].command_line_id = "lvconvert_to_thinpool";
commands[15].command_line_enum = lvconvert_to_thinpool_CMD;
commands[15].fn = lvconvert;
commands[15].ro_count = 1;
commands[15].rp_count = 1;
commands[15].oo_count = 23;
commands[15].op_count = 0;
commands[15].desc = "DESC: Convert LV to type thin-pool.";
commands[15].usage = "lvconvert --type thin-pool LV_linear_striped_raid_cache"
" [ --discards passdown|nopassdown|ignore, --zero y|n, --poolmetadata LV, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --readahead auto|none|NumberSectors, --chunksize Number[k|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[15].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[15].required_opt_args[0].opt = type_ARG;
commands[15].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[15].required_opt_args[0].def.str = "thin-pool";
commands[15].required_pos_args[0].pos = 1;
commands[15].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[15].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_RAID | ARG_DEF_LV_CACHE;
commands[15].optional_opt_args[0].opt = commandprofile_ARG;
commands[15].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[15].optional_opt_args[1].opt = config_ARG;
commands[15].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[15].optional_opt_args[2].opt = debug_ARG;
commands[15].optional_opt_args[3].opt = driverloaded_ARG;
commands[15].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[15].optional_opt_args[4].opt = help_ARG;
commands[15].optional_opt_args[5].opt = profile_ARG;
commands[15].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[15].optional_opt_args[6].opt = quiet_ARG;
commands[15].optional_opt_args[7].opt = verbose_ARG;
commands[15].optional_opt_args[8].opt = version_ARG;
commands[15].optional_opt_args[9].opt = yes_ARG;
commands[15].optional_opt_args[10].opt = discards_ARG;
commands[15].optional_opt_args[10].def.val_bits = val_enum_to_bit(discards_VAL);
commands[15].optional_opt_args[11].opt = zero_ARG;
commands[15].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[15].optional_opt_args[12].opt = poolmetadata_ARG;
commands[15].optional_opt_args[12].def.val_bits = val_enum_to_bit(lv_VAL);
commands[15].optional_opt_args[13].opt = poolmetadatasize_ARG;
commands[15].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[15].optional_opt_args[14].opt = poolmetadataspare_ARG;
commands[15].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[15].optional_opt_args[15].opt = readahead_ARG;
commands[15].optional_opt_args[15].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[15].optional_opt_args[16].opt = chunksize_ARG;
commands[15].optional_opt_args[16].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[15].optional_opt_args[17].opt = alloc_ARG;
commands[15].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[15].optional_opt_args[18].opt = background_ARG;
commands[15].optional_opt_args[19].opt = force_ARG;
commands[15].optional_opt_args[20].opt = noudevsync_ARG;
commands[15].optional_opt_args[21].opt = test_ARG;
commands[15].optional_opt_args[22].opt = usepolicies_ARG;

commands[16].name = "lvconvert";
commands[16].command_line_id = "lvconvert_to_thinpool";
commands[16].command_line_enum = lvconvert_to_thinpool_CMD;
commands[16].fn = lvconvert;
commands[16].ro_count = 1;
commands[16].rp_count = 0;
commands[16].oo_count = 21;
commands[16].op_count = 0;
commands[16].desc = "DESC: Convert LV to type thin-pool (variant, use --type thin-pool).";
commands[16].usage = "lvconvert --thinpool LV"
" [ --poolmetadata LV, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --readahead auto|none|NumberSectors, --chunksize Number[k|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[16].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[16].required_opt_args[0].opt = thinpool_ARG;
commands[16].required_opt_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[16].optional_opt_args[0].opt = commandprofile_ARG;
commands[16].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[16].optional_opt_args[1].opt = config_ARG;
commands[16].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[16].optional_opt_args[2].opt = debug_ARG;
commands[16].optional_opt_args[3].opt = driverloaded_ARG;
commands[16].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[16].optional_opt_args[4].opt = help_ARG;
commands[16].optional_opt_args[5].opt = profile_ARG;
commands[16].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[16].optional_opt_args[6].opt = quiet_ARG;
commands[16].optional_opt_args[7].opt = verbose_ARG;
commands[16].optional_opt_args[8].opt = version_ARG;
commands[16].optional_opt_args[9].opt = yes_ARG;
commands[16].optional_opt_args[10].opt = poolmetadata_ARG;
commands[16].optional_opt_args[10].def.val_bits = val_enum_to_bit(lv_VAL);
commands[16].optional_opt_args[11].opt = poolmetadatasize_ARG;
commands[16].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[16].optional_opt_args[12].opt = poolmetadataspare_ARG;
commands[16].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[16].optional_opt_args[13].opt = readahead_ARG;
commands[16].optional_opt_args[13].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[16].optional_opt_args[14].opt = chunksize_ARG;
commands[16].optional_opt_args[14].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[16].optional_opt_args[15].opt = alloc_ARG;
commands[16].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[16].optional_opt_args[16].opt = background_ARG;
commands[16].optional_opt_args[17].opt = force_ARG;
commands[16].optional_opt_args[18].opt = noudevsync_ARG;
commands[16].optional_opt_args[19].opt = test_ARG;
commands[16].optional_opt_args[20].opt = usepolicies_ARG;

commands[17].name = "lvconvert";
commands[17].command_line_id = "lvconvert_to_cachepool";
commands[17].command_line_enum = lvconvert_to_cachepool_CMD;
commands[17].fn = lvconvert;
commands[17].ro_count = 1;
commands[17].rp_count = 1;
commands[17].oo_count = 21;
commands[17].op_count = 0;
commands[17].desc = "DESC: Convert LV to type cache-pool.";
commands[17].usage = "lvconvert --type cache-pool LV_linear_striped_raid"
" [ --poolmetadata LV, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --readahead auto|none|NumberSectors, --chunksize Number[k|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[17].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[17].required_opt_args[0].opt = type_ARG;
commands[17].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[17].required_opt_args[0].def.str = "cache-pool";
commands[17].required_pos_args[0].pos = 1;
commands[17].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[17].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_RAID;
commands[17].optional_opt_args[0].opt = commandprofile_ARG;
commands[17].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[17].optional_opt_args[1].opt = config_ARG;
commands[17].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[17].optional_opt_args[2].opt = debug_ARG;
commands[17].optional_opt_args[3].opt = driverloaded_ARG;
commands[17].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[17].optional_opt_args[4].opt = help_ARG;
commands[17].optional_opt_args[5].opt = profile_ARG;
commands[17].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[17].optional_opt_args[6].opt = quiet_ARG;
commands[17].optional_opt_args[7].opt = verbose_ARG;
commands[17].optional_opt_args[8].opt = version_ARG;
commands[17].optional_opt_args[9].opt = yes_ARG;
commands[17].optional_opt_args[10].opt = poolmetadata_ARG;
commands[17].optional_opt_args[10].def.val_bits = val_enum_to_bit(lv_VAL);
commands[17].optional_opt_args[11].opt = poolmetadatasize_ARG;
commands[17].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[17].optional_opt_args[12].opt = poolmetadataspare_ARG;
commands[17].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[17].optional_opt_args[13].opt = readahead_ARG;
commands[17].optional_opt_args[13].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[17].optional_opt_args[14].opt = chunksize_ARG;
commands[17].optional_opt_args[14].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[17].optional_opt_args[15].opt = alloc_ARG;
commands[17].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[17].optional_opt_args[16].opt = background_ARG;
commands[17].optional_opt_args[17].opt = force_ARG;
commands[17].optional_opt_args[18].opt = noudevsync_ARG;
commands[17].optional_opt_args[19].opt = test_ARG;
commands[17].optional_opt_args[20].opt = usepolicies_ARG;

commands[18].name = "lvconvert";
commands[18].command_line_id = "lvconvert_to_cachepool";
commands[18].command_line_enum = lvconvert_to_cachepool_CMD;
commands[18].fn = lvconvert;
commands[18].ro_count = 1;
commands[18].rp_count = 0;
commands[18].oo_count = 21;
commands[18].op_count = 0;
commands[18].desc = "DESC: Convert LV to type cache-pool (variant, use --type cache-pool).";
commands[18].usage = "lvconvert --cachepool LV"
" [ --poolmetadata LV, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --readahead auto|none|NumberSectors, --chunksize Number[k|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[18].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[18].required_opt_args[0].opt = cachepool_ARG;
commands[18].required_opt_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[18].optional_opt_args[0].opt = commandprofile_ARG;
commands[18].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[18].optional_opt_args[1].opt = config_ARG;
commands[18].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[18].optional_opt_args[2].opt = debug_ARG;
commands[18].optional_opt_args[3].opt = driverloaded_ARG;
commands[18].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[18].optional_opt_args[4].opt = help_ARG;
commands[18].optional_opt_args[5].opt = profile_ARG;
commands[18].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[18].optional_opt_args[6].opt = quiet_ARG;
commands[18].optional_opt_args[7].opt = verbose_ARG;
commands[18].optional_opt_args[8].opt = version_ARG;
commands[18].optional_opt_args[9].opt = yes_ARG;
commands[18].optional_opt_args[10].opt = poolmetadata_ARG;
commands[18].optional_opt_args[10].def.val_bits = val_enum_to_bit(lv_VAL);
commands[18].optional_opt_args[11].opt = poolmetadatasize_ARG;
commands[18].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[18].optional_opt_args[12].opt = poolmetadataspare_ARG;
commands[18].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[18].optional_opt_args[13].opt = readahead_ARG;
commands[18].optional_opt_args[13].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[18].optional_opt_args[14].opt = chunksize_ARG;
commands[18].optional_opt_args[14].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[18].optional_opt_args[15].opt = alloc_ARG;
commands[18].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[18].optional_opt_args[16].opt = background_ARG;
commands[18].optional_opt_args[17].opt = force_ARG;
commands[18].optional_opt_args[18].opt = noudevsync_ARG;
commands[18].optional_opt_args[19].opt = test_ARG;
commands[18].optional_opt_args[20].opt = usepolicies_ARG;

commands[19].name = "lvconvert";
commands[19].command_line_id = "lvconvert_to_mirror";
commands[19].command_line_enum = lvconvert_to_mirror_CMD;
commands[19].fn = lvconvert;
commands[19].ro_count = 2;
commands[19].rp_count = 1;
commands[19].oo_count = 20;
commands[19].op_count = 1;
commands[19].desc = "DESC: Convert LV to type mirror, adding mirror images.";
commands[19].usage = "lvconvert --type mirror --mirrors [+|-]Number LV_linear_striped"
" [ --mirrors [+|-]Number, --stripes Number, --stripesize Number[k|unit], --regionsize Number[m|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]"
" [ PV ... ]";
commands[19].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[19].required_opt_args[0].opt = type_ARG;
commands[19].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[19].required_opt_args[0].def.str = "mirror";
commands[19].required_opt_args[1].opt = mirrors_ARG;
commands[19].required_opt_args[1].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[19].required_pos_args[0].pos = 1;
commands[19].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[19].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED;
commands[19].optional_opt_args[0].opt = commandprofile_ARG;
commands[19].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[19].optional_opt_args[1].opt = config_ARG;
commands[19].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[19].optional_opt_args[2].opt = debug_ARG;
commands[19].optional_opt_args[3].opt = driverloaded_ARG;
commands[19].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[19].optional_opt_args[4].opt = help_ARG;
commands[19].optional_opt_args[5].opt = profile_ARG;
commands[19].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[19].optional_opt_args[6].opt = quiet_ARG;
commands[19].optional_opt_args[7].opt = verbose_ARG;
commands[19].optional_opt_args[8].opt = version_ARG;
commands[19].optional_opt_args[9].opt = yes_ARG;
commands[19].optional_opt_args[10].opt = mirrors_ARG;
commands[19].optional_opt_args[10].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[19].optional_opt_args[11].opt = stripes_long_ARG;
commands[19].optional_opt_args[11].def.val_bits = val_enum_to_bit(number_VAL);
commands[19].optional_opt_args[12].opt = stripesize_ARG;
commands[19].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[19].optional_opt_args[13].opt = regionsize_ARG;
commands[19].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[19].optional_opt_args[14].opt = alloc_ARG;
commands[19].optional_opt_args[14].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[19].optional_opt_args[15].opt = background_ARG;
commands[19].optional_opt_args[16].opt = force_ARG;
commands[19].optional_opt_args[17].opt = noudevsync_ARG;
commands[19].optional_opt_args[18].opt = test_ARG;
commands[19].optional_opt_args[19].opt = usepolicies_ARG;
commands[19].optional_pos_args[0].pos = 2;
commands[19].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[19].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[20].name = "lvconvert";
commands[20].command_line_id = "lvconvert_to_mirror_or_raid1";
commands[20].command_line_enum = lvconvert_to_mirror_or_raid1_CMD;
commands[20].fn = lvconvert;
commands[20].ro_count = 1;
commands[20].rp_count = 1;
commands[20].oo_count = 22;
commands[20].op_count = 1;
commands[20].desc = "DESC: Convert LV to type raid1 or mirror  DESC: (variant, infers --type raid1|mirror).";
commands[20].usage = "lvconvert --mirrors [+|-]Number LV_linear_striped"
" [ --type raid1, --type mirror, --mirrors [+|-]Number, --stripes Number, --stripesize Number[k|unit], --regionsize Number[m|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]"
" [ PV ... ]";
commands[20].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[20].required_opt_args[0].opt = mirrors_ARG;
commands[20].required_opt_args[0].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[20].required_pos_args[0].pos = 1;
commands[20].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[20].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED;
commands[20].optional_opt_args[0].opt = commandprofile_ARG;
commands[20].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[20].optional_opt_args[1].opt = config_ARG;
commands[20].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[20].optional_opt_args[2].opt = debug_ARG;
commands[20].optional_opt_args[3].opt = driverloaded_ARG;
commands[20].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[20].optional_opt_args[4].opt = help_ARG;
commands[20].optional_opt_args[5].opt = profile_ARG;
commands[20].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[20].optional_opt_args[6].opt = quiet_ARG;
commands[20].optional_opt_args[7].opt = verbose_ARG;
commands[20].optional_opt_args[8].opt = version_ARG;
commands[20].optional_opt_args[9].opt = yes_ARG;
commands[20].optional_opt_args[10].opt = type_ARG;
commands[20].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[20].optional_opt_args[10].def.str = "raid1";
commands[20].optional_opt_args[11].opt = type_ARG;
commands[20].optional_opt_args[11].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[20].optional_opt_args[11].def.str = "mirror";
commands[20].optional_opt_args[12].opt = mirrors_ARG;
commands[20].optional_opt_args[12].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[20].optional_opt_args[13].opt = stripes_long_ARG;
commands[20].optional_opt_args[13].def.val_bits = val_enum_to_bit(number_VAL);
commands[20].optional_opt_args[14].opt = stripesize_ARG;
commands[20].optional_opt_args[14].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[20].optional_opt_args[15].opt = regionsize_ARG;
commands[20].optional_opt_args[15].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[20].optional_opt_args[16].opt = alloc_ARG;
commands[20].optional_opt_args[16].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[20].optional_opt_args[17].opt = background_ARG;
commands[20].optional_opt_args[18].opt = force_ARG;
commands[20].optional_opt_args[19].opt = noudevsync_ARG;
commands[20].optional_opt_args[20].opt = test_ARG;
commands[20].optional_opt_args[21].opt = usepolicies_ARG;
commands[20].optional_pos_args[0].pos = 2;
commands[20].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[20].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[21].name = "lvconvert";
commands[21].command_line_id = "lvconvert_raid1_to_mirror";
commands[21].command_line_enum = lvconvert_raid1_to_mirror_CMD;
commands[21].fn = lvconvert;
commands[21].ro_count = 1;
commands[21].rp_count = 1;
commands[21].oo_count = 20;
commands[21].op_count = 0;
commands[21].desc = "DESC: Convert LV to type mirror, keeping mirror images.";
commands[21].usage = "lvconvert --type mirror LV_raid1"
" [ --mirrors [+|-]Number, --stripes Number, --stripesize Number[k|unit], --regionsize Number[m|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[21].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[21].required_opt_args[0].opt = type_ARG;
commands[21].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[21].required_opt_args[0].def.str = "mirror";
commands[21].required_pos_args[0].pos = 1;
commands[21].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[21].required_pos_args[0].def.lv_types = ARG_DEF_LV_RAID1;
commands[21].optional_opt_args[0].opt = commandprofile_ARG;
commands[21].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[21].optional_opt_args[1].opt = config_ARG;
commands[21].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[21].optional_opt_args[2].opt = debug_ARG;
commands[21].optional_opt_args[3].opt = driverloaded_ARG;
commands[21].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[21].optional_opt_args[4].opt = help_ARG;
commands[21].optional_opt_args[5].opt = profile_ARG;
commands[21].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[21].optional_opt_args[6].opt = quiet_ARG;
commands[21].optional_opt_args[7].opt = verbose_ARG;
commands[21].optional_opt_args[8].opt = version_ARG;
commands[21].optional_opt_args[9].opt = yes_ARG;
commands[21].optional_opt_args[10].opt = mirrors_ARG;
commands[21].optional_opt_args[10].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[21].optional_opt_args[11].opt = stripes_long_ARG;
commands[21].optional_opt_args[11].def.val_bits = val_enum_to_bit(number_VAL);
commands[21].optional_opt_args[12].opt = stripesize_ARG;
commands[21].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[21].optional_opt_args[13].opt = regionsize_ARG;
commands[21].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[21].optional_opt_args[14].opt = alloc_ARG;
commands[21].optional_opt_args[14].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[21].optional_opt_args[15].opt = background_ARG;
commands[21].optional_opt_args[16].opt = force_ARG;
commands[21].optional_opt_args[17].opt = noudevsync_ARG;
commands[21].optional_opt_args[18].opt = test_ARG;
commands[21].optional_opt_args[19].opt = usepolicies_ARG;

commands[22].name = "lvconvert";
commands[22].command_line_id = "lvconvert_mirror_to_raid1";
commands[22].command_line_enum = lvconvert_mirror_to_raid1_CMD;
commands[22].fn = lvconvert;
commands[22].ro_count = 1;
commands[22].rp_count = 1;
commands[22].oo_count = 20;
commands[22].op_count = 0;
commands[22].desc = "DESC: Convert LV to type raid1, keeping mirror images.";
commands[22].usage = "lvconvert --type raid1 LV_mirror"
" [ --mirrors [+|-]Number, --stripes Number, --stripesize Number[k|unit], --regionsize Number[m|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[22].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[22].required_opt_args[0].opt = type_ARG;
commands[22].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[22].required_opt_args[0].def.str = "raid1";
commands[22].required_pos_args[0].pos = 1;
commands[22].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[22].required_pos_args[0].def.lv_types = ARG_DEF_LV_MIRROR;
commands[22].optional_opt_args[0].opt = commandprofile_ARG;
commands[22].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[22].optional_opt_args[1].opt = config_ARG;
commands[22].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[22].optional_opt_args[2].opt = debug_ARG;
commands[22].optional_opt_args[3].opt = driverloaded_ARG;
commands[22].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[22].optional_opt_args[4].opt = help_ARG;
commands[22].optional_opt_args[5].opt = profile_ARG;
commands[22].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[22].optional_opt_args[6].opt = quiet_ARG;
commands[22].optional_opt_args[7].opt = verbose_ARG;
commands[22].optional_opt_args[8].opt = version_ARG;
commands[22].optional_opt_args[9].opt = yes_ARG;
commands[22].optional_opt_args[10].opt = mirrors_ARG;
commands[22].optional_opt_args[10].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[22].optional_opt_args[11].opt = stripes_long_ARG;
commands[22].optional_opt_args[11].def.val_bits = val_enum_to_bit(number_VAL);
commands[22].optional_opt_args[12].opt = stripesize_ARG;
commands[22].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[22].optional_opt_args[13].opt = regionsize_ARG;
commands[22].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[22].optional_opt_args[14].opt = alloc_ARG;
commands[22].optional_opt_args[14].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[22].optional_opt_args[15].opt = background_ARG;
commands[22].optional_opt_args[16].opt = force_ARG;
commands[22].optional_opt_args[17].opt = noudevsync_ARG;
commands[22].optional_opt_args[18].opt = test_ARG;
commands[22].optional_opt_args[19].opt = usepolicies_ARG;

commands[23].name = "lvconvert";
commands[23].command_line_id = "lvconvert_general_to_raid";
commands[23].command_line_enum = lvconvert_general_to_raid_CMD;
commands[23].fn = lvconvert;
commands[23].ro_count = 1;
commands[23].rp_count = 1;
commands[23].oo_count = 20;
commands[23].op_count = 1;
commands[23].desc = "DESC: Convert LV to type raid.  DESC: Change LV raid type.";
commands[23].usage = "lvconvert --type raid LV_linear_striped_raid"
" [ --mirrors [+|-]Number, --stripes Number, --stripesize Number[k|unit], --regionsize Number[m|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]"
" [ PV ... ]";
commands[23].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[23].required_opt_args[0].opt = type_ARG;
commands[23].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[23].required_opt_args[0].def.str = "raid";
commands[23].required_pos_args[0].pos = 1;
commands[23].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[23].required_pos_args[0].def.lv_types = ARG_DEF_LV_LINEAR | ARG_DEF_LV_STRIPED | ARG_DEF_LV_RAID;
commands[23].optional_opt_args[0].opt = commandprofile_ARG;
commands[23].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[23].optional_opt_args[1].opt = config_ARG;
commands[23].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[23].optional_opt_args[2].opt = debug_ARG;
commands[23].optional_opt_args[3].opt = driverloaded_ARG;
commands[23].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[23].optional_opt_args[4].opt = help_ARG;
commands[23].optional_opt_args[5].opt = profile_ARG;
commands[23].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[23].optional_opt_args[6].opt = quiet_ARG;
commands[23].optional_opt_args[7].opt = verbose_ARG;
commands[23].optional_opt_args[8].opt = version_ARG;
commands[23].optional_opt_args[9].opt = yes_ARG;
commands[23].optional_opt_args[10].opt = mirrors_ARG;
commands[23].optional_opt_args[10].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[23].optional_opt_args[11].opt = stripes_long_ARG;
commands[23].optional_opt_args[11].def.val_bits = val_enum_to_bit(number_VAL);
commands[23].optional_opt_args[12].opt = stripesize_ARG;
commands[23].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[23].optional_opt_args[13].opt = regionsize_ARG;
commands[23].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[23].optional_opt_args[14].opt = alloc_ARG;
commands[23].optional_opt_args[14].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[23].optional_opt_args[15].opt = background_ARG;
commands[23].optional_opt_args[16].opt = force_ARG;
commands[23].optional_opt_args[17].opt = noudevsync_ARG;
commands[23].optional_opt_args[18].opt = test_ARG;
commands[23].optional_opt_args[19].opt = usepolicies_ARG;
commands[23].optional_pos_args[0].pos = 2;
commands[23].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[23].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[24].name = "lvconvert";
commands[24].command_line_id = "lvconvert_change_mirror_images";
commands[24].command_line_enum = lvconvert_change_mirror_images_CMD;
commands[24].fn = lvconvert;
commands[24].ro_count = 1;
commands[24].rp_count = 1;
commands[24].oo_count = 16;
commands[24].op_count = 1;
commands[24].desc = "DESC: Change the number of mirror images in the LV.";
commands[24].usage = "lvconvert --mirrors [+|-]Number LV_mirror_raid"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]"
" [ PV ... ]";
commands[24].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[24].required_opt_args[0].opt = mirrors_ARG;
commands[24].required_opt_args[0].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[24].required_pos_args[0].pos = 1;
commands[24].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[24].required_pos_args[0].def.lv_types = ARG_DEF_LV_MIRROR | ARG_DEF_LV_RAID;
commands[24].optional_opt_args[0].opt = commandprofile_ARG;
commands[24].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[24].optional_opt_args[1].opt = config_ARG;
commands[24].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[24].optional_opt_args[2].opt = debug_ARG;
commands[24].optional_opt_args[3].opt = driverloaded_ARG;
commands[24].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[24].optional_opt_args[4].opt = help_ARG;
commands[24].optional_opt_args[5].opt = profile_ARG;
commands[24].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[24].optional_opt_args[6].opt = quiet_ARG;
commands[24].optional_opt_args[7].opt = verbose_ARG;
commands[24].optional_opt_args[8].opt = version_ARG;
commands[24].optional_opt_args[9].opt = yes_ARG;
commands[24].optional_opt_args[10].opt = alloc_ARG;
commands[24].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[24].optional_opt_args[11].opt = background_ARG;
commands[24].optional_opt_args[12].opt = force_ARG;
commands[24].optional_opt_args[13].opt = noudevsync_ARG;
commands[24].optional_opt_args[14].opt = test_ARG;
commands[24].optional_opt_args[15].opt = usepolicies_ARG;
commands[24].optional_pos_args[0].pos = 2;
commands[24].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[24].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[25].name = "lvconvert";
commands[25].command_line_id = "lvconvert_raid_to_striped";
commands[25].command_line_enum = lvconvert_raid_to_striped_CMD;
commands[25].fn = lvconvert;
commands[25].ro_count = 1;
commands[25].rp_count = 1;
commands[25].oo_count = 20;
commands[25].op_count = 1;
commands[25].desc = "DESC: Convert LV to type striped.";
commands[25].usage = "lvconvert --type striped LV_raid"
" [ --mirrors [+|-]Number, --stripes Number, --stripesize Number[k|unit], --regionsize Number[m|unit], --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]"
" [ PV ... ]";
commands[25].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[25].required_opt_args[0].opt = type_ARG;
commands[25].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[25].required_opt_args[0].def.str = "striped";
commands[25].required_pos_args[0].pos = 1;
commands[25].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[25].required_pos_args[0].def.lv_types = ARG_DEF_LV_RAID;
commands[25].optional_opt_args[0].opt = commandprofile_ARG;
commands[25].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[25].optional_opt_args[1].opt = config_ARG;
commands[25].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[25].optional_opt_args[2].opt = debug_ARG;
commands[25].optional_opt_args[3].opt = driverloaded_ARG;
commands[25].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[25].optional_opt_args[4].opt = help_ARG;
commands[25].optional_opt_args[5].opt = profile_ARG;
commands[25].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[25].optional_opt_args[6].opt = quiet_ARG;
commands[25].optional_opt_args[7].opt = verbose_ARG;
commands[25].optional_opt_args[8].opt = version_ARG;
commands[25].optional_opt_args[9].opt = yes_ARG;
commands[25].optional_opt_args[10].opt = mirrors_ARG;
commands[25].optional_opt_args[10].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[25].optional_opt_args[11].opt = stripes_long_ARG;
commands[25].optional_opt_args[11].def.val_bits = val_enum_to_bit(number_VAL);
commands[25].optional_opt_args[12].opt = stripesize_ARG;
commands[25].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[25].optional_opt_args[13].opt = regionsize_ARG;
commands[25].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[25].optional_opt_args[14].opt = alloc_ARG;
commands[25].optional_opt_args[14].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[25].optional_opt_args[15].opt = background_ARG;
commands[25].optional_opt_args[16].opt = force_ARG;
commands[25].optional_opt_args[17].opt = noudevsync_ARG;
commands[25].optional_opt_args[18].opt = test_ARG;
commands[25].optional_opt_args[19].opt = usepolicies_ARG;
commands[25].optional_pos_args[0].pos = 2;
commands[25].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[25].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[26].name = "lvconvert";
commands[26].command_line_id = "lvconvert_raid_or_mirror_to_linear";
commands[26].command_line_enum = lvconvert_raid_or_mirror_to_linear_CMD;
commands[26].fn = lvconvert;
commands[26].ro_count = 1;
commands[26].rp_count = 1;
commands[26].oo_count = 16;
commands[26].op_count = 0;
commands[26].desc = "DESC: Convert LV to type linear.";
commands[26].usage = "lvconvert --type linear LV_mirror_raid"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[26].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[26].required_opt_args[0].opt = type_ARG;
commands[26].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[26].required_opt_args[0].def.str = "linear";
commands[26].required_pos_args[0].pos = 1;
commands[26].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[26].required_pos_args[0].def.lv_types = ARG_DEF_LV_MIRROR | ARG_DEF_LV_RAID;
commands[26].optional_opt_args[0].opt = commandprofile_ARG;
commands[26].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[26].optional_opt_args[1].opt = config_ARG;
commands[26].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[26].optional_opt_args[2].opt = debug_ARG;
commands[26].optional_opt_args[3].opt = driverloaded_ARG;
commands[26].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[26].optional_opt_args[4].opt = help_ARG;
commands[26].optional_opt_args[5].opt = profile_ARG;
commands[26].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[26].optional_opt_args[6].opt = quiet_ARG;
commands[26].optional_opt_args[7].opt = verbose_ARG;
commands[26].optional_opt_args[8].opt = version_ARG;
commands[26].optional_opt_args[9].opt = yes_ARG;
commands[26].optional_opt_args[10].opt = alloc_ARG;
commands[26].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[26].optional_opt_args[11].opt = background_ARG;
commands[26].optional_opt_args[12].opt = force_ARG;
commands[26].optional_opt_args[13].opt = noudevsync_ARG;
commands[26].optional_opt_args[14].opt = test_ARG;
commands[26].optional_opt_args[15].opt = usepolicies_ARG;

commands[27].name = "lvconvert";
commands[27].command_line_id = "lvconvert_split_mirror_images_to_new";
commands[27].command_line_enum = lvconvert_split_mirror_images_to_new_CMD;
commands[27].fn = lvconvert;
commands[27].ro_count = 2;
commands[27].rp_count = 1;
commands[27].oo_count = 16;
commands[27].op_count = 0;
commands[27].desc = "DESC: Split images from a raid1 or mirror LV and use them to create a new LV.";
commands[27].usage = "lvconvert --splitmirrors Number --name LV_new LV_mirror_raid1_cache"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[27].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[27].required_opt_args[0].opt = splitmirrors_ARG;
commands[27].required_opt_args[0].def.val_bits = val_enum_to_bit(number_VAL);
commands[27].required_opt_args[1].opt = name_ARG;
commands[27].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[27].required_opt_args[1].def.flags = ARG_DEF_FLAG_NEW;
commands[27].required_pos_args[0].pos = 1;
commands[27].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[27].required_pos_args[0].def.lv_types = ARG_DEF_LV_MIRROR | ARG_DEF_LV_RAID1 | ARG_DEF_LV_CACHE;
commands[27].optional_opt_args[0].opt = commandprofile_ARG;
commands[27].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[27].optional_opt_args[1].opt = config_ARG;
commands[27].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[27].optional_opt_args[2].opt = debug_ARG;
commands[27].optional_opt_args[3].opt = driverloaded_ARG;
commands[27].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[27].optional_opt_args[4].opt = help_ARG;
commands[27].optional_opt_args[5].opt = profile_ARG;
commands[27].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[27].optional_opt_args[6].opt = quiet_ARG;
commands[27].optional_opt_args[7].opt = verbose_ARG;
commands[27].optional_opt_args[8].opt = version_ARG;
commands[27].optional_opt_args[9].opt = yes_ARG;
commands[27].optional_opt_args[10].opt = alloc_ARG;
commands[27].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[27].optional_opt_args[11].opt = background_ARG;
commands[27].optional_opt_args[12].opt = force_ARG;
commands[27].optional_opt_args[13].opt = noudevsync_ARG;
commands[27].optional_opt_args[14].opt = test_ARG;
commands[27].optional_opt_args[15].opt = usepolicies_ARG;

commands[28].name = "lvconvert";
commands[28].command_line_id = "lvconvert_split_mirror_images_and_track";
commands[28].command_line_enum = lvconvert_split_mirror_images_and_track_CMD;
commands[28].fn = lvconvert;
commands[28].ro_count = 2;
commands[28].rp_count = 1;
commands[28].oo_count = 16;
commands[28].op_count = 0;
commands[28].desc = "DESC: Split images from a raid1 LV and track changes to origin.";
commands[28].usage = "lvconvert --splitmirrors Number --trackchanges LV_raid1_cache"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[28].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[28].required_opt_args[0].opt = splitmirrors_ARG;
commands[28].required_opt_args[0].def.val_bits = val_enum_to_bit(number_VAL);
commands[28].required_opt_args[1].opt = trackchanges_ARG;
commands[28].required_pos_args[0].pos = 1;
commands[28].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[28].required_pos_args[0].def.lv_types = ARG_DEF_LV_RAID1 | ARG_DEF_LV_CACHE;
commands[28].optional_opt_args[0].opt = commandprofile_ARG;
commands[28].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[28].optional_opt_args[1].opt = config_ARG;
commands[28].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[28].optional_opt_args[2].opt = debug_ARG;
commands[28].optional_opt_args[3].opt = driverloaded_ARG;
commands[28].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[28].optional_opt_args[4].opt = help_ARG;
commands[28].optional_opt_args[5].opt = profile_ARG;
commands[28].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[28].optional_opt_args[6].opt = quiet_ARG;
commands[28].optional_opt_args[7].opt = verbose_ARG;
commands[28].optional_opt_args[8].opt = version_ARG;
commands[28].optional_opt_args[9].opt = yes_ARG;
commands[28].optional_opt_args[10].opt = alloc_ARG;
commands[28].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[28].optional_opt_args[11].opt = background_ARG;
commands[28].optional_opt_args[12].opt = force_ARG;
commands[28].optional_opt_args[13].opt = noudevsync_ARG;
commands[28].optional_opt_args[14].opt = test_ARG;
commands[28].optional_opt_args[15].opt = usepolicies_ARG;

commands[29].name = "lvconvert";
commands[29].command_line_id = "lvconvert_repair_pvs_or_thinpool";
commands[29].command_line_enum = lvconvert_repair_pvs_or_thinpool_CMD;
commands[29].fn = lvconvert;
commands[29].ro_count = 1;
commands[29].rp_count = 1;
commands[29].oo_count = 16;
commands[29].op_count = 0;
commands[29].desc = "DESC: Replace failed PVs in a raid or mirror LV.  DESC: Repair a thin pool.";
commands[29].usage = "lvconvert --repair LV_mirror_raid_thinpool"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[29].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[29].required_opt_args[0].opt = repair_ARG;
commands[29].required_pos_args[0].pos = 1;
commands[29].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[29].required_pos_args[0].def.lv_types = ARG_DEF_LV_MIRROR | ARG_DEF_LV_RAID | ARG_DEF_LV_THINPOOL;
commands[29].optional_opt_args[0].opt = commandprofile_ARG;
commands[29].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[29].optional_opt_args[1].opt = config_ARG;
commands[29].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[29].optional_opt_args[2].opt = debug_ARG;
commands[29].optional_opt_args[3].opt = driverloaded_ARG;
commands[29].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[29].optional_opt_args[4].opt = help_ARG;
commands[29].optional_opt_args[5].opt = profile_ARG;
commands[29].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[29].optional_opt_args[6].opt = quiet_ARG;
commands[29].optional_opt_args[7].opt = verbose_ARG;
commands[29].optional_opt_args[8].opt = version_ARG;
commands[29].optional_opt_args[9].opt = yes_ARG;
commands[29].optional_opt_args[10].opt = alloc_ARG;
commands[29].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[29].optional_opt_args[11].opt = background_ARG;
commands[29].optional_opt_args[12].opt = force_ARG;
commands[29].optional_opt_args[13].opt = noudevsync_ARG;
commands[29].optional_opt_args[14].opt = test_ARG;
commands[29].optional_opt_args[15].opt = usepolicies_ARG;

commands[30].name = "lvconvert";
commands[30].command_line_id = "lvconvert_replace_pv";
commands[30].command_line_enum = lvconvert_replace_pv_CMD;
commands[30].fn = lvconvert;
commands[30].ro_count = 1;
commands[30].rp_count = 1;
commands[30].oo_count = 16;
commands[30].op_count = 1;
commands[30].desc = "DESC: Replace specific PV(s) in a raid* LV with another PV.";
commands[30].usage = "lvconvert --replace PV LV_raid"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]"
" [ PV ... ]";
commands[30].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[30].required_opt_args[0].opt = replace_ARG;
commands[30].required_opt_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[30].required_pos_args[0].pos = 1;
commands[30].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[30].required_pos_args[0].def.lv_types = ARG_DEF_LV_RAID;
commands[30].optional_opt_args[0].opt = commandprofile_ARG;
commands[30].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[30].optional_opt_args[1].opt = config_ARG;
commands[30].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[30].optional_opt_args[2].opt = debug_ARG;
commands[30].optional_opt_args[3].opt = driverloaded_ARG;
commands[30].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[30].optional_opt_args[4].opt = help_ARG;
commands[30].optional_opt_args[5].opt = profile_ARG;
commands[30].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[30].optional_opt_args[6].opt = quiet_ARG;
commands[30].optional_opt_args[7].opt = verbose_ARG;
commands[30].optional_opt_args[8].opt = version_ARG;
commands[30].optional_opt_args[9].opt = yes_ARG;
commands[30].optional_opt_args[10].opt = alloc_ARG;
commands[30].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[30].optional_opt_args[11].opt = background_ARG;
commands[30].optional_opt_args[12].opt = force_ARG;
commands[30].optional_opt_args[13].opt = noudevsync_ARG;
commands[30].optional_opt_args[14].opt = test_ARG;
commands[30].optional_opt_args[15].opt = usepolicies_ARG;
commands[30].optional_pos_args[0].pos = 2;
commands[30].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[30].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[31].name = "lvconvert";
commands[31].command_line_id = "lvconvert_change_mirrorlog";
commands[31].command_line_enum = lvconvert_change_mirrorlog_CMD;
commands[31].fn = lvconvert;
commands[31].ro_count = 1;
commands[31].rp_count = 1;
commands[31].oo_count = 16;
commands[31].op_count = 0;
commands[31].desc = "DESC: Change the type of log used by LV.";
commands[31].usage = "lvconvert --mirrorlog core|disk LV_mirror"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[31].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[31].required_opt_args[0].opt = mirrorlog_ARG;
commands[31].required_opt_args[0].def.val_bits = val_enum_to_bit(mirrorlog_VAL);
commands[31].required_pos_args[0].pos = 1;
commands[31].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[31].required_pos_args[0].def.lv_types = ARG_DEF_LV_MIRROR;
commands[31].optional_opt_args[0].opt = commandprofile_ARG;
commands[31].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[31].optional_opt_args[1].opt = config_ARG;
commands[31].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[31].optional_opt_args[2].opt = debug_ARG;
commands[31].optional_opt_args[3].opt = driverloaded_ARG;
commands[31].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[31].optional_opt_args[4].opt = help_ARG;
commands[31].optional_opt_args[5].opt = profile_ARG;
commands[31].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[31].optional_opt_args[6].opt = quiet_ARG;
commands[31].optional_opt_args[7].opt = verbose_ARG;
commands[31].optional_opt_args[8].opt = version_ARG;
commands[31].optional_opt_args[9].opt = yes_ARG;
commands[31].optional_opt_args[10].opt = alloc_ARG;
commands[31].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[31].optional_opt_args[11].opt = background_ARG;
commands[31].optional_opt_args[12].opt = force_ARG;
commands[31].optional_opt_args[13].opt = noudevsync_ARG;
commands[31].optional_opt_args[14].opt = test_ARG;
commands[31].optional_opt_args[15].opt = usepolicies_ARG;

commands[32].name = "lvconvert";
commands[32].command_line_id = "lvconvert_split_and_keep_cachepool";
commands[32].command_line_enum = lvconvert_split_and_keep_cachepool_CMD;
commands[32].fn = lvconvert;
commands[32].ro_count = 1;
commands[32].rp_count = 1;
commands[32].oo_count = 16;
commands[32].op_count = 0;
commands[32].desc = "DESC: Separate and preserve a cache pool from a cache LV.";
commands[32].usage = "lvconvert --splitcache LV_thinpool_cache_cachepool"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[32].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[32].required_opt_args[0].opt = splitcache_ARG;
commands[32].required_pos_args[0].pos = 1;
commands[32].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[32].required_pos_args[0].def.lv_types = ARG_DEF_LV_THINPOOL | ARG_DEF_LV_CACHE | ARG_DEF_LV_CACHEPOOL;
commands[32].optional_opt_args[0].opt = commandprofile_ARG;
commands[32].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[32].optional_opt_args[1].opt = config_ARG;
commands[32].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[32].optional_opt_args[2].opt = debug_ARG;
commands[32].optional_opt_args[3].opt = driverloaded_ARG;
commands[32].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[32].optional_opt_args[4].opt = help_ARG;
commands[32].optional_opt_args[5].opt = profile_ARG;
commands[32].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[32].optional_opt_args[6].opt = quiet_ARG;
commands[32].optional_opt_args[7].opt = verbose_ARG;
commands[32].optional_opt_args[8].opt = version_ARG;
commands[32].optional_opt_args[9].opt = yes_ARG;
commands[32].optional_opt_args[10].opt = alloc_ARG;
commands[32].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[32].optional_opt_args[11].opt = background_ARG;
commands[32].optional_opt_args[12].opt = force_ARG;
commands[32].optional_opt_args[13].opt = noudevsync_ARG;
commands[32].optional_opt_args[14].opt = test_ARG;
commands[32].optional_opt_args[15].opt = usepolicies_ARG;

commands[33].name = "lvconvert";
commands[33].command_line_id = "lvconvert_split_and_delete_cachepool";
commands[33].command_line_enum = lvconvert_split_and_delete_cachepool_CMD;
commands[33].fn = lvconvert;
commands[33].ro_count = 1;
commands[33].rp_count = 1;
commands[33].oo_count = 16;
commands[33].op_count = 0;
commands[33].desc = "DESC: Separate and remove a cache pool from a cache LV.";
commands[33].usage = "lvconvert --uncache LV_thinpool_cache"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[33].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[33].required_opt_args[0].opt = uncache_ARG;
commands[33].required_pos_args[0].pos = 1;
commands[33].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[33].required_pos_args[0].def.lv_types = ARG_DEF_LV_THINPOOL | ARG_DEF_LV_CACHE;
commands[33].optional_opt_args[0].opt = commandprofile_ARG;
commands[33].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[33].optional_opt_args[1].opt = config_ARG;
commands[33].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[33].optional_opt_args[2].opt = debug_ARG;
commands[33].optional_opt_args[3].opt = driverloaded_ARG;
commands[33].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[33].optional_opt_args[4].opt = help_ARG;
commands[33].optional_opt_args[5].opt = profile_ARG;
commands[33].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[33].optional_opt_args[6].opt = quiet_ARG;
commands[33].optional_opt_args[7].opt = verbose_ARG;
commands[33].optional_opt_args[8].opt = version_ARG;
commands[33].optional_opt_args[9].opt = yes_ARG;
commands[33].optional_opt_args[10].opt = alloc_ARG;
commands[33].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[33].optional_opt_args[11].opt = background_ARG;
commands[33].optional_opt_args[12].opt = force_ARG;
commands[33].optional_opt_args[13].opt = noudevsync_ARG;
commands[33].optional_opt_args[14].opt = test_ARG;
commands[33].optional_opt_args[15].opt = usepolicies_ARG;

commands[34].name = "lvconvert";
commands[34].command_line_id = "lvconvert_split_cow_snapshot";
commands[34].command_line_enum = lvconvert_split_cow_snapshot_CMD;
commands[34].fn = lvconvert;
commands[34].ro_count = 1;
commands[34].rp_count = 1;
commands[34].oo_count = 16;
commands[34].op_count = 0;
commands[34].desc = "DESC: Separate a COW snapshot from its origin LV.";
commands[34].usage = "lvconvert --splitsnapshot LV_snapshot"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --background, --usepolicies ]";
commands[34].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[34].required_opt_args[0].opt = splitsnapshot_ARG;
commands[34].required_pos_args[0].pos = 1;
commands[34].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[34].required_pos_args[0].def.lv_types = ARG_DEF_LV_SNAPSHOT;
commands[34].optional_opt_args[0].opt = commandprofile_ARG;
commands[34].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[34].optional_opt_args[1].opt = config_ARG;
commands[34].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[34].optional_opt_args[2].opt = debug_ARG;
commands[34].optional_opt_args[3].opt = driverloaded_ARG;
commands[34].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[34].optional_opt_args[4].opt = help_ARG;
commands[34].optional_opt_args[5].opt = profile_ARG;
commands[34].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[34].optional_opt_args[6].opt = quiet_ARG;
commands[34].optional_opt_args[7].opt = verbose_ARG;
commands[34].optional_opt_args[8].opt = version_ARG;
commands[34].optional_opt_args[9].opt = yes_ARG;
commands[34].optional_opt_args[10].opt = alloc_ARG;
commands[34].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[34].optional_opt_args[11].opt = background_ARG;
commands[34].optional_opt_args[12].opt = force_ARG;
commands[34].optional_opt_args[13].opt = noudevsync_ARG;
commands[34].optional_opt_args[14].opt = test_ARG;
commands[34].optional_opt_args[15].opt = usepolicies_ARG;

commands[35].name = "lvconvert";
commands[35].command_line_id = "lvconvert_poll_mirror";
commands[35].command_line_enum = lvconvert_poll_mirror_CMD;
commands[35].fn = lvconvert;
commands[35].ro_count = 0;
commands[35].rp_count = 1;
commands[35].oo_count = 10;
commands[35].op_count = 0;
commands[35].desc = "DESC: Poll LV to collapse resync layers.";
commands[35].usage = "lvconvert LV_mirror";
commands[35].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[35].required_pos_args[0].pos = 1;
commands[35].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[35].required_pos_args[0].def.lv_types = ARG_DEF_LV_MIRROR;
commands[35].optional_opt_args[0].opt = commandprofile_ARG;
commands[35].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[35].optional_opt_args[1].opt = config_ARG;
commands[35].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[35].optional_opt_args[2].opt = debug_ARG;
commands[35].optional_opt_args[3].opt = driverloaded_ARG;
commands[35].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[35].optional_opt_args[4].opt = help_ARG;
commands[35].optional_opt_args[5].opt = profile_ARG;
commands[35].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[35].optional_opt_args[6].opt = quiet_ARG;
commands[35].optional_opt_args[7].opt = verbose_ARG;
commands[35].optional_opt_args[8].opt = version_ARG;
commands[35].optional_opt_args[9].opt = yes_ARG;

commands[36].name = "lvconvert";
commands[36].command_line_id = "lvconvert_swap_pool_metadata";
commands[36].command_line_enum = lvconvert_swap_pool_metadata_CMD;
commands[36].fn = lvconvert;
commands[36].ro_count = 1;
commands[36].rp_count = 1;
commands[36].oo_count = 10;
commands[36].op_count = 0;
commands[36].desc = "DESC: Swap metadata LV in a thin pool or cache pool (temporary command).";
commands[36].usage = "lvconvert --poolmetadata LV LV_thinpool_cachepool";
commands[36].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[36].required_opt_args[0].opt = poolmetadata_ARG;
commands[36].required_opt_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[36].required_pos_args[0].pos = 1;
commands[36].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[36].required_pos_args[0].def.lv_types = ARG_DEF_LV_THINPOOL | ARG_DEF_LV_CACHEPOOL;
commands[36].optional_opt_args[0].opt = commandprofile_ARG;
commands[36].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[36].optional_opt_args[1].opt = config_ARG;
commands[36].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[36].optional_opt_args[2].opt = debug_ARG;
commands[36].optional_opt_args[3].opt = driverloaded_ARG;
commands[36].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[36].optional_opt_args[4].opt = help_ARG;
commands[36].optional_opt_args[5].opt = profile_ARG;
commands[36].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[36].optional_opt_args[6].opt = quiet_ARG;
commands[36].optional_opt_args[7].opt = verbose_ARG;
commands[36].optional_opt_args[8].opt = version_ARG;
commands[36].optional_opt_args[9].opt = yes_ARG;

commands[37].name = "lvcreate";
commands[37].command_line_id = "lvcreate_error_vol";
commands[37].command_line_enum = lvcreate_error_vol_CMD;
commands[37].fn = lvcreate;
commands[37].ro_count = 2;
commands[37].rp_count = 1;
commands[37].oo_count = 32;
commands[37].op_count = 0;
commands[37].desc = "DESC: Create an LV that returns errors when used.";
commands[37].usage = "lvcreate --type error --size Number[m|unit] VG"
" [ --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]";
commands[37].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[37].required_opt_args[0].opt = type_ARG;
commands[37].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[37].required_opt_args[0].def.str = "error";
commands[37].required_opt_args[1].opt = size_ARG;
commands[37].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[37].required_pos_args[0].pos = 1;
commands[37].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[37].optional_opt_args[0].opt = commandprofile_ARG;
commands[37].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[37].optional_opt_args[1].opt = config_ARG;
commands[37].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[37].optional_opt_args[2].opt = debug_ARG;
commands[37].optional_opt_args[3].opt = driverloaded_ARG;
commands[37].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[37].optional_opt_args[4].opt = help_ARG;
commands[37].optional_opt_args[5].opt = profile_ARG;
commands[37].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[37].optional_opt_args[6].opt = quiet_ARG;
commands[37].optional_opt_args[7].opt = verbose_ARG;
commands[37].optional_opt_args[8].opt = version_ARG;
commands[37].optional_opt_args[9].opt = yes_ARG;
commands[37].optional_opt_args[10].opt = addtag_ARG;
commands[37].optional_opt_args[10].def.val_bits = val_enum_to_bit(tag_VAL);
commands[37].optional_opt_args[11].opt = alloc_ARG;
commands[37].optional_opt_args[11].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[37].optional_opt_args[12].opt = autobackup_ARG;
commands[37].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[37].optional_opt_args[13].opt = activate_ARG;
commands[37].optional_opt_args[13].def.val_bits = val_enum_to_bit(activation_VAL);
commands[37].optional_opt_args[14].opt = contiguous_ARG;
commands[37].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[37].optional_opt_args[15].opt = ignoreactivationskip_ARG;
commands[37].optional_opt_args[16].opt = ignoremonitoring_ARG;
commands[37].optional_opt_args[17].opt = major_ARG;
commands[37].optional_opt_args[17].def.val_bits = val_enum_to_bit(number_VAL);
commands[37].optional_opt_args[18].opt = metadataprofile_ARG;
commands[37].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[37].optional_opt_args[19].opt = minor_ARG;
commands[37].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[37].optional_opt_args[20].opt = monitor_ARG;
commands[37].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[37].optional_opt_args[21].opt = name_ARG;
commands[37].optional_opt_args[21].def.val_bits = val_enum_to_bit(string_VAL);
commands[37].optional_opt_args[22].opt = nosync_ARG;
commands[37].optional_opt_args[23].opt = noudevsync_ARG;
commands[37].optional_opt_args[24].opt = permission_ARG;
commands[37].optional_opt_args[24].def.val_bits = val_enum_to_bit(permission_VAL);
commands[37].optional_opt_args[25].opt = persistent_ARG;
commands[37].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[37].optional_opt_args[26].opt = readahead_ARG;
commands[37].optional_opt_args[26].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[37].optional_opt_args[27].opt = reportformat_ARG;
commands[37].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[37].optional_opt_args[28].opt = setactivationskip_ARG;
commands[37].optional_opt_args[28].def.val_bits = val_enum_to_bit(bool_VAL);
commands[37].optional_opt_args[29].opt = test_ARG;
commands[37].optional_opt_args[30].opt = wipesignatures_ARG;
commands[37].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[37].optional_opt_args[31].opt = zero_ARG;
commands[37].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);

commands[38].name = "lvcreate";
commands[38].command_line_id = "lvcreate_zero_vol";
commands[38].command_line_enum = lvcreate_zero_vol_CMD;
commands[38].fn = lvcreate;
commands[38].ro_count = 2;
commands[38].rp_count = 1;
commands[38].oo_count = 32;
commands[38].op_count = 0;
commands[38].desc = "DESC: Create an LV that returns zeros when read.";
commands[38].usage = "lvcreate --type zero --size Number[m|unit] VG"
" [ --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]";
commands[38].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[38].required_opt_args[0].opt = type_ARG;
commands[38].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[38].required_opt_args[0].def.str = "zero";
commands[38].required_opt_args[1].opt = size_ARG;
commands[38].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[38].required_pos_args[0].pos = 1;
commands[38].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[38].optional_opt_args[0].opt = commandprofile_ARG;
commands[38].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[38].optional_opt_args[1].opt = config_ARG;
commands[38].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[38].optional_opt_args[2].opt = debug_ARG;
commands[38].optional_opt_args[3].opt = driverloaded_ARG;
commands[38].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[38].optional_opt_args[4].opt = help_ARG;
commands[38].optional_opt_args[5].opt = profile_ARG;
commands[38].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[38].optional_opt_args[6].opt = quiet_ARG;
commands[38].optional_opt_args[7].opt = verbose_ARG;
commands[38].optional_opt_args[8].opt = version_ARG;
commands[38].optional_opt_args[9].opt = yes_ARG;
commands[38].optional_opt_args[10].opt = addtag_ARG;
commands[38].optional_opt_args[10].def.val_bits = val_enum_to_bit(tag_VAL);
commands[38].optional_opt_args[11].opt = alloc_ARG;
commands[38].optional_opt_args[11].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[38].optional_opt_args[12].opt = autobackup_ARG;
commands[38].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[38].optional_opt_args[13].opt = activate_ARG;
commands[38].optional_opt_args[13].def.val_bits = val_enum_to_bit(activation_VAL);
commands[38].optional_opt_args[14].opt = contiguous_ARG;
commands[38].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[38].optional_opt_args[15].opt = ignoreactivationskip_ARG;
commands[38].optional_opt_args[16].opt = ignoremonitoring_ARG;
commands[38].optional_opt_args[17].opt = major_ARG;
commands[38].optional_opt_args[17].def.val_bits = val_enum_to_bit(number_VAL);
commands[38].optional_opt_args[18].opt = metadataprofile_ARG;
commands[38].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[38].optional_opt_args[19].opt = minor_ARG;
commands[38].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[38].optional_opt_args[20].opt = monitor_ARG;
commands[38].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[38].optional_opt_args[21].opt = name_ARG;
commands[38].optional_opt_args[21].def.val_bits = val_enum_to_bit(string_VAL);
commands[38].optional_opt_args[22].opt = nosync_ARG;
commands[38].optional_opt_args[23].opt = noudevsync_ARG;
commands[38].optional_opt_args[24].opt = permission_ARG;
commands[38].optional_opt_args[24].def.val_bits = val_enum_to_bit(permission_VAL);
commands[38].optional_opt_args[25].opt = persistent_ARG;
commands[38].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[38].optional_opt_args[26].opt = readahead_ARG;
commands[38].optional_opt_args[26].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[38].optional_opt_args[27].opt = reportformat_ARG;
commands[38].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[38].optional_opt_args[28].opt = setactivationskip_ARG;
commands[38].optional_opt_args[28].def.val_bits = val_enum_to_bit(bool_VAL);
commands[38].optional_opt_args[29].opt = test_ARG;
commands[38].optional_opt_args[30].opt = wipesignatures_ARG;
commands[38].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[38].optional_opt_args[31].opt = zero_ARG;
commands[38].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);

commands[39].name = "lvcreate";
commands[39].command_line_id = "lvcreate_linear";
commands[39].command_line_enum = lvcreate_linear_CMD;
commands[39].fn = lvcreate;
commands[39].ro_count = 2;
commands[39].rp_count = 1;
commands[39].oo_count = 32;
commands[39].op_count = 1;
commands[39].desc = "DESC: Create a linear LV.";
commands[39].usage = "lvcreate --type linear --size Number[m|unit] VG"
" [ --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[39].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[39].required_opt_args[0].opt = type_ARG;
commands[39].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[39].required_opt_args[0].def.str = "linear";
commands[39].required_opt_args[1].opt = size_ARG;
commands[39].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[39].required_pos_args[0].pos = 1;
commands[39].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[39].optional_opt_args[0].opt = commandprofile_ARG;
commands[39].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[39].optional_opt_args[1].opt = config_ARG;
commands[39].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[39].optional_opt_args[2].opt = debug_ARG;
commands[39].optional_opt_args[3].opt = driverloaded_ARG;
commands[39].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[39].optional_opt_args[4].opt = help_ARG;
commands[39].optional_opt_args[5].opt = profile_ARG;
commands[39].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[39].optional_opt_args[6].opt = quiet_ARG;
commands[39].optional_opt_args[7].opt = verbose_ARG;
commands[39].optional_opt_args[8].opt = version_ARG;
commands[39].optional_opt_args[9].opt = yes_ARG;
commands[39].optional_opt_args[10].opt = addtag_ARG;
commands[39].optional_opt_args[10].def.val_bits = val_enum_to_bit(tag_VAL);
commands[39].optional_opt_args[11].opt = alloc_ARG;
commands[39].optional_opt_args[11].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[39].optional_opt_args[12].opt = autobackup_ARG;
commands[39].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[39].optional_opt_args[13].opt = activate_ARG;
commands[39].optional_opt_args[13].def.val_bits = val_enum_to_bit(activation_VAL);
commands[39].optional_opt_args[14].opt = contiguous_ARG;
commands[39].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[39].optional_opt_args[15].opt = ignoreactivationskip_ARG;
commands[39].optional_opt_args[16].opt = ignoremonitoring_ARG;
commands[39].optional_opt_args[17].opt = major_ARG;
commands[39].optional_opt_args[17].def.val_bits = val_enum_to_bit(number_VAL);
commands[39].optional_opt_args[18].opt = metadataprofile_ARG;
commands[39].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[39].optional_opt_args[19].opt = minor_ARG;
commands[39].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[39].optional_opt_args[20].opt = monitor_ARG;
commands[39].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[39].optional_opt_args[21].opt = name_ARG;
commands[39].optional_opt_args[21].def.val_bits = val_enum_to_bit(string_VAL);
commands[39].optional_opt_args[22].opt = nosync_ARG;
commands[39].optional_opt_args[23].opt = noudevsync_ARG;
commands[39].optional_opt_args[24].opt = permission_ARG;
commands[39].optional_opt_args[24].def.val_bits = val_enum_to_bit(permission_VAL);
commands[39].optional_opt_args[25].opt = persistent_ARG;
commands[39].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[39].optional_opt_args[26].opt = readahead_ARG;
commands[39].optional_opt_args[26].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[39].optional_opt_args[27].opt = reportformat_ARG;
commands[39].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[39].optional_opt_args[28].opt = setactivationskip_ARG;
commands[39].optional_opt_args[28].def.val_bits = val_enum_to_bit(bool_VAL);
commands[39].optional_opt_args[29].opt = test_ARG;
commands[39].optional_opt_args[30].opt = wipesignatures_ARG;
commands[39].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[39].optional_opt_args[31].opt = zero_ARG;
commands[39].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[39].optional_pos_args[0].pos = 2;
commands[39].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[39].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[40].name = "lvcreate";
commands[40].command_line_id = "lvcreate_linear";
commands[40].command_line_enum = lvcreate_linear_CMD;
commands[40].fn = lvcreate;
commands[40].ro_count = 1;
commands[40].rp_count = 1;
commands[40].oo_count = 33;
commands[40].op_count = 1;
commands[40].desc = "DESC: Create a linear LV  (default --type linear).  DESC: When --name is omitted, the name is generated.!";
commands[40].usage = "lvcreate --size Number[m|unit] VG"
" [ --type linear, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[40].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[40].required_opt_args[0].opt = size_ARG;
commands[40].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[40].required_pos_args[0].pos = 1;
commands[40].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[40].optional_opt_args[0].opt = commandprofile_ARG;
commands[40].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[40].optional_opt_args[1].opt = config_ARG;
commands[40].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[40].optional_opt_args[2].opt = debug_ARG;
commands[40].optional_opt_args[3].opt = driverloaded_ARG;
commands[40].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[40].optional_opt_args[4].opt = help_ARG;
commands[40].optional_opt_args[5].opt = profile_ARG;
commands[40].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[40].optional_opt_args[6].opt = quiet_ARG;
commands[40].optional_opt_args[7].opt = verbose_ARG;
commands[40].optional_opt_args[8].opt = version_ARG;
commands[40].optional_opt_args[9].opt = yes_ARG;
commands[40].optional_opt_args[10].opt = type_ARG;
commands[40].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[40].optional_opt_args[10].def.str = "linear";
commands[40].optional_opt_args[11].opt = addtag_ARG;
commands[40].optional_opt_args[11].def.val_bits = val_enum_to_bit(tag_VAL);
commands[40].optional_opt_args[12].opt = alloc_ARG;
commands[40].optional_opt_args[12].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[40].optional_opt_args[13].opt = autobackup_ARG;
commands[40].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[40].optional_opt_args[14].opt = activate_ARG;
commands[40].optional_opt_args[14].def.val_bits = val_enum_to_bit(activation_VAL);
commands[40].optional_opt_args[15].opt = contiguous_ARG;
commands[40].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[40].optional_opt_args[16].opt = ignoreactivationskip_ARG;
commands[40].optional_opt_args[17].opt = ignoremonitoring_ARG;
commands[40].optional_opt_args[18].opt = major_ARG;
commands[40].optional_opt_args[18].def.val_bits = val_enum_to_bit(number_VAL);
commands[40].optional_opt_args[19].opt = metadataprofile_ARG;
commands[40].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);
commands[40].optional_opt_args[20].opt = minor_ARG;
commands[40].optional_opt_args[20].def.val_bits = val_enum_to_bit(number_VAL);
commands[40].optional_opt_args[21].opt = monitor_ARG;
commands[40].optional_opt_args[21].def.val_bits = val_enum_to_bit(bool_VAL);
commands[40].optional_opt_args[22].opt = name_ARG;
commands[40].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[40].optional_opt_args[23].opt = nosync_ARG;
commands[40].optional_opt_args[24].opt = noudevsync_ARG;
commands[40].optional_opt_args[25].opt = permission_ARG;
commands[40].optional_opt_args[25].def.val_bits = val_enum_to_bit(permission_VAL);
commands[40].optional_opt_args[26].opt = persistent_ARG;
commands[40].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[40].optional_opt_args[27].opt = readahead_ARG;
commands[40].optional_opt_args[27].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[40].optional_opt_args[28].opt = reportformat_ARG;
commands[40].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[40].optional_opt_args[29].opt = setactivationskip_ARG;
commands[40].optional_opt_args[29].def.val_bits = val_enum_to_bit(bool_VAL);
commands[40].optional_opt_args[30].opt = test_ARG;
commands[40].optional_opt_args[31].opt = wipesignatures_ARG;
commands[40].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[40].optional_opt_args[32].opt = zero_ARG;
commands[40].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[40].optional_pos_args[0].pos = 2;
commands[40].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[40].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[41].name = "lvcreate";
commands[41].command_line_id = "lvcreate_striped";
commands[41].command_line_enum = lvcreate_striped_CMD;
commands[41].fn = lvcreate;
commands[41].ro_count = 2;
commands[41].rp_count = 1;
commands[41].oo_count = 34;
commands[41].op_count = 1;
commands[41].desc = "DESC: Create a striped LV.";
commands[41].usage = "lvcreate --type striped --size Number[m|unit] VG"
" [ --stripes Number, --stripesize Number[k|unit], --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[41].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[41].required_opt_args[0].opt = type_ARG;
commands[41].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[41].required_opt_args[0].def.str = "striped";
commands[41].required_opt_args[1].opt = size_ARG;
commands[41].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[41].required_pos_args[0].pos = 1;
commands[41].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[41].optional_opt_args[0].opt = commandprofile_ARG;
commands[41].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[41].optional_opt_args[1].opt = config_ARG;
commands[41].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[41].optional_opt_args[2].opt = debug_ARG;
commands[41].optional_opt_args[3].opt = driverloaded_ARG;
commands[41].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[41].optional_opt_args[4].opt = help_ARG;
commands[41].optional_opt_args[5].opt = profile_ARG;
commands[41].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[41].optional_opt_args[6].opt = quiet_ARG;
commands[41].optional_opt_args[7].opt = verbose_ARG;
commands[41].optional_opt_args[8].opt = version_ARG;
commands[41].optional_opt_args[9].opt = yes_ARG;
commands[41].optional_opt_args[10].opt = stripes_ARG;
commands[41].optional_opt_args[10].def.val_bits = val_enum_to_bit(number_VAL);
commands[41].optional_opt_args[11].opt = stripesize_ARG;
commands[41].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[41].optional_opt_args[12].opt = addtag_ARG;
commands[41].optional_opt_args[12].def.val_bits = val_enum_to_bit(tag_VAL);
commands[41].optional_opt_args[13].opt = alloc_ARG;
commands[41].optional_opt_args[13].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[41].optional_opt_args[14].opt = autobackup_ARG;
commands[41].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[41].optional_opt_args[15].opt = activate_ARG;
commands[41].optional_opt_args[15].def.val_bits = val_enum_to_bit(activation_VAL);
commands[41].optional_opt_args[16].opt = contiguous_ARG;
commands[41].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[41].optional_opt_args[17].opt = ignoreactivationskip_ARG;
commands[41].optional_opt_args[18].opt = ignoremonitoring_ARG;
commands[41].optional_opt_args[19].opt = major_ARG;
commands[41].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[41].optional_opt_args[20].opt = metadataprofile_ARG;
commands[41].optional_opt_args[20].def.val_bits = val_enum_to_bit(string_VAL);
commands[41].optional_opt_args[21].opt = minor_ARG;
commands[41].optional_opt_args[21].def.val_bits = val_enum_to_bit(number_VAL);
commands[41].optional_opt_args[22].opt = monitor_ARG;
commands[41].optional_opt_args[22].def.val_bits = val_enum_to_bit(bool_VAL);
commands[41].optional_opt_args[23].opt = name_ARG;
commands[41].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[41].optional_opt_args[24].opt = nosync_ARG;
commands[41].optional_opt_args[25].opt = noudevsync_ARG;
commands[41].optional_opt_args[26].opt = permission_ARG;
commands[41].optional_opt_args[26].def.val_bits = val_enum_to_bit(permission_VAL);
commands[41].optional_opt_args[27].opt = persistent_ARG;
commands[41].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[41].optional_opt_args[28].opt = readahead_ARG;
commands[41].optional_opt_args[28].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[41].optional_opt_args[29].opt = reportformat_ARG;
commands[41].optional_opt_args[29].def.val_bits = val_enum_to_bit(string_VAL);
commands[41].optional_opt_args[30].opt = setactivationskip_ARG;
commands[41].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[41].optional_opt_args[31].opt = test_ARG;
commands[41].optional_opt_args[32].opt = wipesignatures_ARG;
commands[41].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[41].optional_opt_args[33].opt = zero_ARG;
commands[41].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[41].optional_pos_args[0].pos = 2;
commands[41].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[41].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[42].name = "lvcreate";
commands[42].command_line_id = "lvcreate_striped";
commands[42].command_line_enum = lvcreate_striped_CMD;
commands[42].fn = lvcreate;
commands[42].ro_count = 2;
commands[42].rp_count = 1;
commands[42].oo_count = 34;
commands[42].op_count = 1;
commands[42].desc = "DESC: Create a striped LV (infers --type striped).";
commands[42].usage = "lvcreate --stripes Number --size Number[m|unit] VG"
" [ --type striped, --stripesize Number[k|unit], --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[42].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[42].required_opt_args[0].opt = stripes_ARG;
commands[42].required_opt_args[0].def.val_bits = val_enum_to_bit(number_VAL);
commands[42].required_opt_args[1].opt = size_ARG;
commands[42].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[42].required_pos_args[0].pos = 1;
commands[42].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[42].optional_opt_args[0].opt = commandprofile_ARG;
commands[42].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[42].optional_opt_args[1].opt = config_ARG;
commands[42].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[42].optional_opt_args[2].opt = debug_ARG;
commands[42].optional_opt_args[3].opt = driverloaded_ARG;
commands[42].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[42].optional_opt_args[4].opt = help_ARG;
commands[42].optional_opt_args[5].opt = profile_ARG;
commands[42].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[42].optional_opt_args[6].opt = quiet_ARG;
commands[42].optional_opt_args[7].opt = verbose_ARG;
commands[42].optional_opt_args[8].opt = version_ARG;
commands[42].optional_opt_args[9].opt = yes_ARG;
commands[42].optional_opt_args[10].opt = type_ARG;
commands[42].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[42].optional_opt_args[10].def.str = "striped";
commands[42].optional_opt_args[11].opt = stripesize_ARG;
commands[42].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[42].optional_opt_args[12].opt = addtag_ARG;
commands[42].optional_opt_args[12].def.val_bits = val_enum_to_bit(tag_VAL);
commands[42].optional_opt_args[13].opt = alloc_ARG;
commands[42].optional_opt_args[13].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[42].optional_opt_args[14].opt = autobackup_ARG;
commands[42].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[42].optional_opt_args[15].opt = activate_ARG;
commands[42].optional_opt_args[15].def.val_bits = val_enum_to_bit(activation_VAL);
commands[42].optional_opt_args[16].opt = contiguous_ARG;
commands[42].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[42].optional_opt_args[17].opt = ignoreactivationskip_ARG;
commands[42].optional_opt_args[18].opt = ignoremonitoring_ARG;
commands[42].optional_opt_args[19].opt = major_ARG;
commands[42].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[42].optional_opt_args[20].opt = metadataprofile_ARG;
commands[42].optional_opt_args[20].def.val_bits = val_enum_to_bit(string_VAL);
commands[42].optional_opt_args[21].opt = minor_ARG;
commands[42].optional_opt_args[21].def.val_bits = val_enum_to_bit(number_VAL);
commands[42].optional_opt_args[22].opt = monitor_ARG;
commands[42].optional_opt_args[22].def.val_bits = val_enum_to_bit(bool_VAL);
commands[42].optional_opt_args[23].opt = name_ARG;
commands[42].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[42].optional_opt_args[24].opt = nosync_ARG;
commands[42].optional_opt_args[25].opt = noudevsync_ARG;
commands[42].optional_opt_args[26].opt = permission_ARG;
commands[42].optional_opt_args[26].def.val_bits = val_enum_to_bit(permission_VAL);
commands[42].optional_opt_args[27].opt = persistent_ARG;
commands[42].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[42].optional_opt_args[28].opt = readahead_ARG;
commands[42].optional_opt_args[28].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[42].optional_opt_args[29].opt = reportformat_ARG;
commands[42].optional_opt_args[29].def.val_bits = val_enum_to_bit(string_VAL);
commands[42].optional_opt_args[30].opt = setactivationskip_ARG;
commands[42].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[42].optional_opt_args[31].opt = test_ARG;
commands[42].optional_opt_args[32].opt = wipesignatures_ARG;
commands[42].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[42].optional_opt_args[33].opt = zero_ARG;
commands[42].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[42].optional_pos_args[0].pos = 2;
commands[42].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[42].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[43].name = "lvcreate";
commands[43].command_line_id = "lvcreate_mirror";
commands[43].command_line_enum = lvcreate_mirror_CMD;
commands[43].fn = lvcreate;
commands[43].ro_count = 2;
commands[43].rp_count = 1;
commands[43].oo_count = 36;
commands[43].op_count = 1;
commands[43].desc = "DESC: Create a mirror LV.";
commands[43].usage = "lvcreate --type mirror --size Number[m|unit] VG"
" [ --mirrors [+|-]Number, --mirrorlog core|disk, --corelog, --regionsize Number[m|unit], --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[43].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[43].required_opt_args[0].opt = type_ARG;
commands[43].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[43].required_opt_args[0].def.str = "mirror";
commands[43].required_opt_args[1].opt = size_ARG;
commands[43].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[43].required_pos_args[0].pos = 1;
commands[43].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[43].optional_opt_args[0].opt = commandprofile_ARG;
commands[43].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[43].optional_opt_args[1].opt = config_ARG;
commands[43].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[43].optional_opt_args[2].opt = debug_ARG;
commands[43].optional_opt_args[3].opt = driverloaded_ARG;
commands[43].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[43].optional_opt_args[4].opt = help_ARG;
commands[43].optional_opt_args[5].opt = profile_ARG;
commands[43].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[43].optional_opt_args[6].opt = quiet_ARG;
commands[43].optional_opt_args[7].opt = verbose_ARG;
commands[43].optional_opt_args[8].opt = version_ARG;
commands[43].optional_opt_args[9].opt = yes_ARG;
commands[43].optional_opt_args[10].opt = mirrors_ARG;
commands[43].optional_opt_args[10].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[43].optional_opt_args[11].opt = mirrorlog_ARG;
commands[43].optional_opt_args[11].def.val_bits = val_enum_to_bit(mirrorlog_VAL);
commands[43].optional_opt_args[12].opt = corelog_ARG;
commands[43].optional_opt_args[13].opt = regionsize_ARG;
commands[43].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[43].optional_opt_args[14].opt = addtag_ARG;
commands[43].optional_opt_args[14].def.val_bits = val_enum_to_bit(tag_VAL);
commands[43].optional_opt_args[15].opt = alloc_ARG;
commands[43].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[43].optional_opt_args[16].opt = autobackup_ARG;
commands[43].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[43].optional_opt_args[17].opt = activate_ARG;
commands[43].optional_opt_args[17].def.val_bits = val_enum_to_bit(activation_VAL);
commands[43].optional_opt_args[18].opt = contiguous_ARG;
commands[43].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[43].optional_opt_args[19].opt = ignoreactivationskip_ARG;
commands[43].optional_opt_args[20].opt = ignoremonitoring_ARG;
commands[43].optional_opt_args[21].opt = major_ARG;
commands[43].optional_opt_args[21].def.val_bits = val_enum_to_bit(number_VAL);
commands[43].optional_opt_args[22].opt = metadataprofile_ARG;
commands[43].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[43].optional_opt_args[23].opt = minor_ARG;
commands[43].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[43].optional_opt_args[24].opt = monitor_ARG;
commands[43].optional_opt_args[24].def.val_bits = val_enum_to_bit(bool_VAL);
commands[43].optional_opt_args[25].opt = name_ARG;
commands[43].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[43].optional_opt_args[26].opt = nosync_ARG;
commands[43].optional_opt_args[27].opt = noudevsync_ARG;
commands[43].optional_opt_args[28].opt = permission_ARG;
commands[43].optional_opt_args[28].def.val_bits = val_enum_to_bit(permission_VAL);
commands[43].optional_opt_args[29].opt = persistent_ARG;
commands[43].optional_opt_args[29].def.val_bits = val_enum_to_bit(bool_VAL);
commands[43].optional_opt_args[30].opt = readahead_ARG;
commands[43].optional_opt_args[30].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[43].optional_opt_args[31].opt = reportformat_ARG;
commands[43].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[43].optional_opt_args[32].opt = setactivationskip_ARG;
commands[43].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[43].optional_opt_args[33].opt = test_ARG;
commands[43].optional_opt_args[34].opt = wipesignatures_ARG;
commands[43].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[43].optional_opt_args[35].opt = zero_ARG;
commands[43].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[43].optional_pos_args[0].pos = 2;
commands[43].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[43].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[44].name = "lvcreate";
commands[44].command_line_id = "lvcreate_mirror";
commands[44].command_line_enum = lvcreate_mirror_CMD;
commands[44].fn = lvcreate;
commands[44].ro_count = 2;
commands[44].rp_count = 1;
commands[44].oo_count = 42;
commands[44].op_count = 1;
commands[44].desc = "DESC: Create a raid1 or mirror LV (variant, infers --type raid1|mirror).";
commands[44].usage = "lvcreate --mirrors [+|-]Number --size Number[m|unit] VG"
" [ --type raid1, --type mirror, --mirrorlog core|disk, --corelog, --mirrors [+|-]Number, --stripes Number, --stripesize Number[k|unit], --regionsize Number[m|unit], --minrecoveryrate Number[k|unit], --maxrecoveryrate Number[k|unit], --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[44].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[44].required_opt_args[0].opt = mirrors_ARG;
commands[44].required_opt_args[0].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[44].required_opt_args[1].opt = size_ARG;
commands[44].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[44].required_pos_args[0].pos = 1;
commands[44].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[44].optional_opt_args[0].opt = commandprofile_ARG;
commands[44].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[44].optional_opt_args[1].opt = config_ARG;
commands[44].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[44].optional_opt_args[2].opt = debug_ARG;
commands[44].optional_opt_args[3].opt = driverloaded_ARG;
commands[44].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[44].optional_opt_args[4].opt = help_ARG;
commands[44].optional_opt_args[5].opt = profile_ARG;
commands[44].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[44].optional_opt_args[6].opt = quiet_ARG;
commands[44].optional_opt_args[7].opt = verbose_ARG;
commands[44].optional_opt_args[8].opt = version_ARG;
commands[44].optional_opt_args[9].opt = yes_ARG;
commands[44].optional_opt_args[10].opt = type_ARG;
commands[44].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[44].optional_opt_args[10].def.str = "raid1";
commands[44].optional_opt_args[11].opt = type_ARG;
commands[44].optional_opt_args[11].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[44].optional_opt_args[11].def.str = "mirror";
commands[44].optional_opt_args[12].opt = mirrorlog_ARG;
commands[44].optional_opt_args[12].def.val_bits = val_enum_to_bit(mirrorlog_VAL);
commands[44].optional_opt_args[13].opt = corelog_ARG;
commands[44].optional_opt_args[14].opt = mirrors_ARG;
commands[44].optional_opt_args[14].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[44].optional_opt_args[15].opt = stripes_ARG;
commands[44].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[44].optional_opt_args[16].opt = stripesize_ARG;
commands[44].optional_opt_args[16].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[44].optional_opt_args[17].opt = regionsize_ARG;
commands[44].optional_opt_args[17].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[44].optional_opt_args[18].opt = minrecoveryrate_ARG;
commands[44].optional_opt_args[18].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[44].optional_opt_args[19].opt = maxrecoveryrate_ARG;
commands[44].optional_opt_args[19].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[44].optional_opt_args[20].opt = addtag_ARG;
commands[44].optional_opt_args[20].def.val_bits = val_enum_to_bit(tag_VAL);
commands[44].optional_opt_args[21].opt = alloc_ARG;
commands[44].optional_opt_args[21].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[44].optional_opt_args[22].opt = autobackup_ARG;
commands[44].optional_opt_args[22].def.val_bits = val_enum_to_bit(bool_VAL);
commands[44].optional_opt_args[23].opt = activate_ARG;
commands[44].optional_opt_args[23].def.val_bits = val_enum_to_bit(activation_VAL);
commands[44].optional_opt_args[24].opt = contiguous_ARG;
commands[44].optional_opt_args[24].def.val_bits = val_enum_to_bit(bool_VAL);
commands[44].optional_opt_args[25].opt = ignoreactivationskip_ARG;
commands[44].optional_opt_args[26].opt = ignoremonitoring_ARG;
commands[44].optional_opt_args[27].opt = major_ARG;
commands[44].optional_opt_args[27].def.val_bits = val_enum_to_bit(number_VAL);
commands[44].optional_opt_args[28].opt = metadataprofile_ARG;
commands[44].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[44].optional_opt_args[29].opt = minor_ARG;
commands[44].optional_opt_args[29].def.val_bits = val_enum_to_bit(number_VAL);
commands[44].optional_opt_args[30].opt = monitor_ARG;
commands[44].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[44].optional_opt_args[31].opt = name_ARG;
commands[44].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[44].optional_opt_args[32].opt = nosync_ARG;
commands[44].optional_opt_args[33].opt = noudevsync_ARG;
commands[44].optional_opt_args[34].opt = permission_ARG;
commands[44].optional_opt_args[34].def.val_bits = val_enum_to_bit(permission_VAL);
commands[44].optional_opt_args[35].opt = persistent_ARG;
commands[44].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[44].optional_opt_args[36].opt = readahead_ARG;
commands[44].optional_opt_args[36].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[44].optional_opt_args[37].opt = reportformat_ARG;
commands[44].optional_opt_args[37].def.val_bits = val_enum_to_bit(string_VAL);
commands[44].optional_opt_args[38].opt = setactivationskip_ARG;
commands[44].optional_opt_args[38].def.val_bits = val_enum_to_bit(bool_VAL);
commands[44].optional_opt_args[39].opt = test_ARG;
commands[44].optional_opt_args[40].opt = wipesignatures_ARG;
commands[44].optional_opt_args[40].def.val_bits = val_enum_to_bit(bool_VAL);
commands[44].optional_opt_args[41].opt = zero_ARG;
commands[44].optional_opt_args[41].def.val_bits = val_enum_to_bit(bool_VAL);
commands[44].optional_pos_args[0].pos = 2;
commands[44].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[44].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[45].name = "lvcreate";
commands[45].command_line_id = "lvcreate_raid_any";
commands[45].command_line_enum = lvcreate_raid_any_CMD;
commands[45].fn = lvcreate;
commands[45].ro_count = 2;
commands[45].rp_count = 1;
commands[45].oo_count = 38;
commands[45].op_count = 1;
commands[45].desc = "DESC: Create a raid LV (a specific raid level must be used, e.g. raid1.)";
commands[45].usage = "lvcreate --type raid --size Number[m|unit] VG"
" [ --mirrors [+|-]Number, --stripes Number, --stripesize Number[k|unit], --regionsize Number[m|unit], --minrecoveryrate Number[k|unit], --maxrecoveryrate Number[k|unit], --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[45].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[45].required_opt_args[0].opt = type_ARG;
commands[45].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[45].required_opt_args[0].def.str = "raid";
commands[45].required_opt_args[1].opt = size_ARG;
commands[45].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[45].required_pos_args[0].pos = 1;
commands[45].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[45].optional_opt_args[0].opt = commandprofile_ARG;
commands[45].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[45].optional_opt_args[1].opt = config_ARG;
commands[45].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[45].optional_opt_args[2].opt = debug_ARG;
commands[45].optional_opt_args[3].opt = driverloaded_ARG;
commands[45].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[45].optional_opt_args[4].opt = help_ARG;
commands[45].optional_opt_args[5].opt = profile_ARG;
commands[45].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[45].optional_opt_args[6].opt = quiet_ARG;
commands[45].optional_opt_args[7].opt = verbose_ARG;
commands[45].optional_opt_args[8].opt = version_ARG;
commands[45].optional_opt_args[9].opt = yes_ARG;
commands[45].optional_opt_args[10].opt = mirrors_ARG;
commands[45].optional_opt_args[10].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[45].optional_opt_args[11].opt = stripes_ARG;
commands[45].optional_opt_args[11].def.val_bits = val_enum_to_bit(number_VAL);
commands[45].optional_opt_args[12].opt = stripesize_ARG;
commands[45].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[45].optional_opt_args[13].opt = regionsize_ARG;
commands[45].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[45].optional_opt_args[14].opt = minrecoveryrate_ARG;
commands[45].optional_opt_args[14].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[45].optional_opt_args[15].opt = maxrecoveryrate_ARG;
commands[45].optional_opt_args[15].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[45].optional_opt_args[16].opt = addtag_ARG;
commands[45].optional_opt_args[16].def.val_bits = val_enum_to_bit(tag_VAL);
commands[45].optional_opt_args[17].opt = alloc_ARG;
commands[45].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[45].optional_opt_args[18].opt = autobackup_ARG;
commands[45].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[45].optional_opt_args[19].opt = activate_ARG;
commands[45].optional_opt_args[19].def.val_bits = val_enum_to_bit(activation_VAL);
commands[45].optional_opt_args[20].opt = contiguous_ARG;
commands[45].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[45].optional_opt_args[21].opt = ignoreactivationskip_ARG;
commands[45].optional_opt_args[22].opt = ignoremonitoring_ARG;
commands[45].optional_opt_args[23].opt = major_ARG;
commands[45].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[45].optional_opt_args[24].opt = metadataprofile_ARG;
commands[45].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[45].optional_opt_args[25].opt = minor_ARG;
commands[45].optional_opt_args[25].def.val_bits = val_enum_to_bit(number_VAL);
commands[45].optional_opt_args[26].opt = monitor_ARG;
commands[45].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[45].optional_opt_args[27].opt = name_ARG;
commands[45].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[45].optional_opt_args[28].opt = nosync_ARG;
commands[45].optional_opt_args[29].opt = noudevsync_ARG;
commands[45].optional_opt_args[30].opt = permission_ARG;
commands[45].optional_opt_args[30].def.val_bits = val_enum_to_bit(permission_VAL);
commands[45].optional_opt_args[31].opt = persistent_ARG;
commands[45].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[45].optional_opt_args[32].opt = readahead_ARG;
commands[45].optional_opt_args[32].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[45].optional_opt_args[33].opt = reportformat_ARG;
commands[45].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);
commands[45].optional_opt_args[34].opt = setactivationskip_ARG;
commands[45].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[45].optional_opt_args[35].opt = test_ARG;
commands[45].optional_opt_args[36].opt = wipesignatures_ARG;
commands[45].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[45].optional_opt_args[37].opt = zero_ARG;
commands[45].optional_opt_args[37].def.val_bits = val_enum_to_bit(bool_VAL);
commands[45].optional_pos_args[0].pos = 2;
commands[45].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[45].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[46].name = "lvcreate";
commands[46].command_line_id = "lvcreate_cow_snapshot";
commands[46].command_line_enum = lvcreate_cow_snapshot_CMD;
commands[46].fn = lvcreate;
commands[46].ro_count = 2;
commands[46].rp_count = 1;
commands[46].oo_count = 33;
commands[46].op_count = 1;
commands[46].desc = "DESC: Create a COW snapshot LV from an origin LV.";
commands[46].usage = "lvcreate --type snapshot --size Number[m|unit] LV"
" [ --snapshot, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[46].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[46].required_opt_args[0].opt = type_ARG;
commands[46].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[46].required_opt_args[0].def.str = "snapshot";
commands[46].required_opt_args[1].opt = size_ARG;
commands[46].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[46].required_pos_args[0].pos = 1;
commands[46].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[46].optional_opt_args[0].opt = commandprofile_ARG;
commands[46].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[46].optional_opt_args[1].opt = config_ARG;
commands[46].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[46].optional_opt_args[2].opt = debug_ARG;
commands[46].optional_opt_args[3].opt = driverloaded_ARG;
commands[46].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[46].optional_opt_args[4].opt = help_ARG;
commands[46].optional_opt_args[5].opt = profile_ARG;
commands[46].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[46].optional_opt_args[6].opt = quiet_ARG;
commands[46].optional_opt_args[7].opt = verbose_ARG;
commands[46].optional_opt_args[8].opt = version_ARG;
commands[46].optional_opt_args[9].opt = yes_ARG;
commands[46].optional_opt_args[10].opt = snapshot_ARG;
commands[46].optional_opt_args[11].opt = addtag_ARG;
commands[46].optional_opt_args[11].def.val_bits = val_enum_to_bit(tag_VAL);
commands[46].optional_opt_args[12].opt = alloc_ARG;
commands[46].optional_opt_args[12].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[46].optional_opt_args[13].opt = autobackup_ARG;
commands[46].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[46].optional_opt_args[14].opt = activate_ARG;
commands[46].optional_opt_args[14].def.val_bits = val_enum_to_bit(activation_VAL);
commands[46].optional_opt_args[15].opt = contiguous_ARG;
commands[46].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[46].optional_opt_args[16].opt = ignoreactivationskip_ARG;
commands[46].optional_opt_args[17].opt = ignoremonitoring_ARG;
commands[46].optional_opt_args[18].opt = major_ARG;
commands[46].optional_opt_args[18].def.val_bits = val_enum_to_bit(number_VAL);
commands[46].optional_opt_args[19].opt = metadataprofile_ARG;
commands[46].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);
commands[46].optional_opt_args[20].opt = minor_ARG;
commands[46].optional_opt_args[20].def.val_bits = val_enum_to_bit(number_VAL);
commands[46].optional_opt_args[21].opt = monitor_ARG;
commands[46].optional_opt_args[21].def.val_bits = val_enum_to_bit(bool_VAL);
commands[46].optional_opt_args[22].opt = name_ARG;
commands[46].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[46].optional_opt_args[23].opt = nosync_ARG;
commands[46].optional_opt_args[24].opt = noudevsync_ARG;
commands[46].optional_opt_args[25].opt = permission_ARG;
commands[46].optional_opt_args[25].def.val_bits = val_enum_to_bit(permission_VAL);
commands[46].optional_opt_args[26].opt = persistent_ARG;
commands[46].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[46].optional_opt_args[27].opt = readahead_ARG;
commands[46].optional_opt_args[27].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[46].optional_opt_args[28].opt = reportformat_ARG;
commands[46].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[46].optional_opt_args[29].opt = setactivationskip_ARG;
commands[46].optional_opt_args[29].def.val_bits = val_enum_to_bit(bool_VAL);
commands[46].optional_opt_args[30].opt = test_ARG;
commands[46].optional_opt_args[31].opt = wipesignatures_ARG;
commands[46].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[46].optional_opt_args[32].opt = zero_ARG;
commands[46].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[46].optional_pos_args[0].pos = 2;
commands[46].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[46].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[47].name = "lvcreate";
commands[47].command_line_id = "lvcreate_cow_snapshot";
commands[47].command_line_enum = lvcreate_cow_snapshot_CMD;
commands[47].fn = lvcreate;
commands[47].ro_count = 2;
commands[47].rp_count = 1;
commands[47].oo_count = 33;
commands[47].op_count = 1;
commands[47].desc = "DESC: Create a COW snapshot LV from an origin LV  DESC: (infers --type snapshot).";
commands[47].usage = "lvcreate --snapshot --size Number[m|unit] LV"
" [ --type snapshot, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[47].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[47].required_opt_args[0].opt = snapshot_ARG;
commands[47].required_opt_args[1].opt = size_ARG;
commands[47].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[47].required_pos_args[0].pos = 1;
commands[47].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[47].optional_opt_args[0].opt = commandprofile_ARG;
commands[47].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[47].optional_opt_args[1].opt = config_ARG;
commands[47].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[47].optional_opt_args[2].opt = debug_ARG;
commands[47].optional_opt_args[3].opt = driverloaded_ARG;
commands[47].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[47].optional_opt_args[4].opt = help_ARG;
commands[47].optional_opt_args[5].opt = profile_ARG;
commands[47].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[47].optional_opt_args[6].opt = quiet_ARG;
commands[47].optional_opt_args[7].opt = verbose_ARG;
commands[47].optional_opt_args[8].opt = version_ARG;
commands[47].optional_opt_args[9].opt = yes_ARG;
commands[47].optional_opt_args[10].opt = type_ARG;
commands[47].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[47].optional_opt_args[10].def.str = "snapshot";
commands[47].optional_opt_args[11].opt = addtag_ARG;
commands[47].optional_opt_args[11].def.val_bits = val_enum_to_bit(tag_VAL);
commands[47].optional_opt_args[12].opt = alloc_ARG;
commands[47].optional_opt_args[12].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[47].optional_opt_args[13].opt = autobackup_ARG;
commands[47].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[47].optional_opt_args[14].opt = activate_ARG;
commands[47].optional_opt_args[14].def.val_bits = val_enum_to_bit(activation_VAL);
commands[47].optional_opt_args[15].opt = contiguous_ARG;
commands[47].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[47].optional_opt_args[16].opt = ignoreactivationskip_ARG;
commands[47].optional_opt_args[17].opt = ignoremonitoring_ARG;
commands[47].optional_opt_args[18].opt = major_ARG;
commands[47].optional_opt_args[18].def.val_bits = val_enum_to_bit(number_VAL);
commands[47].optional_opt_args[19].opt = metadataprofile_ARG;
commands[47].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);
commands[47].optional_opt_args[20].opt = minor_ARG;
commands[47].optional_opt_args[20].def.val_bits = val_enum_to_bit(number_VAL);
commands[47].optional_opt_args[21].opt = monitor_ARG;
commands[47].optional_opt_args[21].def.val_bits = val_enum_to_bit(bool_VAL);
commands[47].optional_opt_args[22].opt = name_ARG;
commands[47].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[47].optional_opt_args[23].opt = nosync_ARG;
commands[47].optional_opt_args[24].opt = noudevsync_ARG;
commands[47].optional_opt_args[25].opt = permission_ARG;
commands[47].optional_opt_args[25].def.val_bits = val_enum_to_bit(permission_VAL);
commands[47].optional_opt_args[26].opt = persistent_ARG;
commands[47].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[47].optional_opt_args[27].opt = readahead_ARG;
commands[47].optional_opt_args[27].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[47].optional_opt_args[28].opt = reportformat_ARG;
commands[47].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[47].optional_opt_args[29].opt = setactivationskip_ARG;
commands[47].optional_opt_args[29].def.val_bits = val_enum_to_bit(bool_VAL);
commands[47].optional_opt_args[30].opt = test_ARG;
commands[47].optional_opt_args[31].opt = wipesignatures_ARG;
commands[47].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[47].optional_opt_args[32].opt = zero_ARG;
commands[47].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[47].optional_pos_args[0].pos = 2;
commands[47].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[47].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[48].name = "lvcreate";
commands[48].command_line_id = "lvcreate_cow_snapshot_with_virtual_origin";
commands[48].command_line_enum = lvcreate_cow_snapshot_with_virtual_origin_CMD;
commands[48].fn = lvcreate;
commands[48].ro_count = 3;
commands[48].rp_count = 1;
commands[48].oo_count = 34;
commands[48].op_count = 1;
commands[48].desc = "DESC: Create a sparse COW snapshot LV of a virtual origin LV.";
commands[48].usage = "lvcreate --type snapshot --size Number[m|unit] --virtualsize Number[m|unit] VG"
" [ --snapshot, --virtualoriginsize Number[m|unit], --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[48].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[48].required_opt_args[0].opt = type_ARG;
commands[48].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[48].required_opt_args[0].def.str = "snapshot";
commands[48].required_opt_args[1].opt = size_ARG;
commands[48].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[48].required_opt_args[2].opt = virtualsize_ARG;
commands[48].required_opt_args[2].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[48].required_pos_args[0].pos = 1;
commands[48].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[48].optional_opt_args[0].opt = commandprofile_ARG;
commands[48].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[48].optional_opt_args[1].opt = config_ARG;
commands[48].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[48].optional_opt_args[2].opt = debug_ARG;
commands[48].optional_opt_args[3].opt = driverloaded_ARG;
commands[48].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[48].optional_opt_args[4].opt = help_ARG;
commands[48].optional_opt_args[5].opt = profile_ARG;
commands[48].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[48].optional_opt_args[6].opt = quiet_ARG;
commands[48].optional_opt_args[7].opt = verbose_ARG;
commands[48].optional_opt_args[8].opt = version_ARG;
commands[48].optional_opt_args[9].opt = yes_ARG;
commands[48].optional_opt_args[10].opt = snapshot_ARG;
commands[48].optional_opt_args[11].opt = virtualoriginsize_ARG;
commands[48].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[48].optional_opt_args[12].opt = addtag_ARG;
commands[48].optional_opt_args[12].def.val_bits = val_enum_to_bit(tag_VAL);
commands[48].optional_opt_args[13].opt = alloc_ARG;
commands[48].optional_opt_args[13].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[48].optional_opt_args[14].opt = autobackup_ARG;
commands[48].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[48].optional_opt_args[15].opt = activate_ARG;
commands[48].optional_opt_args[15].def.val_bits = val_enum_to_bit(activation_VAL);
commands[48].optional_opt_args[16].opt = contiguous_ARG;
commands[48].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[48].optional_opt_args[17].opt = ignoreactivationskip_ARG;
commands[48].optional_opt_args[18].opt = ignoremonitoring_ARG;
commands[48].optional_opt_args[19].opt = major_ARG;
commands[48].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[48].optional_opt_args[20].opt = metadataprofile_ARG;
commands[48].optional_opt_args[20].def.val_bits = val_enum_to_bit(string_VAL);
commands[48].optional_opt_args[21].opt = minor_ARG;
commands[48].optional_opt_args[21].def.val_bits = val_enum_to_bit(number_VAL);
commands[48].optional_opt_args[22].opt = monitor_ARG;
commands[48].optional_opt_args[22].def.val_bits = val_enum_to_bit(bool_VAL);
commands[48].optional_opt_args[23].opt = name_ARG;
commands[48].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[48].optional_opt_args[24].opt = nosync_ARG;
commands[48].optional_opt_args[25].opt = noudevsync_ARG;
commands[48].optional_opt_args[26].opt = permission_ARG;
commands[48].optional_opt_args[26].def.val_bits = val_enum_to_bit(permission_VAL);
commands[48].optional_opt_args[27].opt = persistent_ARG;
commands[48].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[48].optional_opt_args[28].opt = readahead_ARG;
commands[48].optional_opt_args[28].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[48].optional_opt_args[29].opt = reportformat_ARG;
commands[48].optional_opt_args[29].def.val_bits = val_enum_to_bit(string_VAL);
commands[48].optional_opt_args[30].opt = setactivationskip_ARG;
commands[48].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[48].optional_opt_args[31].opt = test_ARG;
commands[48].optional_opt_args[32].opt = wipesignatures_ARG;
commands[48].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[48].optional_opt_args[33].opt = zero_ARG;
commands[48].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[48].optional_pos_args[0].pos = 2;
commands[48].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[48].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[49].name = "lvcreate";
commands[49].command_line_id = "lvcreate_thinpool";
commands[49].command_line_enum = lvcreate_thinpool_CMD;
commands[49].fn = lvcreate;
commands[49].ro_count = 2;
commands[49].rp_count = 1;
commands[49].oo_count = 37;
commands[49].op_count = 1;
commands[49].desc = "DESC: Create a thin pool.";
commands[49].usage = "lvcreate --type thin-pool --size Number[m|unit] VG"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[49].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[49].required_opt_args[0].opt = type_ARG;
commands[49].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[49].required_opt_args[0].def.str = "thin-pool";
commands[49].required_opt_args[1].opt = size_ARG;
commands[49].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[49].required_pos_args[0].pos = 1;
commands[49].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[49].optional_opt_args[0].opt = commandprofile_ARG;
commands[49].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[49].optional_opt_args[1].opt = config_ARG;
commands[49].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[49].optional_opt_args[2].opt = debug_ARG;
commands[49].optional_opt_args[3].opt = driverloaded_ARG;
commands[49].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[4].opt = help_ARG;
commands[49].optional_opt_args[5].opt = profile_ARG;
commands[49].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[49].optional_opt_args[6].opt = quiet_ARG;
commands[49].optional_opt_args[7].opt = verbose_ARG;
commands[49].optional_opt_args[8].opt = version_ARG;
commands[49].optional_opt_args[9].opt = yes_ARG;
commands[49].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[49].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[49].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[49].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[12].opt = chunksize_ARG;
commands[49].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[49].optional_opt_args[13].opt = discards_ARG;
commands[49].optional_opt_args[13].def.val_bits = val_enum_to_bit(discards_VAL);
commands[49].optional_opt_args[14].opt = errorwhenfull_ARG;
commands[49].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[15].opt = addtag_ARG;
commands[49].optional_opt_args[15].def.val_bits = val_enum_to_bit(tag_VAL);
commands[49].optional_opt_args[16].opt = alloc_ARG;
commands[49].optional_opt_args[16].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[49].optional_opt_args[17].opt = autobackup_ARG;
commands[49].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[18].opt = activate_ARG;
commands[49].optional_opt_args[18].def.val_bits = val_enum_to_bit(activation_VAL);
commands[49].optional_opt_args[19].opt = contiguous_ARG;
commands[49].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[20].opt = ignoreactivationskip_ARG;
commands[49].optional_opt_args[21].opt = ignoremonitoring_ARG;
commands[49].optional_opt_args[22].opt = major_ARG;
commands[49].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[49].optional_opt_args[23].opt = metadataprofile_ARG;
commands[49].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[49].optional_opt_args[24].opt = minor_ARG;
commands[49].optional_opt_args[24].def.val_bits = val_enum_to_bit(number_VAL);
commands[49].optional_opt_args[25].opt = monitor_ARG;
commands[49].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[26].opt = name_ARG;
commands[49].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[49].optional_opt_args[27].opt = nosync_ARG;
commands[49].optional_opt_args[28].opt = noudevsync_ARG;
commands[49].optional_opt_args[29].opt = permission_ARG;
commands[49].optional_opt_args[29].def.val_bits = val_enum_to_bit(permission_VAL);
commands[49].optional_opt_args[30].opt = persistent_ARG;
commands[49].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[31].opt = readahead_ARG;
commands[49].optional_opt_args[31].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[49].optional_opt_args[32].opt = reportformat_ARG;
commands[49].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[49].optional_opt_args[33].opt = setactivationskip_ARG;
commands[49].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[34].opt = test_ARG;
commands[49].optional_opt_args[35].opt = wipesignatures_ARG;
commands[49].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_opt_args[36].opt = zero_ARG;
commands[49].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[49].optional_pos_args[0].pos = 2;
commands[49].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[49].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[50].name = "lvcreate";
commands[50].command_line_id = "lvcreate_thinpool";
commands[50].command_line_enum = lvcreate_thinpool_CMD;
commands[50].fn = lvcreate;
commands[50].ro_count = 2;
commands[50].rp_count = 1;
commands[50].oo_count = 38;
commands[50].op_count = 1;
commands[50].desc = "DESC: Create a thin pool (variant, infers --type thin-pool).";
commands[50].usage = "lvcreate --thin --size Number[m|unit] VG"
" [ --type thin-pool, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[50].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[50].required_opt_args[0].opt = thin_ARG;
commands[50].required_opt_args[1].opt = size_ARG;
commands[50].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[50].required_pos_args[0].pos = 1;
commands[50].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[50].optional_opt_args[0].opt = commandprofile_ARG;
commands[50].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[50].optional_opt_args[1].opt = config_ARG;
commands[50].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[50].optional_opt_args[2].opt = debug_ARG;
commands[50].optional_opt_args[3].opt = driverloaded_ARG;
commands[50].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[4].opt = help_ARG;
commands[50].optional_opt_args[5].opt = profile_ARG;
commands[50].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[50].optional_opt_args[6].opt = quiet_ARG;
commands[50].optional_opt_args[7].opt = verbose_ARG;
commands[50].optional_opt_args[8].opt = version_ARG;
commands[50].optional_opt_args[9].opt = yes_ARG;
commands[50].optional_opt_args[10].opt = type_ARG;
commands[50].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[50].optional_opt_args[10].def.str = "thin-pool";
commands[50].optional_opt_args[11].opt = poolmetadatasize_ARG;
commands[50].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[50].optional_opt_args[12].opt = poolmetadataspare_ARG;
commands[50].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[13].opt = chunksize_ARG;
commands[50].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[50].optional_opt_args[14].opt = discards_ARG;
commands[50].optional_opt_args[14].def.val_bits = val_enum_to_bit(discards_VAL);
commands[50].optional_opt_args[15].opt = errorwhenfull_ARG;
commands[50].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[16].opt = addtag_ARG;
commands[50].optional_opt_args[16].def.val_bits = val_enum_to_bit(tag_VAL);
commands[50].optional_opt_args[17].opt = alloc_ARG;
commands[50].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[50].optional_opt_args[18].opt = autobackup_ARG;
commands[50].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[19].opt = activate_ARG;
commands[50].optional_opt_args[19].def.val_bits = val_enum_to_bit(activation_VAL);
commands[50].optional_opt_args[20].opt = contiguous_ARG;
commands[50].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[21].opt = ignoreactivationskip_ARG;
commands[50].optional_opt_args[22].opt = ignoremonitoring_ARG;
commands[50].optional_opt_args[23].opt = major_ARG;
commands[50].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[50].optional_opt_args[24].opt = metadataprofile_ARG;
commands[50].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[50].optional_opt_args[25].opt = minor_ARG;
commands[50].optional_opt_args[25].def.val_bits = val_enum_to_bit(number_VAL);
commands[50].optional_opt_args[26].opt = monitor_ARG;
commands[50].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[27].opt = name_ARG;
commands[50].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[50].optional_opt_args[28].opt = nosync_ARG;
commands[50].optional_opt_args[29].opt = noudevsync_ARG;
commands[50].optional_opt_args[30].opt = permission_ARG;
commands[50].optional_opt_args[30].def.val_bits = val_enum_to_bit(permission_VAL);
commands[50].optional_opt_args[31].opt = persistent_ARG;
commands[50].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[32].opt = readahead_ARG;
commands[50].optional_opt_args[32].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[50].optional_opt_args[33].opt = reportformat_ARG;
commands[50].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);
commands[50].optional_opt_args[34].opt = setactivationskip_ARG;
commands[50].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[35].opt = test_ARG;
commands[50].optional_opt_args[36].opt = wipesignatures_ARG;
commands[50].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_opt_args[37].opt = zero_ARG;
commands[50].optional_opt_args[37].def.val_bits = val_enum_to_bit(bool_VAL);
commands[50].optional_pos_args[0].pos = 2;
commands[50].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[50].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[51].name = "lvcreate";
commands[51].command_line_id = "lvcreate_cachepool";
commands[51].command_line_enum = lvcreate_cachepool_CMD;
commands[51].fn = lvcreate;
commands[51].ro_count = 2;
commands[51].rp_count = 1;
commands[51].oo_count = 38;
commands[51].op_count = 1;
commands[51].desc = "DESC: Create a cache pool.";
commands[51].usage = "lvcreate --type cache-pool --size Number[m|unit] VG"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --cachemode writethrough|writeback, --cachepolicy String, --cachesettings String, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[51].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[51].required_opt_args[0].opt = type_ARG;
commands[51].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[51].required_opt_args[0].def.str = "cache-pool";
commands[51].required_opt_args[1].opt = size_ARG;
commands[51].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[51].required_pos_args[0].pos = 1;
commands[51].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[51].optional_opt_args[0].opt = commandprofile_ARG;
commands[51].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[51].optional_opt_args[1].opt = config_ARG;
commands[51].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[51].optional_opt_args[2].opt = debug_ARG;
commands[51].optional_opt_args[3].opt = driverloaded_ARG;
commands[51].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_opt_args[4].opt = help_ARG;
commands[51].optional_opt_args[5].opt = profile_ARG;
commands[51].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[51].optional_opt_args[6].opt = quiet_ARG;
commands[51].optional_opt_args[7].opt = verbose_ARG;
commands[51].optional_opt_args[8].opt = version_ARG;
commands[51].optional_opt_args[9].opt = yes_ARG;
commands[51].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[51].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[51].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[51].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_opt_args[12].opt = chunksize_ARG;
commands[51].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[51].optional_opt_args[13].opt = cachemode_ARG;
commands[51].optional_opt_args[13].def.val_bits = val_enum_to_bit(cachemode_VAL);
commands[51].optional_opt_args[14].opt = cachepolicy_ARG;
commands[51].optional_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[51].optional_opt_args[15].opt = cachesettings_ARG;
commands[51].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[51].optional_opt_args[16].opt = addtag_ARG;
commands[51].optional_opt_args[16].def.val_bits = val_enum_to_bit(tag_VAL);
commands[51].optional_opt_args[17].opt = alloc_ARG;
commands[51].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[51].optional_opt_args[18].opt = autobackup_ARG;
commands[51].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_opt_args[19].opt = activate_ARG;
commands[51].optional_opt_args[19].def.val_bits = val_enum_to_bit(activation_VAL);
commands[51].optional_opt_args[20].opt = contiguous_ARG;
commands[51].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_opt_args[21].opt = ignoreactivationskip_ARG;
commands[51].optional_opt_args[22].opt = ignoremonitoring_ARG;
commands[51].optional_opt_args[23].opt = major_ARG;
commands[51].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[51].optional_opt_args[24].opt = metadataprofile_ARG;
commands[51].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[51].optional_opt_args[25].opt = minor_ARG;
commands[51].optional_opt_args[25].def.val_bits = val_enum_to_bit(number_VAL);
commands[51].optional_opt_args[26].opt = monitor_ARG;
commands[51].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_opt_args[27].opt = name_ARG;
commands[51].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[51].optional_opt_args[28].opt = nosync_ARG;
commands[51].optional_opt_args[29].opt = noudevsync_ARG;
commands[51].optional_opt_args[30].opt = permission_ARG;
commands[51].optional_opt_args[30].def.val_bits = val_enum_to_bit(permission_VAL);
commands[51].optional_opt_args[31].opt = persistent_ARG;
commands[51].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_opt_args[32].opt = readahead_ARG;
commands[51].optional_opt_args[32].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[51].optional_opt_args[33].opt = reportformat_ARG;
commands[51].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);
commands[51].optional_opt_args[34].opt = setactivationskip_ARG;
commands[51].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_opt_args[35].opt = test_ARG;
commands[51].optional_opt_args[36].opt = wipesignatures_ARG;
commands[51].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_opt_args[37].opt = zero_ARG;
commands[51].optional_opt_args[37].def.val_bits = val_enum_to_bit(bool_VAL);
commands[51].optional_pos_args[0].pos = 2;
commands[51].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[51].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[52].name = "lvcreate";
commands[52].command_line_id = "lvcreate_cachepool";
commands[52].command_line_enum = lvcreate_cachepool_CMD;
commands[52].fn = lvcreate;
commands[52].ro_count = 2;
commands[52].rp_count = 1;
commands[52].oo_count = 39;
commands[52].op_count = 1;
commands[52].desc = "DESC: Create a cache pool (variant, infers --type cache-pool).";
commands[52].usage = "lvcreate --cache --size Number[m|unit] VG"
" [ --type cache-pool, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --cachemode writethrough|writeback, --cachepolicy String, --cachesettings String, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[52].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[52].required_opt_args[0].opt = cache_ARG;
commands[52].required_opt_args[1].opt = size_ARG;
commands[52].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[52].required_pos_args[0].pos = 1;
commands[52].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[52].optional_opt_args[0].opt = commandprofile_ARG;
commands[52].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[52].optional_opt_args[1].opt = config_ARG;
commands[52].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[52].optional_opt_args[2].opt = debug_ARG;
commands[52].optional_opt_args[3].opt = driverloaded_ARG;
commands[52].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_opt_args[4].opt = help_ARG;
commands[52].optional_opt_args[5].opt = profile_ARG;
commands[52].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[52].optional_opt_args[6].opt = quiet_ARG;
commands[52].optional_opt_args[7].opt = verbose_ARG;
commands[52].optional_opt_args[8].opt = version_ARG;
commands[52].optional_opt_args[9].opt = yes_ARG;
commands[52].optional_opt_args[10].opt = type_ARG;
commands[52].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[52].optional_opt_args[10].def.str = "cache-pool";
commands[52].optional_opt_args[11].opt = poolmetadatasize_ARG;
commands[52].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[52].optional_opt_args[12].opt = poolmetadataspare_ARG;
commands[52].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_opt_args[13].opt = chunksize_ARG;
commands[52].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[52].optional_opt_args[14].opt = cachemode_ARG;
commands[52].optional_opt_args[14].def.val_bits = val_enum_to_bit(cachemode_VAL);
commands[52].optional_opt_args[15].opt = cachepolicy_ARG;
commands[52].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[52].optional_opt_args[16].opt = cachesettings_ARG;
commands[52].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[52].optional_opt_args[17].opt = addtag_ARG;
commands[52].optional_opt_args[17].def.val_bits = val_enum_to_bit(tag_VAL);
commands[52].optional_opt_args[18].opt = alloc_ARG;
commands[52].optional_opt_args[18].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[52].optional_opt_args[19].opt = autobackup_ARG;
commands[52].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_opt_args[20].opt = activate_ARG;
commands[52].optional_opt_args[20].def.val_bits = val_enum_to_bit(activation_VAL);
commands[52].optional_opt_args[21].opt = contiguous_ARG;
commands[52].optional_opt_args[21].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_opt_args[22].opt = ignoreactivationskip_ARG;
commands[52].optional_opt_args[23].opt = ignoremonitoring_ARG;
commands[52].optional_opt_args[24].opt = major_ARG;
commands[52].optional_opt_args[24].def.val_bits = val_enum_to_bit(number_VAL);
commands[52].optional_opt_args[25].opt = metadataprofile_ARG;
commands[52].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[52].optional_opt_args[26].opt = minor_ARG;
commands[52].optional_opt_args[26].def.val_bits = val_enum_to_bit(number_VAL);
commands[52].optional_opt_args[27].opt = monitor_ARG;
commands[52].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_opt_args[28].opt = name_ARG;
commands[52].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[52].optional_opt_args[29].opt = nosync_ARG;
commands[52].optional_opt_args[30].opt = noudevsync_ARG;
commands[52].optional_opt_args[31].opt = permission_ARG;
commands[52].optional_opt_args[31].def.val_bits = val_enum_to_bit(permission_VAL);
commands[52].optional_opt_args[32].opt = persistent_ARG;
commands[52].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_opt_args[33].opt = readahead_ARG;
commands[52].optional_opt_args[33].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[52].optional_opt_args[34].opt = reportformat_ARG;
commands[52].optional_opt_args[34].def.val_bits = val_enum_to_bit(string_VAL);
commands[52].optional_opt_args[35].opt = setactivationskip_ARG;
commands[52].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_opt_args[36].opt = test_ARG;
commands[52].optional_opt_args[37].opt = wipesignatures_ARG;
commands[52].optional_opt_args[37].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_opt_args[38].opt = zero_ARG;
commands[52].optional_opt_args[38].def.val_bits = val_enum_to_bit(bool_VAL);
commands[52].optional_pos_args[0].pos = 2;
commands[52].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[52].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[53].name = "lvcreate";
commands[53].command_line_id = "lvcreate_thin_vol";
commands[53].command_line_enum = lvcreate_thin_vol_CMD;
commands[53].fn = lvcreate;
commands[53].ro_count = 3;
commands[53].rp_count = 0;
commands[53].oo_count = 37;
commands[53].op_count = 0;
commands[53].desc = "DESC: Create a thin LV in a thin pool.";
commands[53].usage = "lvcreate --type thin --virtualsize Number[m|unit] --thinpool LV_thinpool"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]";
commands[53].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[53].required_opt_args[0].opt = type_ARG;
commands[53].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[53].required_opt_args[0].def.str = "thin";
commands[53].required_opt_args[1].opt = virtualsize_ARG;
commands[53].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[53].required_opt_args[2].opt = thinpool_ARG;
commands[53].required_opt_args[2].def.val_bits = val_enum_to_bit(lv_VAL);
commands[53].required_opt_args[2].def.lv_types = ARG_DEF_LV_THINPOOL;
commands[53].optional_opt_args[0].opt = commandprofile_ARG;
commands[53].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[53].optional_opt_args[1].opt = config_ARG;
commands[53].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[53].optional_opt_args[2].opt = debug_ARG;
commands[53].optional_opt_args[3].opt = driverloaded_ARG;
commands[53].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[4].opt = help_ARG;
commands[53].optional_opt_args[5].opt = profile_ARG;
commands[53].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[53].optional_opt_args[6].opt = quiet_ARG;
commands[53].optional_opt_args[7].opt = verbose_ARG;
commands[53].optional_opt_args[8].opt = version_ARG;
commands[53].optional_opt_args[9].opt = yes_ARG;
commands[53].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[53].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[53].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[53].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[12].opt = chunksize_ARG;
commands[53].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[53].optional_opt_args[13].opt = discards_ARG;
commands[53].optional_opt_args[13].def.val_bits = val_enum_to_bit(discards_VAL);
commands[53].optional_opt_args[14].opt = errorwhenfull_ARG;
commands[53].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[15].opt = addtag_ARG;
commands[53].optional_opt_args[15].def.val_bits = val_enum_to_bit(tag_VAL);
commands[53].optional_opt_args[16].opt = alloc_ARG;
commands[53].optional_opt_args[16].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[53].optional_opt_args[17].opt = autobackup_ARG;
commands[53].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[18].opt = activate_ARG;
commands[53].optional_opt_args[18].def.val_bits = val_enum_to_bit(activation_VAL);
commands[53].optional_opt_args[19].opt = contiguous_ARG;
commands[53].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[20].opt = ignoreactivationskip_ARG;
commands[53].optional_opt_args[21].opt = ignoremonitoring_ARG;
commands[53].optional_opt_args[22].opt = major_ARG;
commands[53].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[53].optional_opt_args[23].opt = metadataprofile_ARG;
commands[53].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[53].optional_opt_args[24].opt = minor_ARG;
commands[53].optional_opt_args[24].def.val_bits = val_enum_to_bit(number_VAL);
commands[53].optional_opt_args[25].opt = monitor_ARG;
commands[53].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[26].opt = name_ARG;
commands[53].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[53].optional_opt_args[27].opt = nosync_ARG;
commands[53].optional_opt_args[28].opt = noudevsync_ARG;
commands[53].optional_opt_args[29].opt = permission_ARG;
commands[53].optional_opt_args[29].def.val_bits = val_enum_to_bit(permission_VAL);
commands[53].optional_opt_args[30].opt = persistent_ARG;
commands[53].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[31].opt = readahead_ARG;
commands[53].optional_opt_args[31].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[53].optional_opt_args[32].opt = reportformat_ARG;
commands[53].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[53].optional_opt_args[33].opt = setactivationskip_ARG;
commands[53].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[34].opt = test_ARG;
commands[53].optional_opt_args[35].opt = wipesignatures_ARG;
commands[53].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[53].optional_opt_args[36].opt = zero_ARG;
commands[53].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);

commands[54].name = "lvcreate";
commands[54].command_line_id = "lvcreate_thin_vol";
commands[54].command_line_enum = lvcreate_thin_vol_CMD;
commands[54].fn = lvcreate;
commands[54].ro_count = 2;
commands[54].rp_count = 0;
commands[54].oo_count = 35;
commands[54].op_count = 0;
commands[54].desc = "DESC: Create a thin LV in a thin pool (variant, infers --type thin).";
commands[54].usage = "lvcreate --virtualsize Number[m|unit] --thinpool LV_thinpool"
" [ --type thin, --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]";
commands[54].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[54].required_opt_args[0].opt = virtualsize_ARG;
commands[54].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[54].required_opt_args[1].opt = thinpool_ARG;
commands[54].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[54].required_opt_args[1].def.lv_types = ARG_DEF_LV_THINPOOL;
commands[54].optional_opt_args[0].opt = commandprofile_ARG;
commands[54].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[54].optional_opt_args[1].opt = config_ARG;
commands[54].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[54].optional_opt_args[2].opt = debug_ARG;
commands[54].optional_opt_args[3].opt = driverloaded_ARG;
commands[54].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[54].optional_opt_args[4].opt = help_ARG;
commands[54].optional_opt_args[5].opt = profile_ARG;
commands[54].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[54].optional_opt_args[6].opt = quiet_ARG;
commands[54].optional_opt_args[7].opt = verbose_ARG;
commands[54].optional_opt_args[8].opt = version_ARG;
commands[54].optional_opt_args[9].opt = yes_ARG;
commands[54].optional_opt_args[10].opt = type_ARG;
commands[54].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[54].optional_opt_args[10].def.str = "thin";
commands[54].optional_opt_args[11].opt = discards_ARG;
commands[54].optional_opt_args[11].def.val_bits = val_enum_to_bit(discards_VAL);
commands[54].optional_opt_args[12].opt = errorwhenfull_ARG;
commands[54].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[54].optional_opt_args[13].opt = addtag_ARG;
commands[54].optional_opt_args[13].def.val_bits = val_enum_to_bit(tag_VAL);
commands[54].optional_opt_args[14].opt = alloc_ARG;
commands[54].optional_opt_args[14].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[54].optional_opt_args[15].opt = autobackup_ARG;
commands[54].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[54].optional_opt_args[16].opt = activate_ARG;
commands[54].optional_opt_args[16].def.val_bits = val_enum_to_bit(activation_VAL);
commands[54].optional_opt_args[17].opt = contiguous_ARG;
commands[54].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[54].optional_opt_args[18].opt = ignoreactivationskip_ARG;
commands[54].optional_opt_args[19].opt = ignoremonitoring_ARG;
commands[54].optional_opt_args[20].opt = major_ARG;
commands[54].optional_opt_args[20].def.val_bits = val_enum_to_bit(number_VAL);
commands[54].optional_opt_args[21].opt = metadataprofile_ARG;
commands[54].optional_opt_args[21].def.val_bits = val_enum_to_bit(string_VAL);
commands[54].optional_opt_args[22].opt = minor_ARG;
commands[54].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[54].optional_opt_args[23].opt = monitor_ARG;
commands[54].optional_opt_args[23].def.val_bits = val_enum_to_bit(bool_VAL);
commands[54].optional_opt_args[24].opt = name_ARG;
commands[54].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[54].optional_opt_args[25].opt = nosync_ARG;
commands[54].optional_opt_args[26].opt = noudevsync_ARG;
commands[54].optional_opt_args[27].opt = permission_ARG;
commands[54].optional_opt_args[27].def.val_bits = val_enum_to_bit(permission_VAL);
commands[54].optional_opt_args[28].opt = persistent_ARG;
commands[54].optional_opt_args[28].def.val_bits = val_enum_to_bit(bool_VAL);
commands[54].optional_opt_args[29].opt = readahead_ARG;
commands[54].optional_opt_args[29].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[54].optional_opt_args[30].opt = reportformat_ARG;
commands[54].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[54].optional_opt_args[31].opt = setactivationskip_ARG;
commands[54].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[54].optional_opt_args[32].opt = test_ARG;
commands[54].optional_opt_args[33].opt = wipesignatures_ARG;
commands[54].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[54].optional_opt_args[34].opt = zero_ARG;
commands[54].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);

commands[55].name = "lvcreate";
commands[55].command_line_id = "lvcreate_thin_snapshot";
commands[55].command_line_enum = lvcreate_thin_snapshot_CMD;
commands[55].fn = lvcreate;
commands[55].ro_count = 1;
commands[55].rp_count = 1;
commands[55].oo_count = 34;
commands[55].op_count = 0;
commands[55].desc = "DESC: Create a thin LV that is a snapshot of an existing thin LV.";
commands[55].usage = "lvcreate --type thin LV_thin"
" [ --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]";
commands[55].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[55].required_opt_args[0].opt = type_ARG;
commands[55].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[55].required_opt_args[0].def.str = "thin";
commands[55].required_pos_args[0].pos = 1;
commands[55].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[55].required_pos_args[0].def.lv_types = ARG_DEF_LV_THIN;
commands[55].optional_opt_args[0].opt = commandprofile_ARG;
commands[55].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[55].optional_opt_args[1].opt = config_ARG;
commands[55].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[55].optional_opt_args[2].opt = debug_ARG;
commands[55].optional_opt_args[3].opt = driverloaded_ARG;
commands[55].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[55].optional_opt_args[4].opt = help_ARG;
commands[55].optional_opt_args[5].opt = profile_ARG;
commands[55].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[55].optional_opt_args[6].opt = quiet_ARG;
commands[55].optional_opt_args[7].opt = verbose_ARG;
commands[55].optional_opt_args[8].opt = version_ARG;
commands[55].optional_opt_args[9].opt = yes_ARG;
commands[55].optional_opt_args[10].opt = discards_ARG;
commands[55].optional_opt_args[10].def.val_bits = val_enum_to_bit(discards_VAL);
commands[55].optional_opt_args[11].opt = errorwhenfull_ARG;
commands[55].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[55].optional_opt_args[12].opt = addtag_ARG;
commands[55].optional_opt_args[12].def.val_bits = val_enum_to_bit(tag_VAL);
commands[55].optional_opt_args[13].opt = alloc_ARG;
commands[55].optional_opt_args[13].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[55].optional_opt_args[14].opt = autobackup_ARG;
commands[55].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[55].optional_opt_args[15].opt = activate_ARG;
commands[55].optional_opt_args[15].def.val_bits = val_enum_to_bit(activation_VAL);
commands[55].optional_opt_args[16].opt = contiguous_ARG;
commands[55].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[55].optional_opt_args[17].opt = ignoreactivationskip_ARG;
commands[55].optional_opt_args[18].opt = ignoremonitoring_ARG;
commands[55].optional_opt_args[19].opt = major_ARG;
commands[55].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[55].optional_opt_args[20].opt = metadataprofile_ARG;
commands[55].optional_opt_args[20].def.val_bits = val_enum_to_bit(string_VAL);
commands[55].optional_opt_args[21].opt = minor_ARG;
commands[55].optional_opt_args[21].def.val_bits = val_enum_to_bit(number_VAL);
commands[55].optional_opt_args[22].opt = monitor_ARG;
commands[55].optional_opt_args[22].def.val_bits = val_enum_to_bit(bool_VAL);
commands[55].optional_opt_args[23].opt = name_ARG;
commands[55].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[55].optional_opt_args[24].opt = nosync_ARG;
commands[55].optional_opt_args[25].opt = noudevsync_ARG;
commands[55].optional_opt_args[26].opt = permission_ARG;
commands[55].optional_opt_args[26].def.val_bits = val_enum_to_bit(permission_VAL);
commands[55].optional_opt_args[27].opt = persistent_ARG;
commands[55].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[55].optional_opt_args[28].opt = readahead_ARG;
commands[55].optional_opt_args[28].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[55].optional_opt_args[29].opt = reportformat_ARG;
commands[55].optional_opt_args[29].def.val_bits = val_enum_to_bit(string_VAL);
commands[55].optional_opt_args[30].opt = setactivationskip_ARG;
commands[55].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[55].optional_opt_args[31].opt = test_ARG;
commands[55].optional_opt_args[32].opt = wipesignatures_ARG;
commands[55].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[55].optional_opt_args[33].opt = zero_ARG;
commands[55].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);

commands[56].name = "lvcreate";
commands[56].command_line_id = "lvcreate_thin_snapshot";
commands[56].command_line_enum = lvcreate_thin_snapshot_CMD;
commands[56].fn = lvcreate;
commands[56].ro_count = 1;
commands[56].rp_count = 1;
commands[56].oo_count = 35;
commands[56].op_count = 0;
commands[56].desc = "DESC: Create a thin LV that is a snapshot of an existing thin LV  DESC: (infers --type thin).";
commands[56].usage = "lvcreate --snapshot LV_thin"
" [ --type thin, --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]";
commands[56].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[56].required_opt_args[0].opt = snapshot_ARG;
commands[56].required_pos_args[0].pos = 1;
commands[56].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[56].required_pos_args[0].def.lv_types = ARG_DEF_LV_THIN;
commands[56].optional_opt_args[0].opt = commandprofile_ARG;
commands[56].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[56].optional_opt_args[1].opt = config_ARG;
commands[56].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[56].optional_opt_args[2].opt = debug_ARG;
commands[56].optional_opt_args[3].opt = driverloaded_ARG;
commands[56].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[56].optional_opt_args[4].opt = help_ARG;
commands[56].optional_opt_args[5].opt = profile_ARG;
commands[56].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[56].optional_opt_args[6].opt = quiet_ARG;
commands[56].optional_opt_args[7].opt = verbose_ARG;
commands[56].optional_opt_args[8].opt = version_ARG;
commands[56].optional_opt_args[9].opt = yes_ARG;
commands[56].optional_opt_args[10].opt = type_ARG;
commands[56].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[56].optional_opt_args[10].def.str = "thin";
commands[56].optional_opt_args[11].opt = discards_ARG;
commands[56].optional_opt_args[11].def.val_bits = val_enum_to_bit(discards_VAL);
commands[56].optional_opt_args[12].opt = errorwhenfull_ARG;
commands[56].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[56].optional_opt_args[13].opt = addtag_ARG;
commands[56].optional_opt_args[13].def.val_bits = val_enum_to_bit(tag_VAL);
commands[56].optional_opt_args[14].opt = alloc_ARG;
commands[56].optional_opt_args[14].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[56].optional_opt_args[15].opt = autobackup_ARG;
commands[56].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[56].optional_opt_args[16].opt = activate_ARG;
commands[56].optional_opt_args[16].def.val_bits = val_enum_to_bit(activation_VAL);
commands[56].optional_opt_args[17].opt = contiguous_ARG;
commands[56].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[56].optional_opt_args[18].opt = ignoreactivationskip_ARG;
commands[56].optional_opt_args[19].opt = ignoremonitoring_ARG;
commands[56].optional_opt_args[20].opt = major_ARG;
commands[56].optional_opt_args[20].def.val_bits = val_enum_to_bit(number_VAL);
commands[56].optional_opt_args[21].opt = metadataprofile_ARG;
commands[56].optional_opt_args[21].def.val_bits = val_enum_to_bit(string_VAL);
commands[56].optional_opt_args[22].opt = minor_ARG;
commands[56].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[56].optional_opt_args[23].opt = monitor_ARG;
commands[56].optional_opt_args[23].def.val_bits = val_enum_to_bit(bool_VAL);
commands[56].optional_opt_args[24].opt = name_ARG;
commands[56].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[56].optional_opt_args[25].opt = nosync_ARG;
commands[56].optional_opt_args[26].opt = noudevsync_ARG;
commands[56].optional_opt_args[27].opt = permission_ARG;
commands[56].optional_opt_args[27].def.val_bits = val_enum_to_bit(permission_VAL);
commands[56].optional_opt_args[28].opt = persistent_ARG;
commands[56].optional_opt_args[28].def.val_bits = val_enum_to_bit(bool_VAL);
commands[56].optional_opt_args[29].opt = readahead_ARG;
commands[56].optional_opt_args[29].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[56].optional_opt_args[30].opt = reportformat_ARG;
commands[56].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[56].optional_opt_args[31].opt = setactivationskip_ARG;
commands[56].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[56].optional_opt_args[32].opt = test_ARG;
commands[56].optional_opt_args[33].opt = wipesignatures_ARG;
commands[56].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[56].optional_opt_args[34].opt = zero_ARG;
commands[56].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);

commands[57].name = "lvcreate";
commands[57].command_line_id = "lvcreate_thin_snapshot_of_external";
commands[57].command_line_enum = lvcreate_thin_snapshot_of_external_CMD;
commands[57].fn = lvcreate;
commands[57].ro_count = 2;
commands[57].rp_count = 1;
commands[57].oo_count = 37;
commands[57].op_count = 0;
commands[57].desc = "DESC: Create a thin LV that is a snapshot of an external origin LV.";
commands[57].usage = "lvcreate --type thin --thinpool LV_thinpool LV"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]";
commands[57].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[57].required_opt_args[0].opt = type_ARG;
commands[57].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[57].required_opt_args[0].def.str = "thin";
commands[57].required_opt_args[1].opt = thinpool_ARG;
commands[57].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[57].required_opt_args[1].def.lv_types = ARG_DEF_LV_THINPOOL;
commands[57].required_pos_args[0].pos = 1;
commands[57].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[57].optional_opt_args[0].opt = commandprofile_ARG;
commands[57].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[57].optional_opt_args[1].opt = config_ARG;
commands[57].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[57].optional_opt_args[2].opt = debug_ARG;
commands[57].optional_opt_args[3].opt = driverloaded_ARG;
commands[57].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[4].opt = help_ARG;
commands[57].optional_opt_args[5].opt = profile_ARG;
commands[57].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[57].optional_opt_args[6].opt = quiet_ARG;
commands[57].optional_opt_args[7].opt = verbose_ARG;
commands[57].optional_opt_args[8].opt = version_ARG;
commands[57].optional_opt_args[9].opt = yes_ARG;
commands[57].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[57].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[57].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[57].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[12].opt = chunksize_ARG;
commands[57].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[57].optional_opt_args[13].opt = discards_ARG;
commands[57].optional_opt_args[13].def.val_bits = val_enum_to_bit(discards_VAL);
commands[57].optional_opt_args[14].opt = errorwhenfull_ARG;
commands[57].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[15].opt = addtag_ARG;
commands[57].optional_opt_args[15].def.val_bits = val_enum_to_bit(tag_VAL);
commands[57].optional_opt_args[16].opt = alloc_ARG;
commands[57].optional_opt_args[16].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[57].optional_opt_args[17].opt = autobackup_ARG;
commands[57].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[18].opt = activate_ARG;
commands[57].optional_opt_args[18].def.val_bits = val_enum_to_bit(activation_VAL);
commands[57].optional_opt_args[19].opt = contiguous_ARG;
commands[57].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[20].opt = ignoreactivationskip_ARG;
commands[57].optional_opt_args[21].opt = ignoremonitoring_ARG;
commands[57].optional_opt_args[22].opt = major_ARG;
commands[57].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[57].optional_opt_args[23].opt = metadataprofile_ARG;
commands[57].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[57].optional_opt_args[24].opt = minor_ARG;
commands[57].optional_opt_args[24].def.val_bits = val_enum_to_bit(number_VAL);
commands[57].optional_opt_args[25].opt = monitor_ARG;
commands[57].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[26].opt = name_ARG;
commands[57].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[57].optional_opt_args[27].opt = nosync_ARG;
commands[57].optional_opt_args[28].opt = noudevsync_ARG;
commands[57].optional_opt_args[29].opt = permission_ARG;
commands[57].optional_opt_args[29].def.val_bits = val_enum_to_bit(permission_VAL);
commands[57].optional_opt_args[30].opt = persistent_ARG;
commands[57].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[31].opt = readahead_ARG;
commands[57].optional_opt_args[31].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[57].optional_opt_args[32].opt = reportformat_ARG;
commands[57].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[57].optional_opt_args[33].opt = setactivationskip_ARG;
commands[57].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[34].opt = test_ARG;
commands[57].optional_opt_args[35].opt = wipesignatures_ARG;
commands[57].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[57].optional_opt_args[36].opt = zero_ARG;
commands[57].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);

commands[58].name = "lvcreate";
commands[58].command_line_id = "lvcreate_thin_snapshot_of_external";
commands[58].command_line_enum = lvcreate_thin_snapshot_of_external_CMD;
commands[58].fn = lvcreate;
commands[58].ro_count = 2;
commands[58].rp_count = 1;
commands[58].oo_count = 35;
commands[58].op_count = 0;
commands[58].desc = "DESC: Create a thin LV that is a snapshot of an external origin LV  DESC: (infers --type thin).";
commands[58].usage = "lvcreate --snapshot --thinpool LV_thinpool LV"
" [ --type thin, --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]";
commands[58].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[58].required_opt_args[0].opt = snapshot_ARG;
commands[58].required_opt_args[1].opt = thinpool_ARG;
commands[58].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[58].required_opt_args[1].def.lv_types = ARG_DEF_LV_THINPOOL;
commands[58].required_pos_args[0].pos = 1;
commands[58].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[58].optional_opt_args[0].opt = commandprofile_ARG;
commands[58].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[58].optional_opt_args[1].opt = config_ARG;
commands[58].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[58].optional_opt_args[2].opt = debug_ARG;
commands[58].optional_opt_args[3].opt = driverloaded_ARG;
commands[58].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[58].optional_opt_args[4].opt = help_ARG;
commands[58].optional_opt_args[5].opt = profile_ARG;
commands[58].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[58].optional_opt_args[6].opt = quiet_ARG;
commands[58].optional_opt_args[7].opt = verbose_ARG;
commands[58].optional_opt_args[8].opt = version_ARG;
commands[58].optional_opt_args[9].opt = yes_ARG;
commands[58].optional_opt_args[10].opt = type_ARG;
commands[58].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[58].optional_opt_args[10].def.str = "thin";
commands[58].optional_opt_args[11].opt = discards_ARG;
commands[58].optional_opt_args[11].def.val_bits = val_enum_to_bit(discards_VAL);
commands[58].optional_opt_args[12].opt = errorwhenfull_ARG;
commands[58].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[58].optional_opt_args[13].opt = addtag_ARG;
commands[58].optional_opt_args[13].def.val_bits = val_enum_to_bit(tag_VAL);
commands[58].optional_opt_args[14].opt = alloc_ARG;
commands[58].optional_opt_args[14].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[58].optional_opt_args[15].opt = autobackup_ARG;
commands[58].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[58].optional_opt_args[16].opt = activate_ARG;
commands[58].optional_opt_args[16].def.val_bits = val_enum_to_bit(activation_VAL);
commands[58].optional_opt_args[17].opt = contiguous_ARG;
commands[58].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[58].optional_opt_args[18].opt = ignoreactivationskip_ARG;
commands[58].optional_opt_args[19].opt = ignoremonitoring_ARG;
commands[58].optional_opt_args[20].opt = major_ARG;
commands[58].optional_opt_args[20].def.val_bits = val_enum_to_bit(number_VAL);
commands[58].optional_opt_args[21].opt = metadataprofile_ARG;
commands[58].optional_opt_args[21].def.val_bits = val_enum_to_bit(string_VAL);
commands[58].optional_opt_args[22].opt = minor_ARG;
commands[58].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[58].optional_opt_args[23].opt = monitor_ARG;
commands[58].optional_opt_args[23].def.val_bits = val_enum_to_bit(bool_VAL);
commands[58].optional_opt_args[24].opt = name_ARG;
commands[58].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[58].optional_opt_args[25].opt = nosync_ARG;
commands[58].optional_opt_args[26].opt = noudevsync_ARG;
commands[58].optional_opt_args[27].opt = permission_ARG;
commands[58].optional_opt_args[27].def.val_bits = val_enum_to_bit(permission_VAL);
commands[58].optional_opt_args[28].opt = persistent_ARG;
commands[58].optional_opt_args[28].def.val_bits = val_enum_to_bit(bool_VAL);
commands[58].optional_opt_args[29].opt = readahead_ARG;
commands[58].optional_opt_args[29].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[58].optional_opt_args[30].opt = reportformat_ARG;
commands[58].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[58].optional_opt_args[31].opt = setactivationskip_ARG;
commands[58].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[58].optional_opt_args[32].opt = test_ARG;
commands[58].optional_opt_args[33].opt = wipesignatures_ARG;
commands[58].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[58].optional_opt_args[34].opt = zero_ARG;
commands[58].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);

commands[59].name = "lvcreate";
commands[59].command_line_id = "lvcreate_thin_vol_with_thinpool";
commands[59].command_line_enum = lvcreate_thin_vol_with_thinpool_CMD;
commands[59].fn = lvcreate;
commands[59].ro_count = 4;
commands[59].rp_count = 0;
commands[59].oo_count = 37;
commands[59].op_count = 1;
commands[59].desc = "DESC: Create a thin LV, first creating a thin pool for it,  DESC: where the new thin pool is named by the --thinpool arg.";
commands[59].usage = "lvcreate --type thin --virtualsize Number[m|unit] --size Number[m|unit] --thinpool LV_new"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[59].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[59].required_opt_args[0].opt = type_ARG;
commands[59].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[59].required_opt_args[0].def.str = "thin";
commands[59].required_opt_args[1].opt = virtualsize_ARG;
commands[59].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[59].required_opt_args[2].opt = size_ARG;
commands[59].required_opt_args[2].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[59].required_opt_args[3].opt = thinpool_ARG;
commands[59].required_opt_args[3].def.val_bits = val_enum_to_bit(lv_VAL);
commands[59].required_opt_args[3].def.flags = ARG_DEF_FLAG_NEW;
commands[59].optional_opt_args[0].opt = commandprofile_ARG;
commands[59].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[59].optional_opt_args[1].opt = config_ARG;
commands[59].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[59].optional_opt_args[2].opt = debug_ARG;
commands[59].optional_opt_args[3].opt = driverloaded_ARG;
commands[59].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[4].opt = help_ARG;
commands[59].optional_opt_args[5].opt = profile_ARG;
commands[59].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[59].optional_opt_args[6].opt = quiet_ARG;
commands[59].optional_opt_args[7].opt = verbose_ARG;
commands[59].optional_opt_args[8].opt = version_ARG;
commands[59].optional_opt_args[9].opt = yes_ARG;
commands[59].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[59].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[59].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[59].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[12].opt = chunksize_ARG;
commands[59].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[59].optional_opt_args[13].opt = discards_ARG;
commands[59].optional_opt_args[13].def.val_bits = val_enum_to_bit(discards_VAL);
commands[59].optional_opt_args[14].opt = errorwhenfull_ARG;
commands[59].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[15].opt = addtag_ARG;
commands[59].optional_opt_args[15].def.val_bits = val_enum_to_bit(tag_VAL);
commands[59].optional_opt_args[16].opt = alloc_ARG;
commands[59].optional_opt_args[16].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[59].optional_opt_args[17].opt = autobackup_ARG;
commands[59].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[18].opt = activate_ARG;
commands[59].optional_opt_args[18].def.val_bits = val_enum_to_bit(activation_VAL);
commands[59].optional_opt_args[19].opt = contiguous_ARG;
commands[59].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[20].opt = ignoreactivationskip_ARG;
commands[59].optional_opt_args[21].opt = ignoremonitoring_ARG;
commands[59].optional_opt_args[22].opt = major_ARG;
commands[59].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[59].optional_opt_args[23].opt = metadataprofile_ARG;
commands[59].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[59].optional_opt_args[24].opt = minor_ARG;
commands[59].optional_opt_args[24].def.val_bits = val_enum_to_bit(number_VAL);
commands[59].optional_opt_args[25].opt = monitor_ARG;
commands[59].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[26].opt = name_ARG;
commands[59].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[59].optional_opt_args[27].opt = nosync_ARG;
commands[59].optional_opt_args[28].opt = noudevsync_ARG;
commands[59].optional_opt_args[29].opt = permission_ARG;
commands[59].optional_opt_args[29].def.val_bits = val_enum_to_bit(permission_VAL);
commands[59].optional_opt_args[30].opt = persistent_ARG;
commands[59].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[31].opt = readahead_ARG;
commands[59].optional_opt_args[31].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[59].optional_opt_args[32].opt = reportformat_ARG;
commands[59].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[59].optional_opt_args[33].opt = setactivationskip_ARG;
commands[59].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[34].opt = test_ARG;
commands[59].optional_opt_args[35].opt = wipesignatures_ARG;
commands[59].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_opt_args[36].opt = zero_ARG;
commands[59].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[59].optional_pos_args[0].pos = 1;
commands[59].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[59].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[60].name = "lvcreate";
commands[60].command_line_id = "lvcreate_thin_vol_with_thinpool";
commands[60].command_line_enum = lvcreate_thin_vol_with_thinpool_CMD;
commands[60].fn = lvcreate;
commands[60].ro_count = 4;
commands[60].rp_count = 0;
commands[60].oo_count = 38;
commands[60].op_count = 1;
commands[60].desc = "DESC: Create a thin LV, first creating a thin pool for it,  DESC: where the new thin pool is named by the --thinpool arg,  DESC: (variant, infers --type thin).";
commands[60].usage = "lvcreate --thin --virtualsize Number[m|unit] --size Number[m|unit] --thinpool LV_new"
" [ --type thin, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[60].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[60].required_opt_args[0].opt = thin_ARG;
commands[60].required_opt_args[1].opt = virtualsize_ARG;
commands[60].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[60].required_opt_args[2].opt = size_ARG;
commands[60].required_opt_args[2].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[60].required_opt_args[3].opt = thinpool_ARG;
commands[60].required_opt_args[3].def.val_bits = val_enum_to_bit(lv_VAL);
commands[60].required_opt_args[3].def.flags = ARG_DEF_FLAG_NEW;
commands[60].optional_opt_args[0].opt = commandprofile_ARG;
commands[60].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[60].optional_opt_args[1].opt = config_ARG;
commands[60].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[60].optional_opt_args[2].opt = debug_ARG;
commands[60].optional_opt_args[3].opt = driverloaded_ARG;
commands[60].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[4].opt = help_ARG;
commands[60].optional_opt_args[5].opt = profile_ARG;
commands[60].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[60].optional_opt_args[6].opt = quiet_ARG;
commands[60].optional_opt_args[7].opt = verbose_ARG;
commands[60].optional_opt_args[8].opt = version_ARG;
commands[60].optional_opt_args[9].opt = yes_ARG;
commands[60].optional_opt_args[10].opt = type_ARG;
commands[60].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[60].optional_opt_args[10].def.str = "thin";
commands[60].optional_opt_args[11].opt = poolmetadatasize_ARG;
commands[60].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[60].optional_opt_args[12].opt = poolmetadataspare_ARG;
commands[60].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[13].opt = chunksize_ARG;
commands[60].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[60].optional_opt_args[14].opt = discards_ARG;
commands[60].optional_opt_args[14].def.val_bits = val_enum_to_bit(discards_VAL);
commands[60].optional_opt_args[15].opt = errorwhenfull_ARG;
commands[60].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[16].opt = addtag_ARG;
commands[60].optional_opt_args[16].def.val_bits = val_enum_to_bit(tag_VAL);
commands[60].optional_opt_args[17].opt = alloc_ARG;
commands[60].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[60].optional_opt_args[18].opt = autobackup_ARG;
commands[60].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[19].opt = activate_ARG;
commands[60].optional_opt_args[19].def.val_bits = val_enum_to_bit(activation_VAL);
commands[60].optional_opt_args[20].opt = contiguous_ARG;
commands[60].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[21].opt = ignoreactivationskip_ARG;
commands[60].optional_opt_args[22].opt = ignoremonitoring_ARG;
commands[60].optional_opt_args[23].opt = major_ARG;
commands[60].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[60].optional_opt_args[24].opt = metadataprofile_ARG;
commands[60].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[60].optional_opt_args[25].opt = minor_ARG;
commands[60].optional_opt_args[25].def.val_bits = val_enum_to_bit(number_VAL);
commands[60].optional_opt_args[26].opt = monitor_ARG;
commands[60].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[27].opt = name_ARG;
commands[60].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[60].optional_opt_args[28].opt = nosync_ARG;
commands[60].optional_opt_args[29].opt = noudevsync_ARG;
commands[60].optional_opt_args[30].opt = permission_ARG;
commands[60].optional_opt_args[30].def.val_bits = val_enum_to_bit(permission_VAL);
commands[60].optional_opt_args[31].opt = persistent_ARG;
commands[60].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[32].opt = readahead_ARG;
commands[60].optional_opt_args[32].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[60].optional_opt_args[33].opt = reportformat_ARG;
commands[60].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);
commands[60].optional_opt_args[34].opt = setactivationskip_ARG;
commands[60].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[35].opt = test_ARG;
commands[60].optional_opt_args[36].opt = wipesignatures_ARG;
commands[60].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_opt_args[37].opt = zero_ARG;
commands[60].optional_opt_args[37].def.val_bits = val_enum_to_bit(bool_VAL);
commands[60].optional_pos_args[0].pos = 1;
commands[60].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[60].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[61].name = "lvcreate";
commands[61].command_line_id = "lvcreate_thin_vol_with_thinpool";
commands[61].command_line_enum = lvcreate_thin_vol_with_thinpool_CMD;
commands[61].fn = lvcreate;
commands[61].ro_count = 3;
commands[61].rp_count = 1;
commands[61].oo_count = 37;
commands[61].op_count = 1;
commands[61].desc = "DESC: Create a thin LV, first creating a thin pool for it,  DESC: where the new thin pool is named in arg pos 1.";
commands[61].usage = "lvcreate --type thin --virtualsize Number[m|unit] --size Number[m|unit] LV_new"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[61].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[61].required_opt_args[0].opt = type_ARG;
commands[61].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[61].required_opt_args[0].def.str = "thin";
commands[61].required_opt_args[1].opt = virtualsize_ARG;
commands[61].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[61].required_opt_args[2].opt = size_ARG;
commands[61].required_opt_args[2].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[61].required_pos_args[0].pos = 1;
commands[61].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[61].required_pos_args[0].def.flags = ARG_DEF_FLAG_NEW;
commands[61].optional_opt_args[0].opt = commandprofile_ARG;
commands[61].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[61].optional_opt_args[1].opt = config_ARG;
commands[61].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[61].optional_opt_args[2].opt = debug_ARG;
commands[61].optional_opt_args[3].opt = driverloaded_ARG;
commands[61].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[4].opt = help_ARG;
commands[61].optional_opt_args[5].opt = profile_ARG;
commands[61].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[61].optional_opt_args[6].opt = quiet_ARG;
commands[61].optional_opt_args[7].opt = verbose_ARG;
commands[61].optional_opt_args[8].opt = version_ARG;
commands[61].optional_opt_args[9].opt = yes_ARG;
commands[61].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[61].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[61].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[61].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[12].opt = chunksize_ARG;
commands[61].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[61].optional_opt_args[13].opt = discards_ARG;
commands[61].optional_opt_args[13].def.val_bits = val_enum_to_bit(discards_VAL);
commands[61].optional_opt_args[14].opt = errorwhenfull_ARG;
commands[61].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[15].opt = addtag_ARG;
commands[61].optional_opt_args[15].def.val_bits = val_enum_to_bit(tag_VAL);
commands[61].optional_opt_args[16].opt = alloc_ARG;
commands[61].optional_opt_args[16].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[61].optional_opt_args[17].opt = autobackup_ARG;
commands[61].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[18].opt = activate_ARG;
commands[61].optional_opt_args[18].def.val_bits = val_enum_to_bit(activation_VAL);
commands[61].optional_opt_args[19].opt = contiguous_ARG;
commands[61].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[20].opt = ignoreactivationskip_ARG;
commands[61].optional_opt_args[21].opt = ignoremonitoring_ARG;
commands[61].optional_opt_args[22].opt = major_ARG;
commands[61].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[61].optional_opt_args[23].opt = metadataprofile_ARG;
commands[61].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[61].optional_opt_args[24].opt = minor_ARG;
commands[61].optional_opt_args[24].def.val_bits = val_enum_to_bit(number_VAL);
commands[61].optional_opt_args[25].opt = monitor_ARG;
commands[61].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[26].opt = name_ARG;
commands[61].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[61].optional_opt_args[27].opt = nosync_ARG;
commands[61].optional_opt_args[28].opt = noudevsync_ARG;
commands[61].optional_opt_args[29].opt = permission_ARG;
commands[61].optional_opt_args[29].def.val_bits = val_enum_to_bit(permission_VAL);
commands[61].optional_opt_args[30].opt = persistent_ARG;
commands[61].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[31].opt = readahead_ARG;
commands[61].optional_opt_args[31].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[61].optional_opt_args[32].opt = reportformat_ARG;
commands[61].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[61].optional_opt_args[33].opt = setactivationskip_ARG;
commands[61].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[34].opt = test_ARG;
commands[61].optional_opt_args[35].opt = wipesignatures_ARG;
commands[61].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_opt_args[36].opt = zero_ARG;
commands[61].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[61].optional_pos_args[0].pos = 2;
commands[61].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[61].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[62].name = "lvcreate";
commands[62].command_line_id = "lvcreate_thin_vol_with_thinpool";
commands[62].command_line_enum = lvcreate_thin_vol_with_thinpool_CMD;
commands[62].fn = lvcreate;
commands[62].ro_count = 3;
commands[62].rp_count = 1;
commands[62].oo_count = 38;
commands[62].op_count = 1;
commands[62].desc = "DESC: Create a thin LV, first creating a thin pool for it,  DESC: where the new thin pool is named in arg pos 1,  DESC: (variant, infers --type thin).";
commands[62].usage = "lvcreate --thin --virtualsize Number[m|unit] --size Number[m|unit] LV_new"
" [ --type thin, --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[62].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[62].required_opt_args[0].opt = thin_ARG;
commands[62].required_opt_args[1].opt = virtualsize_ARG;
commands[62].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[62].required_opt_args[2].opt = size_ARG;
commands[62].required_opt_args[2].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[62].required_pos_args[0].pos = 1;
commands[62].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[62].required_pos_args[0].def.flags = ARG_DEF_FLAG_NEW;
commands[62].optional_opt_args[0].opt = commandprofile_ARG;
commands[62].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[62].optional_opt_args[1].opt = config_ARG;
commands[62].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[62].optional_opt_args[2].opt = debug_ARG;
commands[62].optional_opt_args[3].opt = driverloaded_ARG;
commands[62].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[4].opt = help_ARG;
commands[62].optional_opt_args[5].opt = profile_ARG;
commands[62].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[62].optional_opt_args[6].opt = quiet_ARG;
commands[62].optional_opt_args[7].opt = verbose_ARG;
commands[62].optional_opt_args[8].opt = version_ARG;
commands[62].optional_opt_args[9].opt = yes_ARG;
commands[62].optional_opt_args[10].opt = type_ARG;
commands[62].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[62].optional_opt_args[10].def.str = "thin";
commands[62].optional_opt_args[11].opt = poolmetadatasize_ARG;
commands[62].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[62].optional_opt_args[12].opt = poolmetadataspare_ARG;
commands[62].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[13].opt = chunksize_ARG;
commands[62].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[62].optional_opt_args[14].opt = discards_ARG;
commands[62].optional_opt_args[14].def.val_bits = val_enum_to_bit(discards_VAL);
commands[62].optional_opt_args[15].opt = errorwhenfull_ARG;
commands[62].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[16].opt = addtag_ARG;
commands[62].optional_opt_args[16].def.val_bits = val_enum_to_bit(tag_VAL);
commands[62].optional_opt_args[17].opt = alloc_ARG;
commands[62].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[62].optional_opt_args[18].opt = autobackup_ARG;
commands[62].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[19].opt = activate_ARG;
commands[62].optional_opt_args[19].def.val_bits = val_enum_to_bit(activation_VAL);
commands[62].optional_opt_args[20].opt = contiguous_ARG;
commands[62].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[21].opt = ignoreactivationskip_ARG;
commands[62].optional_opt_args[22].opt = ignoremonitoring_ARG;
commands[62].optional_opt_args[23].opt = major_ARG;
commands[62].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[62].optional_opt_args[24].opt = metadataprofile_ARG;
commands[62].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[62].optional_opt_args[25].opt = minor_ARG;
commands[62].optional_opt_args[25].def.val_bits = val_enum_to_bit(number_VAL);
commands[62].optional_opt_args[26].opt = monitor_ARG;
commands[62].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[27].opt = name_ARG;
commands[62].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[62].optional_opt_args[28].opt = nosync_ARG;
commands[62].optional_opt_args[29].opt = noudevsync_ARG;
commands[62].optional_opt_args[30].opt = permission_ARG;
commands[62].optional_opt_args[30].def.val_bits = val_enum_to_bit(permission_VAL);
commands[62].optional_opt_args[31].opt = persistent_ARG;
commands[62].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[32].opt = readahead_ARG;
commands[62].optional_opt_args[32].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[62].optional_opt_args[33].opt = reportformat_ARG;
commands[62].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);
commands[62].optional_opt_args[34].opt = setactivationskip_ARG;
commands[62].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[35].opt = test_ARG;
commands[62].optional_opt_args[36].opt = wipesignatures_ARG;
commands[62].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_opt_args[37].opt = zero_ARG;
commands[62].optional_opt_args[37].def.val_bits = val_enum_to_bit(bool_VAL);
commands[62].optional_pos_args[0].pos = 2;
commands[62].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[62].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[63].name = "lvcreate";
commands[63].command_line_id = "lvcreate_thin_vol_with_thinpool";
commands[63].command_line_enum = lvcreate_thin_vol_with_thinpool_CMD;
commands[63].fn = lvcreate;
commands[63].ro_count = 3;
commands[63].rp_count = 1;
commands[63].oo_count = 37;
commands[63].op_count = 1;
commands[63].desc = "DESC: Create a thin LV, first creating a thin pool for it.";
commands[63].usage = "lvcreate --type thin --virtualsize Number[m|unit] --size Number[m|unit] VG"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[63].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[63].required_opt_args[0].opt = type_ARG;
commands[63].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[63].required_opt_args[0].def.str = "thin";
commands[63].required_opt_args[1].opt = virtualsize_ARG;
commands[63].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[63].required_opt_args[2].opt = size_ARG;
commands[63].required_opt_args[2].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[63].required_pos_args[0].pos = 1;
commands[63].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[63].optional_opt_args[0].opt = commandprofile_ARG;
commands[63].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[63].optional_opt_args[1].opt = config_ARG;
commands[63].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[63].optional_opt_args[2].opt = debug_ARG;
commands[63].optional_opt_args[3].opt = driverloaded_ARG;
commands[63].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[4].opt = help_ARG;
commands[63].optional_opt_args[5].opt = profile_ARG;
commands[63].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[63].optional_opt_args[6].opt = quiet_ARG;
commands[63].optional_opt_args[7].opt = verbose_ARG;
commands[63].optional_opt_args[8].opt = version_ARG;
commands[63].optional_opt_args[9].opt = yes_ARG;
commands[63].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[63].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[63].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[63].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[12].opt = chunksize_ARG;
commands[63].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[63].optional_opt_args[13].opt = discards_ARG;
commands[63].optional_opt_args[13].def.val_bits = val_enum_to_bit(discards_VAL);
commands[63].optional_opt_args[14].opt = errorwhenfull_ARG;
commands[63].optional_opt_args[14].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[15].opt = addtag_ARG;
commands[63].optional_opt_args[15].def.val_bits = val_enum_to_bit(tag_VAL);
commands[63].optional_opt_args[16].opt = alloc_ARG;
commands[63].optional_opt_args[16].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[63].optional_opt_args[17].opt = autobackup_ARG;
commands[63].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[18].opt = activate_ARG;
commands[63].optional_opt_args[18].def.val_bits = val_enum_to_bit(activation_VAL);
commands[63].optional_opt_args[19].opt = contiguous_ARG;
commands[63].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[20].opt = ignoreactivationskip_ARG;
commands[63].optional_opt_args[21].opt = ignoremonitoring_ARG;
commands[63].optional_opt_args[22].opt = major_ARG;
commands[63].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[63].optional_opt_args[23].opt = metadataprofile_ARG;
commands[63].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[63].optional_opt_args[24].opt = minor_ARG;
commands[63].optional_opt_args[24].def.val_bits = val_enum_to_bit(number_VAL);
commands[63].optional_opt_args[25].opt = monitor_ARG;
commands[63].optional_opt_args[25].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[26].opt = name_ARG;
commands[63].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[63].optional_opt_args[27].opt = nosync_ARG;
commands[63].optional_opt_args[28].opt = noudevsync_ARG;
commands[63].optional_opt_args[29].opt = permission_ARG;
commands[63].optional_opt_args[29].def.val_bits = val_enum_to_bit(permission_VAL);
commands[63].optional_opt_args[30].opt = persistent_ARG;
commands[63].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[31].opt = readahead_ARG;
commands[63].optional_opt_args[31].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[63].optional_opt_args[32].opt = reportformat_ARG;
commands[63].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[63].optional_opt_args[33].opt = setactivationskip_ARG;
commands[63].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[34].opt = test_ARG;
commands[63].optional_opt_args[35].opt = wipesignatures_ARG;
commands[63].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_opt_args[36].opt = zero_ARG;
commands[63].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[63].optional_pos_args[0].pos = 2;
commands[63].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[63].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[64].name = "lvcreate";
commands[64].command_line_id = "lvcreate_thin_vol_with_thinpool_or_sparse_snapshot";
commands[64].command_line_enum = lvcreate_thin_vol_with_thinpool_or_sparse_snapshot_CMD;
commands[64].fn = lvcreate;
commands[64].ro_count = 2;
commands[64].rp_count = 1;
commands[64].oo_count = 42;
commands[64].op_count = 1;
commands[64].desc = "DESC: Create a thin LV, first creating a thin pool for it  DESC: (infers --type thin).  DESC: Create a sparse snapshot of a virtual origin LV  DESC: (infers --type snapshot).  DESC: Infers --type thin or --type snapshot according to  DESC: confing setting sparse_segtype_default.";
commands[64].usage = "lvcreate --size Number[m|unit] --virtualsize Number[m|unit] VG"
" [ --type thin, --type snapshot, --thin, --snapshot, --virtualoriginsize Number[m|unit], --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --discards passdown|nopassdown|ignore, --errorwhenfull y|n, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[64].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[64].required_opt_args[0].opt = size_ARG;
commands[64].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[64].required_opt_args[1].opt = virtualsize_ARG;
commands[64].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[64].required_pos_args[0].pos = 1;
commands[64].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[64].optional_opt_args[0].opt = commandprofile_ARG;
commands[64].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[64].optional_opt_args[1].opt = config_ARG;
commands[64].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[64].optional_opt_args[2].opt = debug_ARG;
commands[64].optional_opt_args[3].opt = driverloaded_ARG;
commands[64].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[4].opt = help_ARG;
commands[64].optional_opt_args[5].opt = profile_ARG;
commands[64].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[64].optional_opt_args[6].opt = quiet_ARG;
commands[64].optional_opt_args[7].opt = verbose_ARG;
commands[64].optional_opt_args[8].opt = version_ARG;
commands[64].optional_opt_args[9].opt = yes_ARG;
commands[64].optional_opt_args[10].opt = type_ARG;
commands[64].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[64].optional_opt_args[10].def.str = "thin";
commands[64].optional_opt_args[11].opt = type_ARG;
commands[64].optional_opt_args[11].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[64].optional_opt_args[11].def.str = "snapshot";
commands[64].optional_opt_args[12].opt = thin_ARG;
commands[64].optional_opt_args[13].opt = snapshot_ARG;
commands[64].optional_opt_args[14].opt = virtualoriginsize_ARG;
commands[64].optional_opt_args[14].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[64].optional_opt_args[15].opt = poolmetadatasize_ARG;
commands[64].optional_opt_args[15].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[64].optional_opt_args[16].opt = poolmetadataspare_ARG;
commands[64].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[17].opt = chunksize_ARG;
commands[64].optional_opt_args[17].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[64].optional_opt_args[18].opt = discards_ARG;
commands[64].optional_opt_args[18].def.val_bits = val_enum_to_bit(discards_VAL);
commands[64].optional_opt_args[19].opt = errorwhenfull_ARG;
commands[64].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[20].opt = addtag_ARG;
commands[64].optional_opt_args[20].def.val_bits = val_enum_to_bit(tag_VAL);
commands[64].optional_opt_args[21].opt = alloc_ARG;
commands[64].optional_opt_args[21].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[64].optional_opt_args[22].opt = autobackup_ARG;
commands[64].optional_opt_args[22].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[23].opt = activate_ARG;
commands[64].optional_opt_args[23].def.val_bits = val_enum_to_bit(activation_VAL);
commands[64].optional_opt_args[24].opt = contiguous_ARG;
commands[64].optional_opt_args[24].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[25].opt = ignoreactivationskip_ARG;
commands[64].optional_opt_args[26].opt = ignoremonitoring_ARG;
commands[64].optional_opt_args[27].opt = major_ARG;
commands[64].optional_opt_args[27].def.val_bits = val_enum_to_bit(number_VAL);
commands[64].optional_opt_args[28].opt = metadataprofile_ARG;
commands[64].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[64].optional_opt_args[29].opt = minor_ARG;
commands[64].optional_opt_args[29].def.val_bits = val_enum_to_bit(number_VAL);
commands[64].optional_opt_args[30].opt = monitor_ARG;
commands[64].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[31].opt = name_ARG;
commands[64].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[64].optional_opt_args[32].opt = nosync_ARG;
commands[64].optional_opt_args[33].opt = noudevsync_ARG;
commands[64].optional_opt_args[34].opt = permission_ARG;
commands[64].optional_opt_args[34].def.val_bits = val_enum_to_bit(permission_VAL);
commands[64].optional_opt_args[35].opt = persistent_ARG;
commands[64].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[36].opt = readahead_ARG;
commands[64].optional_opt_args[36].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[64].optional_opt_args[37].opt = reportformat_ARG;
commands[64].optional_opt_args[37].def.val_bits = val_enum_to_bit(string_VAL);
commands[64].optional_opt_args[38].opt = setactivationskip_ARG;
commands[64].optional_opt_args[38].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[39].opt = test_ARG;
commands[64].optional_opt_args[40].opt = wipesignatures_ARG;
commands[64].optional_opt_args[40].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_opt_args[41].opt = zero_ARG;
commands[64].optional_opt_args[41].def.val_bits = val_enum_to_bit(bool_VAL);
commands[64].optional_pos_args[0].pos = 2;
commands[64].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[64].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[65].name = "lvcreate";
commands[65].command_line_id = "lvcreate_convert_to_cache_vol_with_cachepool";
commands[65].command_line_enum = lvcreate_convert_to_cache_vol_with_cachepool_CMD;
commands[65].fn = lvcreate;
commands[65].ro_count = 2;
commands[65].rp_count = 1;
commands[65].oo_count = 38;
commands[65].op_count = 1;
commands[65].desc = "DESC: Convert the specified LV to type cache after creating a new  DESC: cache pool LV to use.";
commands[65].usage = "lvcreate --type cache --size Number[m|unit] LV"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --cachemode writethrough|writeback, --cachepolicy String, --cachesettings String, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[65].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[65].required_opt_args[0].opt = type_ARG;
commands[65].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[65].required_opt_args[0].def.str = "cache";
commands[65].required_opt_args[1].opt = size_ARG;
commands[65].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[65].required_pos_args[0].pos = 1;
commands[65].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[65].optional_opt_args[0].opt = commandprofile_ARG;
commands[65].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[65].optional_opt_args[1].opt = config_ARG;
commands[65].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[65].optional_opt_args[2].opt = debug_ARG;
commands[65].optional_opt_args[3].opt = driverloaded_ARG;
commands[65].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_opt_args[4].opt = help_ARG;
commands[65].optional_opt_args[5].opt = profile_ARG;
commands[65].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[65].optional_opt_args[6].opt = quiet_ARG;
commands[65].optional_opt_args[7].opt = verbose_ARG;
commands[65].optional_opt_args[8].opt = version_ARG;
commands[65].optional_opt_args[9].opt = yes_ARG;
commands[65].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[65].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[65].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[65].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_opt_args[12].opt = chunksize_ARG;
commands[65].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[65].optional_opt_args[13].opt = cachemode_ARG;
commands[65].optional_opt_args[13].def.val_bits = val_enum_to_bit(cachemode_VAL);
commands[65].optional_opt_args[14].opt = cachepolicy_ARG;
commands[65].optional_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[65].optional_opt_args[15].opt = cachesettings_ARG;
commands[65].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[65].optional_opt_args[16].opt = addtag_ARG;
commands[65].optional_opt_args[16].def.val_bits = val_enum_to_bit(tag_VAL);
commands[65].optional_opt_args[17].opt = alloc_ARG;
commands[65].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[65].optional_opt_args[18].opt = autobackup_ARG;
commands[65].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_opt_args[19].opt = activate_ARG;
commands[65].optional_opt_args[19].def.val_bits = val_enum_to_bit(activation_VAL);
commands[65].optional_opt_args[20].opt = contiguous_ARG;
commands[65].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_opt_args[21].opt = ignoreactivationskip_ARG;
commands[65].optional_opt_args[22].opt = ignoremonitoring_ARG;
commands[65].optional_opt_args[23].opt = major_ARG;
commands[65].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[65].optional_opt_args[24].opt = metadataprofile_ARG;
commands[65].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[65].optional_opt_args[25].opt = minor_ARG;
commands[65].optional_opt_args[25].def.val_bits = val_enum_to_bit(number_VAL);
commands[65].optional_opt_args[26].opt = monitor_ARG;
commands[65].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_opt_args[27].opt = name_ARG;
commands[65].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[65].optional_opt_args[28].opt = nosync_ARG;
commands[65].optional_opt_args[29].opt = noudevsync_ARG;
commands[65].optional_opt_args[30].opt = permission_ARG;
commands[65].optional_opt_args[30].def.val_bits = val_enum_to_bit(permission_VAL);
commands[65].optional_opt_args[31].opt = persistent_ARG;
commands[65].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_opt_args[32].opt = readahead_ARG;
commands[65].optional_opt_args[32].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[65].optional_opt_args[33].opt = reportformat_ARG;
commands[65].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);
commands[65].optional_opt_args[34].opt = setactivationskip_ARG;
commands[65].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_opt_args[35].opt = test_ARG;
commands[65].optional_opt_args[36].opt = wipesignatures_ARG;
commands[65].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_opt_args[37].opt = zero_ARG;
commands[65].optional_opt_args[37].def.val_bits = val_enum_to_bit(bool_VAL);
commands[65].optional_pos_args[0].pos = 2;
commands[65].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[65].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[66].name = "lvcreate";
commands[66].command_line_id = "lvcreate_cache_vol_with_new_origin";
commands[66].command_line_enum = lvcreate_cache_vol_with_new_origin_CMD;
commands[66].fn = lvcreate;
commands[66].ro_count = 3;
commands[66].rp_count = 0;
commands[66].oo_count = 38;
commands[66].op_count = 1;
commands[66].desc = "DESC: Create a cache LV, first creating a new origin LV,  DESC: then combining it with the existing cache pool in arg pos 1.";
commands[66].usage = "lvcreate --type cache --size Number[m|unit] --cachepool LV_cachepool"
" [ --poolmetadatasize Number[m|unit], --poolmetadataspare y|n, --chunksize Number[k|unit], --cachemode writethrough|writeback, --cachepolicy String, --cachesettings String, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[66].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[66].required_opt_args[0].opt = type_ARG;
commands[66].required_opt_args[0].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[66].required_opt_args[0].def.str = "cache";
commands[66].required_opt_args[1].opt = size_ARG;
commands[66].required_opt_args[1].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[66].required_opt_args[2].opt = cachepool_ARG;
commands[66].required_opt_args[2].def.val_bits = val_enum_to_bit(lv_VAL);
commands[66].required_opt_args[2].def.lv_types = ARG_DEF_LV_CACHEPOOL;
commands[66].optional_opt_args[0].opt = commandprofile_ARG;
commands[66].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[66].optional_opt_args[1].opt = config_ARG;
commands[66].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[66].optional_opt_args[2].opt = debug_ARG;
commands[66].optional_opt_args[3].opt = driverloaded_ARG;
commands[66].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_opt_args[4].opt = help_ARG;
commands[66].optional_opt_args[5].opt = profile_ARG;
commands[66].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[66].optional_opt_args[6].opt = quiet_ARG;
commands[66].optional_opt_args[7].opt = verbose_ARG;
commands[66].optional_opt_args[8].opt = version_ARG;
commands[66].optional_opt_args[9].opt = yes_ARG;
commands[66].optional_opt_args[10].opt = poolmetadatasize_ARG;
commands[66].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[66].optional_opt_args[11].opt = poolmetadataspare_ARG;
commands[66].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_opt_args[12].opt = chunksize_ARG;
commands[66].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[66].optional_opt_args[13].opt = cachemode_ARG;
commands[66].optional_opt_args[13].def.val_bits = val_enum_to_bit(cachemode_VAL);
commands[66].optional_opt_args[14].opt = cachepolicy_ARG;
commands[66].optional_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[66].optional_opt_args[15].opt = cachesettings_ARG;
commands[66].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[66].optional_opt_args[16].opt = addtag_ARG;
commands[66].optional_opt_args[16].def.val_bits = val_enum_to_bit(tag_VAL);
commands[66].optional_opt_args[17].opt = alloc_ARG;
commands[66].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[66].optional_opt_args[18].opt = autobackup_ARG;
commands[66].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_opt_args[19].opt = activate_ARG;
commands[66].optional_opt_args[19].def.val_bits = val_enum_to_bit(activation_VAL);
commands[66].optional_opt_args[20].opt = contiguous_ARG;
commands[66].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_opt_args[21].opt = ignoreactivationskip_ARG;
commands[66].optional_opt_args[22].opt = ignoremonitoring_ARG;
commands[66].optional_opt_args[23].opt = major_ARG;
commands[66].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[66].optional_opt_args[24].opt = metadataprofile_ARG;
commands[66].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[66].optional_opt_args[25].opt = minor_ARG;
commands[66].optional_opt_args[25].def.val_bits = val_enum_to_bit(number_VAL);
commands[66].optional_opt_args[26].opt = monitor_ARG;
commands[66].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_opt_args[27].opt = name_ARG;
commands[66].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[66].optional_opt_args[28].opt = nosync_ARG;
commands[66].optional_opt_args[29].opt = noudevsync_ARG;
commands[66].optional_opt_args[30].opt = permission_ARG;
commands[66].optional_opt_args[30].def.val_bits = val_enum_to_bit(permission_VAL);
commands[66].optional_opt_args[31].opt = persistent_ARG;
commands[66].optional_opt_args[31].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_opt_args[32].opt = readahead_ARG;
commands[66].optional_opt_args[32].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[66].optional_opt_args[33].opt = reportformat_ARG;
commands[66].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);
commands[66].optional_opt_args[34].opt = setactivationskip_ARG;
commands[66].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_opt_args[35].opt = test_ARG;
commands[66].optional_opt_args[36].opt = wipesignatures_ARG;
commands[66].optional_opt_args[36].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_opt_args[37].opt = zero_ARG;
commands[66].optional_opt_args[37].def.val_bits = val_enum_to_bit(bool_VAL);
commands[66].optional_pos_args[0].pos = 1;
commands[66].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[66].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[67].name = "lvcreate";
commands[67].command_line_id = "lvcreate_cache_vol_with_new_origin";
commands[67].command_line_enum = lvcreate_cache_vol_with_new_origin_CMD;
commands[67].fn = lvcreate;
commands[67].ro_count = 2;
commands[67].rp_count = 0;
commands[67].oo_count = 36;
commands[67].op_count = 1;
commands[67].desc = "DESC: Create a cache LV, first creating a new origin LV,  DESC: then combining it with the existing cache pool in arg pos 1.  DESC: (variant, infers --type cache).";
commands[67].usage = "lvcreate --size Number[m|unit] --cachepool LV_cachepool"
" [ --type cache, --cachemode writethrough|writeback, --cachepolicy String, --cachesettings String, --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --activate y|n|ay, --contiguous y|n, --ignoreactivationskip, --ignoremonitoring, --major Number, --metadataprofile String, --minor Number, --monitor y|n, --name String, --nosync, --permission rw|r, --persistent y|n, --readahead auto|none|NumberSectors, --reportformat String, --setactivationskip y|n, --wipesignatures y|n, --zero y|n ]"
" [ PV ... ]";
commands[67].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[67].required_opt_args[0].opt = size_ARG;
commands[67].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[67].required_opt_args[1].opt = cachepool_ARG;
commands[67].required_opt_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[67].required_opt_args[1].def.lv_types = ARG_DEF_LV_CACHEPOOL;
commands[67].optional_opt_args[0].opt = commandprofile_ARG;
commands[67].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[67].optional_opt_args[1].opt = config_ARG;
commands[67].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[67].optional_opt_args[2].opt = debug_ARG;
commands[67].optional_opt_args[3].opt = driverloaded_ARG;
commands[67].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[67].optional_opt_args[4].opt = help_ARG;
commands[67].optional_opt_args[5].opt = profile_ARG;
commands[67].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[67].optional_opt_args[6].opt = quiet_ARG;
commands[67].optional_opt_args[7].opt = verbose_ARG;
commands[67].optional_opt_args[8].opt = version_ARG;
commands[67].optional_opt_args[9].opt = yes_ARG;
commands[67].optional_opt_args[10].opt = type_ARG;
commands[67].optional_opt_args[10].def.val_bits = val_enum_to_bit(conststr_VAL);
commands[67].optional_opt_args[10].def.str = "cache";
commands[67].optional_opt_args[11].opt = cachemode_ARG;
commands[67].optional_opt_args[11].def.val_bits = val_enum_to_bit(cachemode_VAL);
commands[67].optional_opt_args[12].opt = cachepolicy_ARG;
commands[67].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[67].optional_opt_args[13].opt = cachesettings_ARG;
commands[67].optional_opt_args[13].def.val_bits = val_enum_to_bit(string_VAL);
commands[67].optional_opt_args[14].opt = addtag_ARG;
commands[67].optional_opt_args[14].def.val_bits = val_enum_to_bit(tag_VAL);
commands[67].optional_opt_args[15].opt = alloc_ARG;
commands[67].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[67].optional_opt_args[16].opt = autobackup_ARG;
commands[67].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[67].optional_opt_args[17].opt = activate_ARG;
commands[67].optional_opt_args[17].def.val_bits = val_enum_to_bit(activation_VAL);
commands[67].optional_opt_args[18].opt = contiguous_ARG;
commands[67].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[67].optional_opt_args[19].opt = ignoreactivationskip_ARG;
commands[67].optional_opt_args[20].opt = ignoremonitoring_ARG;
commands[67].optional_opt_args[21].opt = major_ARG;
commands[67].optional_opt_args[21].def.val_bits = val_enum_to_bit(number_VAL);
commands[67].optional_opt_args[22].opt = metadataprofile_ARG;
commands[67].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[67].optional_opt_args[23].opt = minor_ARG;
commands[67].optional_opt_args[23].def.val_bits = val_enum_to_bit(number_VAL);
commands[67].optional_opt_args[24].opt = monitor_ARG;
commands[67].optional_opt_args[24].def.val_bits = val_enum_to_bit(bool_VAL);
commands[67].optional_opt_args[25].opt = name_ARG;
commands[67].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[67].optional_opt_args[26].opt = nosync_ARG;
commands[67].optional_opt_args[27].opt = noudevsync_ARG;
commands[67].optional_opt_args[28].opt = permission_ARG;
commands[67].optional_opt_args[28].def.val_bits = val_enum_to_bit(permission_VAL);
commands[67].optional_opt_args[29].opt = persistent_ARG;
commands[67].optional_opt_args[29].def.val_bits = val_enum_to_bit(bool_VAL);
commands[67].optional_opt_args[30].opt = readahead_ARG;
commands[67].optional_opt_args[30].def.val_bits = val_enum_to_bit(readahead_VAL);
commands[67].optional_opt_args[31].opt = reportformat_ARG;
commands[67].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[67].optional_opt_args[32].opt = setactivationskip_ARG;
commands[67].optional_opt_args[32].def.val_bits = val_enum_to_bit(bool_VAL);
commands[67].optional_opt_args[33].opt = test_ARG;
commands[67].optional_opt_args[34].opt = wipesignatures_ARG;
commands[67].optional_opt_args[34].def.val_bits = val_enum_to_bit(bool_VAL);
commands[67].optional_opt_args[35].opt = zero_ARG;
commands[67].optional_opt_args[35].def.val_bits = val_enum_to_bit(bool_VAL);
commands[67].optional_pos_args[0].pos = 1;
commands[67].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[67].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[68].name = "lvdisplay";
commands[68].command_line_id = "lvdisplay_general";
commands[68].command_line_enum = lvdisplay_general_CMD;
commands[68].fn = lvdisplay;
commands[68].ro_count = 0;
commands[68].rp_count = 0;
commands[68].oo_count = 35;
commands[68].op_count = 1;
commands[68].desc = "";
commands[68].usage = "lvdisplay"
" [ --aligned, --all, --binary, --colon, --columns, --configreport String, --foreign, --history, --ignorelockingfailure, --ignoreskippedcluster, --logonly, --maps, --noheadings, --nosuffix, --options String, --sort String, --partial, --readonly, --reportformat String, --segments, --select String, --separator String, --shared, --unbuffered, --units hHbBsSkKmMgGtTpPeE ]"
" [ VG|LV|Tag ... ]";
commands[68].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[68].optional_opt_args[0].opt = commandprofile_ARG;
commands[68].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[1].opt = config_ARG;
commands[68].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[2].opt = debug_ARG;
commands[68].optional_opt_args[3].opt = driverloaded_ARG;
commands[68].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[68].optional_opt_args[4].opt = help_ARG;
commands[68].optional_opt_args[5].opt = profile_ARG;
commands[68].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[6].opt = quiet_ARG;
commands[68].optional_opt_args[7].opt = verbose_ARG;
commands[68].optional_opt_args[8].opt = version_ARG;
commands[68].optional_opt_args[9].opt = yes_ARG;
commands[68].optional_opt_args[10].opt = aligned_ARG;
commands[68].optional_opt_args[11].opt = all_ARG;
commands[68].optional_opt_args[12].opt = binary_ARG;
commands[68].optional_opt_args[13].opt = colon_ARG;
commands[68].optional_opt_args[14].opt = columns_ARG;
commands[68].optional_opt_args[15].opt = configreport_ARG;
commands[68].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[16].opt = foreign_ARG;
commands[68].optional_opt_args[17].opt = history_ARG;
commands[68].optional_opt_args[18].opt = ignorelockingfailure_ARG;
commands[68].optional_opt_args[19].opt = ignoreskippedcluster_ARG;
commands[68].optional_opt_args[20].opt = logonly_ARG;
commands[68].optional_opt_args[21].opt = maps_ARG;
commands[68].optional_opt_args[22].opt = noheadings_ARG;
commands[68].optional_opt_args[23].opt = nosuffix_ARG;
commands[68].optional_opt_args[24].opt = options_ARG;
commands[68].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[25].opt = sort_ARG;
commands[68].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[26].opt = partial_ARG;
commands[68].optional_opt_args[27].opt = readonly_ARG;
commands[68].optional_opt_args[28].opt = reportformat_ARG;
commands[68].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[29].opt = segments_ARG;
commands[68].optional_opt_args[30].opt = select_ARG;
commands[68].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[31].opt = separator_ARG;
commands[68].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[68].optional_opt_args[32].opt = shared_ARG;
commands[68].optional_opt_args[33].opt = unbuffered_ARG;
commands[68].optional_opt_args[34].opt = units_ARG;
commands[68].optional_opt_args[34].def.val_bits = val_enum_to_bit(units_VAL);
commands[68].optional_pos_args[0].pos = 1;
commands[68].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL);
commands[68].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[69].name = "lvextend";
commands[69].command_line_id = "lvextend_by_size";
commands[69].command_line_enum = lvextend_by_size_CMD;
commands[69].fn = lvextend;
commands[69].ro_count = 1;
commands[69].rp_count = 1;
commands[69].oo_count = 23;
commands[69].op_count = 1;
commands[69].desc = "";
commands[69].usage = "lvextend --size Number[m|unit] LV"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --mirrors [+|-]Number, --nofsck, --nosync, --reportformat String, --resizefs, --stripes Number, --stripesize Number[k|unit], --poolmetadatasize Number[m|unit] ]"
" [ PV ... ]";
commands[69].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[69].required_opt_args[0].opt = size_ARG;
commands[69].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[69].required_pos_args[0].pos = 1;
commands[69].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[69].optional_opt_args[0].opt = commandprofile_ARG;
commands[69].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[69].optional_opt_args[1].opt = config_ARG;
commands[69].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[69].optional_opt_args[2].opt = debug_ARG;
commands[69].optional_opt_args[3].opt = driverloaded_ARG;
commands[69].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[69].optional_opt_args[4].opt = help_ARG;
commands[69].optional_opt_args[5].opt = profile_ARG;
commands[69].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[69].optional_opt_args[6].opt = quiet_ARG;
commands[69].optional_opt_args[7].opt = verbose_ARG;
commands[69].optional_opt_args[8].opt = version_ARG;
commands[69].optional_opt_args[9].opt = yes_ARG;
commands[69].optional_opt_args[10].opt = alloc_ARG;
commands[69].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[69].optional_opt_args[11].opt = autobackup_ARG;
commands[69].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[69].optional_opt_args[12].opt = force_ARG;
commands[69].optional_opt_args[13].opt = mirrors_ARG;
commands[69].optional_opt_args[13].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[69].optional_opt_args[14].opt = nofsck_ARG;
commands[69].optional_opt_args[15].opt = nosync_ARG;
commands[69].optional_opt_args[16].opt = noudevsync_ARG;
commands[69].optional_opt_args[17].opt = reportformat_ARG;
commands[69].optional_opt_args[17].def.val_bits = val_enum_to_bit(string_VAL);
commands[69].optional_opt_args[18].opt = resizefs_ARG;
commands[69].optional_opt_args[19].opt = stripes_ARG;
commands[69].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[69].optional_opt_args[20].opt = stripesize_ARG;
commands[69].optional_opt_args[20].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[69].optional_opt_args[21].opt = test_ARG;
commands[69].optional_opt_args[22].opt = poolmetadatasize_ARG;
commands[69].optional_opt_args[22].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[69].optional_pos_args[0].pos = 2;
commands[69].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[69].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[70].name = "lvextend";
commands[70].command_line_id = "lvextend_by_pv";
commands[70].command_line_enum = lvextend_by_pv_CMD;
commands[70].fn = lvextend;
commands[70].ro_count = 0;
commands[70].rp_count = 2;
commands[70].oo_count = 22;
commands[70].op_count = 0;
commands[70].desc = "";
commands[70].usage = "lvextend LV PV ..."
" [ --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --mirrors [+|-]Number, --nofsck, --nosync, --reportformat String, --resizefs, --stripes Number, --stripesize Number[k|unit] ]";
commands[70].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[70].required_pos_args[0].pos = 1;
commands[70].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[70].required_pos_args[1].pos = 2;
commands[70].required_pos_args[1].def.val_bits = val_enum_to_bit(pv_VAL);
commands[70].required_pos_args[1].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[70].optional_opt_args[0].opt = commandprofile_ARG;
commands[70].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[70].optional_opt_args[1].opt = config_ARG;
commands[70].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[70].optional_opt_args[2].opt = debug_ARG;
commands[70].optional_opt_args[3].opt = driverloaded_ARG;
commands[70].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[70].optional_opt_args[4].opt = help_ARG;
commands[70].optional_opt_args[5].opt = profile_ARG;
commands[70].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[70].optional_opt_args[6].opt = quiet_ARG;
commands[70].optional_opt_args[7].opt = verbose_ARG;
commands[70].optional_opt_args[8].opt = version_ARG;
commands[70].optional_opt_args[9].opt = yes_ARG;
commands[70].optional_opt_args[10].opt = alloc_ARG;
commands[70].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[70].optional_opt_args[11].opt = autobackup_ARG;
commands[70].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[70].optional_opt_args[12].opt = force_ARG;
commands[70].optional_opt_args[13].opt = mirrors_ARG;
commands[70].optional_opt_args[13].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[70].optional_opt_args[14].opt = nofsck_ARG;
commands[70].optional_opt_args[15].opt = nosync_ARG;
commands[70].optional_opt_args[16].opt = noudevsync_ARG;
commands[70].optional_opt_args[17].opt = reportformat_ARG;
commands[70].optional_opt_args[17].def.val_bits = val_enum_to_bit(string_VAL);
commands[70].optional_opt_args[18].opt = resizefs_ARG;
commands[70].optional_opt_args[19].opt = stripes_ARG;
commands[70].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[70].optional_opt_args[20].opt = stripesize_ARG;
commands[70].optional_opt_args[20].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[70].optional_opt_args[21].opt = test_ARG;

commands[71].name = "lvextend";
commands[71].command_line_id = "lvextend_pool_metadata_by_size";
commands[71].command_line_enum = lvextend_pool_metadata_by_size_CMD;
commands[71].fn = lvextend;
commands[71].ro_count = 1;
commands[71].rp_count = 1;
commands[71].oo_count = 21;
commands[71].op_count = 1;
commands[71].desc = "";
commands[71].usage = "lvextend --poolmetadatasize Number[m|unit] LV_thinpool"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --mirrors [+|-]Number, --nofsck, --nosync, --reportformat String, --stripes Number, --stripesize Number[k|unit] ]"
" [ PV ... ]";
commands[71].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[71].required_opt_args[0].opt = poolmetadatasize_ARG;
commands[71].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[71].required_pos_args[0].pos = 1;
commands[71].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[71].required_pos_args[0].def.lv_types = ARG_DEF_LV_THINPOOL;
commands[71].optional_opt_args[0].opt = commandprofile_ARG;
commands[71].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[71].optional_opt_args[1].opt = config_ARG;
commands[71].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[71].optional_opt_args[2].opt = debug_ARG;
commands[71].optional_opt_args[3].opt = driverloaded_ARG;
commands[71].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[71].optional_opt_args[4].opt = help_ARG;
commands[71].optional_opt_args[5].opt = profile_ARG;
commands[71].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[71].optional_opt_args[6].opt = quiet_ARG;
commands[71].optional_opt_args[7].opt = verbose_ARG;
commands[71].optional_opt_args[8].opt = version_ARG;
commands[71].optional_opt_args[9].opt = yes_ARG;
commands[71].optional_opt_args[10].opt = alloc_ARG;
commands[71].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[71].optional_opt_args[11].opt = autobackup_ARG;
commands[71].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[71].optional_opt_args[12].opt = force_ARG;
commands[71].optional_opt_args[13].opt = mirrors_ARG;
commands[71].optional_opt_args[13].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[71].optional_opt_args[14].opt = nofsck_ARG;
commands[71].optional_opt_args[15].opt = nosync_ARG;
commands[71].optional_opt_args[16].opt = noudevsync_ARG;
commands[71].optional_opt_args[17].opt = reportformat_ARG;
commands[71].optional_opt_args[17].def.val_bits = val_enum_to_bit(string_VAL);
commands[71].optional_opt_args[18].opt = stripes_ARG;
commands[71].optional_opt_args[18].def.val_bits = val_enum_to_bit(number_VAL);
commands[71].optional_opt_args[19].opt = stripesize_ARG;
commands[71].optional_opt_args[19].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[71].optional_opt_args[20].opt = test_ARG;
commands[71].optional_pos_args[0].pos = 2;
commands[71].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[71].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[72].name = "lvextend";
commands[72].command_line_id = "lvextend_by_policy";
commands[72].command_line_enum = lvextend_by_policy_CMD;
commands[72].fn = lvextend;
commands[72].ro_count = 1;
commands[72].rp_count = 1;
commands[72].oo_count = 20;
commands[72].op_count = 0;
commands[72].desc = "";
commands[72].usage = "lvextend --usepolicies LV_snapshot_thinpool"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --mirrors [+|-]Number, --nofsck, --nosync, --reportformat String, --resizefs ]";
commands[72].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[72].required_opt_args[0].opt = usepolicies_ARG;
commands[72].required_pos_args[0].pos = 1;
commands[72].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[72].required_pos_args[0].def.lv_types = ARG_DEF_LV_SNAPSHOT | ARG_DEF_LV_THINPOOL;
commands[72].optional_opt_args[0].opt = commandprofile_ARG;
commands[72].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[72].optional_opt_args[1].opt = config_ARG;
commands[72].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[72].optional_opt_args[2].opt = debug_ARG;
commands[72].optional_opt_args[3].opt = driverloaded_ARG;
commands[72].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[72].optional_opt_args[4].opt = help_ARG;
commands[72].optional_opt_args[5].opt = profile_ARG;
commands[72].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[72].optional_opt_args[6].opt = quiet_ARG;
commands[72].optional_opt_args[7].opt = verbose_ARG;
commands[72].optional_opt_args[8].opt = version_ARG;
commands[72].optional_opt_args[9].opt = yes_ARG;
commands[72].optional_opt_args[10].opt = alloc_ARG;
commands[72].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[72].optional_opt_args[11].opt = autobackup_ARG;
commands[72].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[72].optional_opt_args[12].opt = force_ARG;
commands[72].optional_opt_args[13].opt = mirrors_ARG;
commands[72].optional_opt_args[13].def.val_bits = val_enum_to_bit(numsigned_VAL);
commands[72].optional_opt_args[14].opt = nofsck_ARG;
commands[72].optional_opt_args[15].opt = nosync_ARG;
commands[72].optional_opt_args[16].opt = noudevsync_ARG;
commands[72].optional_opt_args[17].opt = reportformat_ARG;
commands[72].optional_opt_args[17].def.val_bits = val_enum_to_bit(string_VAL);
commands[72].optional_opt_args[18].opt = resizefs_ARG;
commands[72].optional_opt_args[19].opt = test_ARG;

commands[73].name = "lvmconfig";
commands[73].command_line_id = "lvmconfig_general";
commands[73].command_line_enum = lvmconfig_general_CMD;
commands[73].fn = lvmconfig;
commands[73].ro_count = 0;
commands[73].rp_count = 0;
commands[73].oo_count = 28;
commands[73].op_count = 0;
commands[73].desc = "";
commands[73].usage = "lvmconfig"
" [ --atversion String, --typeconfig String, --file String, --ignoreadvanced, --ignoreunsupported, --ignorelocal, --list, --mergedconfig, --metadataprofile String, --sinceversion String, --showdeprecated, --showunsupported, --validate, --withsummary, --withcomments, --withspaces, --unconfigured, --withversions ]";
commands[73].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[73].optional_opt_args[0].opt = commandprofile_ARG;
commands[73].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[73].optional_opt_args[1].opt = config_ARG;
commands[73].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[73].optional_opt_args[2].opt = debug_ARG;
commands[73].optional_opt_args[3].opt = driverloaded_ARG;
commands[73].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[73].optional_opt_args[4].opt = help_ARG;
commands[73].optional_opt_args[5].opt = profile_ARG;
commands[73].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[73].optional_opt_args[6].opt = quiet_ARG;
commands[73].optional_opt_args[7].opt = verbose_ARG;
commands[73].optional_opt_args[8].opt = version_ARG;
commands[73].optional_opt_args[9].opt = yes_ARG;
commands[73].optional_opt_args[10].opt = atversion_ARG;
commands[73].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[73].optional_opt_args[11].opt = configtype_ARG;
commands[73].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[73].optional_opt_args[12].opt = file_ARG;
commands[73].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[73].optional_opt_args[13].opt = ignoreadvanced_ARG;
commands[73].optional_opt_args[14].opt = ignoreunsupported_ARG;
commands[73].optional_opt_args[15].opt = ignorelocal_ARG;
commands[73].optional_opt_args[16].opt = list_ARG;
commands[73].optional_opt_args[17].opt = mergedconfig_ARG;
commands[73].optional_opt_args[18].opt = metadataprofile_ARG;
commands[73].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[73].optional_opt_args[19].opt = sinceversion_ARG;
commands[73].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);
commands[73].optional_opt_args[20].opt = showdeprecated_ARG;
commands[73].optional_opt_args[21].opt = showunsupported_ARG;
commands[73].optional_opt_args[22].opt = validate_ARG;
commands[73].optional_opt_args[23].opt = withsummary_ARG;
commands[73].optional_opt_args[24].opt = withcomments_ARG;
commands[73].optional_opt_args[25].opt = withspaces_ARG;
commands[73].optional_opt_args[26].opt = unconfigured_ARG;
commands[73].optional_opt_args[27].opt = withversions_ARG;

commands[74].name = "lvreduce";
commands[74].command_line_id = "lvreduce_general";
commands[74].command_line_enum = lvreduce_general_CMD;
commands[74].fn = lvreduce;
commands[74].ro_count = 1;
commands[74].rp_count = 1;
commands[74].oo_count = 17;
commands[74].op_count = 0;
commands[74].desc = "";
commands[74].usage = "lvreduce --size Number[m|unit] LV"
" [ --autobackup y|n, --nofsck, --reportformat String, --resizefs ]";
commands[74].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[74].required_opt_args[0].opt = size_ARG;
commands[74].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[74].required_pos_args[0].pos = 1;
commands[74].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[74].optional_opt_args[0].opt = commandprofile_ARG;
commands[74].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[74].optional_opt_args[1].opt = config_ARG;
commands[74].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[74].optional_opt_args[2].opt = debug_ARG;
commands[74].optional_opt_args[3].opt = driverloaded_ARG;
commands[74].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[74].optional_opt_args[4].opt = help_ARG;
commands[74].optional_opt_args[5].opt = profile_ARG;
commands[74].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[74].optional_opt_args[6].opt = quiet_ARG;
commands[74].optional_opt_args[7].opt = verbose_ARG;
commands[74].optional_opt_args[8].opt = version_ARG;
commands[74].optional_opt_args[9].opt = yes_ARG;
commands[74].optional_opt_args[10].opt = autobackup_ARG;
commands[74].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[74].optional_opt_args[11].opt = force_ARG;
commands[74].optional_opt_args[12].opt = nofsck_ARG;
commands[74].optional_opt_args[13].opt = noudevsync_ARG;
commands[74].optional_opt_args[14].opt = reportformat_ARG;
commands[74].optional_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[74].optional_opt_args[15].opt = resizefs_ARG;
commands[74].optional_opt_args[16].opt = test_ARG;

commands[75].name = "lvremove";
commands[75].command_line_id = "lvremove_general";
commands[75].command_line_enum = lvremove_general_CMD;
commands[75].fn = lvremove;
commands[75].ro_count = 0;
commands[75].rp_count = 1;
commands[75].oo_count = 17;
commands[75].op_count = 0;
commands[75].desc = "";
commands[75].usage = "lvremove VG|LV|Tag|Select ..."
" [ --autobackup y|n, --nohistory, --reportformat String, --select String ]";
commands[75].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[75].required_pos_args[0].pos = 1;
commands[75].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[75].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[75].optional_opt_args[0].opt = commandprofile_ARG;
commands[75].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[75].optional_opt_args[1].opt = config_ARG;
commands[75].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[75].optional_opt_args[2].opt = debug_ARG;
commands[75].optional_opt_args[3].opt = driverloaded_ARG;
commands[75].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[75].optional_opt_args[4].opt = help_ARG;
commands[75].optional_opt_args[5].opt = profile_ARG;
commands[75].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[75].optional_opt_args[6].opt = quiet_ARG;
commands[75].optional_opt_args[7].opt = verbose_ARG;
commands[75].optional_opt_args[8].opt = version_ARG;
commands[75].optional_opt_args[9].opt = yes_ARG;
commands[75].optional_opt_args[10].opt = autobackup_ARG;
commands[75].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[75].optional_opt_args[11].opt = force_ARG;
commands[75].optional_opt_args[12].opt = nohistory_ARG;
commands[75].optional_opt_args[13].opt = noudevsync_ARG;
commands[75].optional_opt_args[14].opt = reportformat_ARG;
commands[75].optional_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[75].optional_opt_args[15].opt = select_ARG;
commands[75].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[75].optional_opt_args[16].opt = test_ARG;

commands[76].name = "lvrename";
commands[76].command_line_id = "lvrename_vg_lv_lv";
commands[76].command_line_enum = lvrename_vg_lv_lv_CMD;
commands[76].fn = lvrename;
commands[76].ro_count = 0;
commands[76].rp_count = 3;
commands[76].oo_count = 14;
commands[76].op_count = 0;
commands[76].desc = "";
commands[76].usage = "lvrename VG LV LV_new"
" [ --autobackup y|n, --reportformat String ]";
commands[76].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[76].required_pos_args[0].pos = 1;
commands[76].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[76].required_pos_args[1].pos = 2;
commands[76].required_pos_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[76].required_pos_args[2].pos = 3;
commands[76].required_pos_args[2].def.val_bits = val_enum_to_bit(lv_VAL);
commands[76].required_pos_args[2].def.flags = ARG_DEF_FLAG_NEW;
commands[76].optional_opt_args[0].opt = commandprofile_ARG;
commands[76].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[76].optional_opt_args[1].opt = config_ARG;
commands[76].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[76].optional_opt_args[2].opt = debug_ARG;
commands[76].optional_opt_args[3].opt = driverloaded_ARG;
commands[76].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[76].optional_opt_args[4].opt = help_ARG;
commands[76].optional_opt_args[5].opt = profile_ARG;
commands[76].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[76].optional_opt_args[6].opt = quiet_ARG;
commands[76].optional_opt_args[7].opt = verbose_ARG;
commands[76].optional_opt_args[8].opt = version_ARG;
commands[76].optional_opt_args[9].opt = yes_ARG;
commands[76].optional_opt_args[10].opt = autobackup_ARG;
commands[76].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[76].optional_opt_args[11].opt = noudevsync_ARG;
commands[76].optional_opt_args[12].opt = reportformat_ARG;
commands[76].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[76].optional_opt_args[13].opt = test_ARG;

commands[77].name = "lvrename";
commands[77].command_line_id = "lvrename_lv_lv";
commands[77].command_line_enum = lvrename_lv_lv_CMD;
commands[77].fn = lvrename;
commands[77].ro_count = 0;
commands[77].rp_count = 2;
commands[77].oo_count = 14;
commands[77].op_count = 0;
commands[77].desc = "";
commands[77].usage = "lvrename LV LV_new"
" [ --autobackup y|n, --reportformat String ]";
commands[77].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[77].required_pos_args[0].pos = 1;
commands[77].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[77].required_pos_args[1].pos = 2;
commands[77].required_pos_args[1].def.val_bits = val_enum_to_bit(lv_VAL);
commands[77].required_pos_args[1].def.flags = ARG_DEF_FLAG_NEW;
commands[77].optional_opt_args[0].opt = commandprofile_ARG;
commands[77].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[77].optional_opt_args[1].opt = config_ARG;
commands[77].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[77].optional_opt_args[2].opt = debug_ARG;
commands[77].optional_opt_args[3].opt = driverloaded_ARG;
commands[77].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[77].optional_opt_args[4].opt = help_ARG;
commands[77].optional_opt_args[5].opt = profile_ARG;
commands[77].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[77].optional_opt_args[6].opt = quiet_ARG;
commands[77].optional_opt_args[7].opt = verbose_ARG;
commands[77].optional_opt_args[8].opt = version_ARG;
commands[77].optional_opt_args[9].opt = yes_ARG;
commands[77].optional_opt_args[10].opt = autobackup_ARG;
commands[77].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[77].optional_opt_args[11].opt = noudevsync_ARG;
commands[77].optional_opt_args[12].opt = reportformat_ARG;
commands[77].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[77].optional_opt_args[13].opt = test_ARG;

commands[78].name = "lvresize";
commands[78].command_line_id = "lvresize_by_size";
commands[78].command_line_enum = lvresize_by_size_CMD;
commands[78].fn = lvresize;
commands[78].ro_count = 1;
commands[78].rp_count = 1;
commands[78].oo_count = 22;
commands[78].op_count = 1;
commands[78].desc = "DESC: Resize an LV by a specified size.";
commands[78].usage = "lvresize --size Number[m|unit] LV"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --nofsck, --nosync, --reportformat String, --resizefs, --stripes Number, --stripesize Number[k|unit], --poolmetadatasize Number[m|unit] ]"
" [ PV ... ]";
commands[78].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[78].required_opt_args[0].opt = size_ARG;
commands[78].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[78].required_pos_args[0].pos = 1;
commands[78].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[78].optional_opt_args[0].opt = commandprofile_ARG;
commands[78].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[78].optional_opt_args[1].opt = config_ARG;
commands[78].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[78].optional_opt_args[2].opt = debug_ARG;
commands[78].optional_opt_args[3].opt = driverloaded_ARG;
commands[78].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[78].optional_opt_args[4].opt = help_ARG;
commands[78].optional_opt_args[5].opt = profile_ARG;
commands[78].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[78].optional_opt_args[6].opt = quiet_ARG;
commands[78].optional_opt_args[7].opt = verbose_ARG;
commands[78].optional_opt_args[8].opt = version_ARG;
commands[78].optional_opt_args[9].opt = yes_ARG;
commands[78].optional_opt_args[10].opt = alloc_ARG;
commands[78].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[78].optional_opt_args[11].opt = autobackup_ARG;
commands[78].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[78].optional_opt_args[12].opt = force_ARG;
commands[78].optional_opt_args[13].opt = nofsck_ARG;
commands[78].optional_opt_args[14].opt = nosync_ARG;
commands[78].optional_opt_args[15].opt = noudevsync_ARG;
commands[78].optional_opt_args[16].opt = reportformat_ARG;
commands[78].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[78].optional_opt_args[17].opt = resizefs_ARG;
commands[78].optional_opt_args[18].opt = stripes_ARG;
commands[78].optional_opt_args[18].def.val_bits = val_enum_to_bit(number_VAL);
commands[78].optional_opt_args[19].opt = stripesize_ARG;
commands[78].optional_opt_args[19].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[78].optional_opt_args[20].opt = test_ARG;
commands[78].optional_opt_args[21].opt = poolmetadatasize_ARG;
commands[78].optional_opt_args[21].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[78].optional_pos_args[0].pos = 2;
commands[78].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[78].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[79].name = "lvresize";
commands[79].command_line_id = "lvresize_by_pv";
commands[79].command_line_enum = lvresize_by_pv_CMD;
commands[79].fn = lvresize;
commands[79].ro_count = 0;
commands[79].rp_count = 2;
commands[79].oo_count = 21;
commands[79].op_count = 0;
commands[79].desc = "DESC: Resize an LV by a specified PV.";
commands[79].usage = "lvresize LV PV ..."
" [ --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --nofsck, --nosync, --reportformat String, --resizefs, --stripes Number, --stripesize Number[k|unit] ]";
commands[79].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[79].required_pos_args[0].pos = 1;
commands[79].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[79].required_pos_args[1].pos = 2;
commands[79].required_pos_args[1].def.val_bits = val_enum_to_bit(pv_VAL);
commands[79].required_pos_args[1].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[79].optional_opt_args[0].opt = commandprofile_ARG;
commands[79].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[79].optional_opt_args[1].opt = config_ARG;
commands[79].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[79].optional_opt_args[2].opt = debug_ARG;
commands[79].optional_opt_args[3].opt = driverloaded_ARG;
commands[79].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[79].optional_opt_args[4].opt = help_ARG;
commands[79].optional_opt_args[5].opt = profile_ARG;
commands[79].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[79].optional_opt_args[6].opt = quiet_ARG;
commands[79].optional_opt_args[7].opt = verbose_ARG;
commands[79].optional_opt_args[8].opt = version_ARG;
commands[79].optional_opt_args[9].opt = yes_ARG;
commands[79].optional_opt_args[10].opt = alloc_ARG;
commands[79].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[79].optional_opt_args[11].opt = autobackup_ARG;
commands[79].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[79].optional_opt_args[12].opt = force_ARG;
commands[79].optional_opt_args[13].opt = nofsck_ARG;
commands[79].optional_opt_args[14].opt = nosync_ARG;
commands[79].optional_opt_args[15].opt = noudevsync_ARG;
commands[79].optional_opt_args[16].opt = reportformat_ARG;
commands[79].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[79].optional_opt_args[17].opt = resizefs_ARG;
commands[79].optional_opt_args[18].opt = stripes_ARG;
commands[79].optional_opt_args[18].def.val_bits = val_enum_to_bit(number_VAL);
commands[79].optional_opt_args[19].opt = stripesize_ARG;
commands[79].optional_opt_args[19].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[79].optional_opt_args[20].opt = test_ARG;

commands[80].name = "lvresize";
commands[80].command_line_id = "lvresize_pool_metadata_by_size";
commands[80].command_line_enum = lvresize_pool_metadata_by_size_CMD;
commands[80].fn = lvresize;
commands[80].ro_count = 1;
commands[80].rp_count = 1;
commands[80].oo_count = 20;
commands[80].op_count = 1;
commands[80].desc = "DESC: Resize the metadata SubLV of a pool LV.";
commands[80].usage = "lvresize --poolmetadatasize Number[m|unit] LV_thinpool"
" [ --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --nofsck, --nosync, --reportformat String, --stripes Number, --stripesize Number[k|unit] ]"
" [ PV ... ]";
commands[80].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[80].required_opt_args[0].opt = poolmetadatasize_ARG;
commands[80].required_opt_args[0].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[80].required_pos_args[0].pos = 1;
commands[80].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[80].required_pos_args[0].def.lv_types = ARG_DEF_LV_THINPOOL;
commands[80].optional_opt_args[0].opt = commandprofile_ARG;
commands[80].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[80].optional_opt_args[1].opt = config_ARG;
commands[80].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[80].optional_opt_args[2].opt = debug_ARG;
commands[80].optional_opt_args[3].opt = driverloaded_ARG;
commands[80].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[80].optional_opt_args[4].opt = help_ARG;
commands[80].optional_opt_args[5].opt = profile_ARG;
commands[80].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[80].optional_opt_args[6].opt = quiet_ARG;
commands[80].optional_opt_args[7].opt = verbose_ARG;
commands[80].optional_opt_args[8].opt = version_ARG;
commands[80].optional_opt_args[9].opt = yes_ARG;
commands[80].optional_opt_args[10].opt = alloc_ARG;
commands[80].optional_opt_args[10].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[80].optional_opt_args[11].opt = autobackup_ARG;
commands[80].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[80].optional_opt_args[12].opt = force_ARG;
commands[80].optional_opt_args[13].opt = nofsck_ARG;
commands[80].optional_opt_args[14].opt = nosync_ARG;
commands[80].optional_opt_args[15].opt = noudevsync_ARG;
commands[80].optional_opt_args[16].opt = reportformat_ARG;
commands[80].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[80].optional_opt_args[17].opt = stripes_ARG;
commands[80].optional_opt_args[17].def.val_bits = val_enum_to_bit(number_VAL);
commands[80].optional_opt_args[18].opt = stripesize_ARG;
commands[80].optional_opt_args[18].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[80].optional_opt_args[19].opt = test_ARG;
commands[80].optional_pos_args[0].pos = 2;
commands[80].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[80].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[81].name = "lvs";
commands[81].command_line_id = "lvs_general";
commands[81].command_line_enum = lvs_general_CMD;
commands[81].fn = lvs;
commands[81].ro_count = 0;
commands[81].rp_count = 0;
commands[81].oo_count = 37;
commands[81].op_count = 1;
commands[81].desc = "";
commands[81].usage = "lvs"
" [ --history, --segments, --aligned, --all, --binary, --configreport String, --foreign, --ignorelockingfailure, --ignoreskippedcluster, --logonly, --nameprefixes, --noheadings, --nolocking, --nosuffix, --options String, --partial, --readonly, --reportformat String, --rows, --select String, --separator String, --shared, --sort String, --trustcache, --unbuffered, --units hHbBsSkKmMgGtTpPeE, --unquoted ]"
" [ VG|LV|Tag ... ]";
commands[81].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[81].optional_opt_args[0].opt = commandprofile_ARG;
commands[81].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[1].opt = config_ARG;
commands[81].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[2].opt = debug_ARG;
commands[81].optional_opt_args[3].opt = driverloaded_ARG;
commands[81].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[81].optional_opt_args[4].opt = help_ARG;
commands[81].optional_opt_args[5].opt = profile_ARG;
commands[81].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[6].opt = quiet_ARG;
commands[81].optional_opt_args[7].opt = verbose_ARG;
commands[81].optional_opt_args[8].opt = version_ARG;
commands[81].optional_opt_args[9].opt = yes_ARG;
commands[81].optional_opt_args[10].opt = history_ARG;
commands[81].optional_opt_args[11].opt = segments_ARG;
commands[81].optional_opt_args[12].opt = aligned_ARG;
commands[81].optional_opt_args[13].opt = all_ARG;
commands[81].optional_opt_args[14].opt = binary_ARG;
commands[81].optional_opt_args[15].opt = configreport_ARG;
commands[81].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[16].opt = foreign_ARG;
commands[81].optional_opt_args[17].opt = ignorelockingfailure_ARG;
commands[81].optional_opt_args[18].opt = ignoreskippedcluster_ARG;
commands[81].optional_opt_args[19].opt = logonly_ARG;
commands[81].optional_opt_args[20].opt = nameprefixes_ARG;
commands[81].optional_opt_args[21].opt = noheadings_ARG;
commands[81].optional_opt_args[22].opt = nolocking_ARG;
commands[81].optional_opt_args[23].opt = nosuffix_ARG;
commands[81].optional_opt_args[24].opt = options_ARG;
commands[81].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[25].opt = partial_ARG;
commands[81].optional_opt_args[26].opt = readonly_ARG;
commands[81].optional_opt_args[27].opt = reportformat_ARG;
commands[81].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[28].opt = rows_ARG;
commands[81].optional_opt_args[29].opt = select_ARG;
commands[81].optional_opt_args[29].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[30].opt = separator_ARG;
commands[81].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[31].opt = shared_ARG;
commands[81].optional_opt_args[32].opt = sort_ARG;
commands[81].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[81].optional_opt_args[33].opt = trustcache_ARG;
commands[81].optional_opt_args[34].opt = unbuffered_ARG;
commands[81].optional_opt_args[35].opt = units_ARG;
commands[81].optional_opt_args[35].def.val_bits = val_enum_to_bit(units_VAL);
commands[81].optional_opt_args[36].opt = unquoted_ARG;
commands[81].optional_pos_args[0].pos = 1;
commands[81].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL);
commands[81].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[82].name = "lvscan";
commands[82].command_line_id = "lvscan_general";
commands[82].command_line_enum = lvscan_general_CMD;
commands[82].fn = lvscan;
commands[82].ro_count = 0;
commands[82].rp_count = 0;
commands[82].oo_count = 17;
commands[82].op_count = 0;
commands[82].desc = "";
commands[82].usage = "lvscan"
" [ --all, --blockdevice, --ignorelockingfailure, --partial, --readonly, --reportformat String, --cache ]";
commands[82].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[82].optional_opt_args[0].opt = commandprofile_ARG;
commands[82].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[82].optional_opt_args[1].opt = config_ARG;
commands[82].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[82].optional_opt_args[2].opt = debug_ARG;
commands[82].optional_opt_args[3].opt = driverloaded_ARG;
commands[82].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[82].optional_opt_args[4].opt = help_ARG;
commands[82].optional_opt_args[5].opt = profile_ARG;
commands[82].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[82].optional_opt_args[6].opt = quiet_ARG;
commands[82].optional_opt_args[7].opt = verbose_ARG;
commands[82].optional_opt_args[8].opt = version_ARG;
commands[82].optional_opt_args[9].opt = yes_ARG;
commands[82].optional_opt_args[10].opt = all_ARG;
commands[82].optional_opt_args[11].opt = blockdevice_ARG;
commands[82].optional_opt_args[12].opt = ignorelockingfailure_ARG;
commands[82].optional_opt_args[13].opt = partial_ARG;
commands[82].optional_opt_args[14].opt = readonly_ARG;
commands[82].optional_opt_args[15].opt = reportformat_ARG;
commands[82].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[82].optional_opt_args[16].opt = cache_long_ARG;

commands[83].name = "pvchange";
commands[83].command_line_id = "pvchange_properties_all";
commands[83].command_line_enum = pvchange_properties_all_CMD;
commands[83].fn = pvchange;
commands[83].ro_count = 6;
commands[83].rp_count = 0;
commands[83].oo_count = 16;
commands[83].op_count = 0;
commands[83].cmd_flags = CMD_FLAG_ONE_REQUIRED_OPT;
commands[83].desc = "";
commands[83].usage = "pvchange ( --allocatable y|n, --addtag Tag, --deltag Tag, --uuid, --metadataignore y|n, --all )"
" [ --autobackup y|n, --ignoreskippedcluster, --reportformat String, --uuid ]";
commands[83].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[83].required_opt_args[0].opt = allocatable_ARG;
commands[83].required_opt_args[0].def.val_bits = val_enum_to_bit(bool_VAL);
commands[83].required_opt_args[1].opt = addtag_ARG;
commands[83].required_opt_args[1].def.val_bits = val_enum_to_bit(tag_VAL);
commands[83].required_opt_args[2].opt = deltag_ARG;
commands[83].required_opt_args[2].def.val_bits = val_enum_to_bit(tag_VAL);
commands[83].required_opt_args[3].opt = uuid_ARG;
commands[83].required_opt_args[4].opt = metadataignore_ARG;
commands[83].required_opt_args[4].def.val_bits = val_enum_to_bit(bool_VAL);
commands[83].required_opt_args[5].opt = all_ARG;
commands[83].optional_opt_args[0].opt = commandprofile_ARG;
commands[83].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[83].optional_opt_args[1].opt = config_ARG;
commands[83].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[83].optional_opt_args[2].opt = debug_ARG;
commands[83].optional_opt_args[3].opt = driverloaded_ARG;
commands[83].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[83].optional_opt_args[4].opt = help_ARG;
commands[83].optional_opt_args[5].opt = profile_ARG;
commands[83].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[83].optional_opt_args[6].opt = quiet_ARG;
commands[83].optional_opt_args[7].opt = verbose_ARG;
commands[83].optional_opt_args[8].opt = version_ARG;
commands[83].optional_opt_args[9].opt = yes_ARG;
commands[83].optional_opt_args[10].opt = autobackup_ARG;
commands[83].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[83].optional_opt_args[11].opt = force_ARG;
commands[83].optional_opt_args[12].opt = ignoreskippedcluster_ARG;
commands[83].optional_opt_args[13].opt = reportformat_ARG;
commands[83].optional_opt_args[13].def.val_bits = val_enum_to_bit(string_VAL);
commands[83].optional_opt_args[14].opt = test_ARG;
commands[83].optional_opt_args[15].opt = uuid_ARG;

commands[84].name = "pvchange";
commands[84].command_line_id = "pvchange_properties_some";
commands[84].command_line_enum = pvchange_properties_some_CMD;
commands[84].fn = pvchange;
commands[84].ro_count = 5;
commands[84].rp_count = 1;
commands[84].oo_count = 17;
commands[84].op_count = 0;
commands[84].cmd_flags = CMD_FLAG_ONE_REQUIRED_OPT;
commands[84].desc = "";
commands[84].usage = "pvchange ( --allocatable y|n, --addtag Tag, --deltag Tag, --uuid, --metadataignore y|n ) PV|Select ..."
" [ --select String, --autobackup y|n, --ignoreskippedcluster, --reportformat String, --uuid ]";
commands[84].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[84].required_opt_args[0].opt = allocatable_ARG;
commands[84].required_opt_args[0].def.val_bits = val_enum_to_bit(bool_VAL);
commands[84].required_opt_args[1].opt = addtag_ARG;
commands[84].required_opt_args[1].def.val_bits = val_enum_to_bit(tag_VAL);
commands[84].required_opt_args[2].opt = deltag_ARG;
commands[84].required_opt_args[2].def.val_bits = val_enum_to_bit(tag_VAL);
commands[84].required_opt_args[3].opt = uuid_ARG;
commands[84].required_opt_args[4].opt = metadataignore_ARG;
commands[84].required_opt_args[4].def.val_bits = val_enum_to_bit(bool_VAL);
commands[84].required_pos_args[0].pos = 1;
commands[84].required_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL) | val_enum_to_bit(select_VAL);
commands[84].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[84].optional_opt_args[0].opt = commandprofile_ARG;
commands[84].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[84].optional_opt_args[1].opt = config_ARG;
commands[84].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[84].optional_opt_args[2].opt = debug_ARG;
commands[84].optional_opt_args[3].opt = driverloaded_ARG;
commands[84].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[84].optional_opt_args[4].opt = help_ARG;
commands[84].optional_opt_args[5].opt = profile_ARG;
commands[84].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[84].optional_opt_args[6].opt = quiet_ARG;
commands[84].optional_opt_args[7].opt = verbose_ARG;
commands[84].optional_opt_args[8].opt = version_ARG;
commands[84].optional_opt_args[9].opt = yes_ARG;
commands[84].optional_opt_args[10].opt = select_ARG;
commands[84].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[84].optional_opt_args[11].opt = autobackup_ARG;
commands[84].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[84].optional_opt_args[12].opt = force_ARG;
commands[84].optional_opt_args[13].opt = ignoreskippedcluster_ARG;
commands[84].optional_opt_args[14].opt = reportformat_ARG;
commands[84].optional_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[84].optional_opt_args[15].opt = test_ARG;
commands[84].optional_opt_args[16].opt = uuid_ARG;

commands[85].name = "pvresize";
commands[85].command_line_id = "pvresize_general";
commands[85].command_line_enum = pvresize_general_CMD;
commands[85].fn = pvresize;
commands[85].ro_count = 0;
commands[85].rp_count = 1;
commands[85].oo_count = 13;
commands[85].op_count = 0;
commands[85].desc = "";
commands[85].usage = "pvresize PV ..."
" [ --setphysicalvolumesize Number[m|unit], --reportformat String ]";
commands[85].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[85].required_pos_args[0].pos = 1;
commands[85].required_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[85].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[85].optional_opt_args[0].opt = commandprofile_ARG;
commands[85].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[85].optional_opt_args[1].opt = config_ARG;
commands[85].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[85].optional_opt_args[2].opt = debug_ARG;
commands[85].optional_opt_args[3].opt = driverloaded_ARG;
commands[85].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[85].optional_opt_args[4].opt = help_ARG;
commands[85].optional_opt_args[5].opt = profile_ARG;
commands[85].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[85].optional_opt_args[6].opt = quiet_ARG;
commands[85].optional_opt_args[7].opt = verbose_ARG;
commands[85].optional_opt_args[8].opt = version_ARG;
commands[85].optional_opt_args[9].opt = yes_ARG;
commands[85].optional_opt_args[10].opt = physicalvolumesize_ARG;
commands[85].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[85].optional_opt_args[11].opt = reportformat_ARG;
commands[85].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[85].optional_opt_args[12].opt = test_ARG;

commands[86].name = "pvck";
commands[86].command_line_id = "pvck_general";
commands[86].command_line_enum = pvck_general_CMD;
commands[86].fn = pvck;
commands[86].ro_count = 0;
commands[86].rp_count = 1;
commands[86].oo_count = 11;
commands[86].op_count = 0;
commands[86].desc = "";
commands[86].usage = "pvck PV ..."
" [ --labelsector Number ]";
commands[86].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[86].required_pos_args[0].pos = 1;
commands[86].required_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[86].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[86].optional_opt_args[0].opt = commandprofile_ARG;
commands[86].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[86].optional_opt_args[1].opt = config_ARG;
commands[86].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[86].optional_opt_args[2].opt = debug_ARG;
commands[86].optional_opt_args[3].opt = driverloaded_ARG;
commands[86].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[86].optional_opt_args[4].opt = help_ARG;
commands[86].optional_opt_args[5].opt = profile_ARG;
commands[86].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[86].optional_opt_args[6].opt = quiet_ARG;
commands[86].optional_opt_args[7].opt = verbose_ARG;
commands[86].optional_opt_args[8].opt = version_ARG;
commands[86].optional_opt_args[9].opt = yes_ARG;
commands[86].optional_opt_args[10].opt = labelsector_ARG;
commands[86].optional_opt_args[10].def.val_bits = val_enum_to_bit(number_VAL);

commands[87].name = "pvcreate";
commands[87].command_line_id = "pvcreate_general";
commands[87].command_line_enum = pvcreate_general_CMD;
commands[87].fn = pvcreate;
commands[87].ro_count = 0;
commands[87].rp_count = 1;
commands[87].oo_count = 27;
commands[87].op_count = 0;
commands[87].desc = "";
commands[87].usage = "pvcreate PV ..."
" [ --dataalignment Number[k|unit], --dataalignmentoffset Number[k|unit], --bootloaderareasize Number[m|unit], --labelsector Number, --metadatatype lvm2|lvm1, --pvmetadatacopies Number, --metadatacopies all|unmanaged|Number, --metadatasize Number[m|unit], --metadataignore y|n, --norestorefile, --setphysicalvolumesize Number[m|unit], --reportformat String, --restorefile String, --uuid String, --zero y|n ]";
commands[87].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[87].required_pos_args[0].pos = 1;
commands[87].required_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[87].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[87].optional_opt_args[0].opt = commandprofile_ARG;
commands[87].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[87].optional_opt_args[1].opt = config_ARG;
commands[87].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[87].optional_opt_args[2].opt = debug_ARG;
commands[87].optional_opt_args[3].opt = driverloaded_ARG;
commands[87].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[87].optional_opt_args[4].opt = help_ARG;
commands[87].optional_opt_args[5].opt = profile_ARG;
commands[87].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[87].optional_opt_args[6].opt = quiet_ARG;
commands[87].optional_opt_args[7].opt = verbose_ARG;
commands[87].optional_opt_args[8].opt = version_ARG;
commands[87].optional_opt_args[9].opt = yes_ARG;
commands[87].optional_opt_args[10].opt = dataalignment_ARG;
commands[87].optional_opt_args[10].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[87].optional_opt_args[11].opt = dataalignmentoffset_ARG;
commands[87].optional_opt_args[11].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[87].optional_opt_args[12].opt = bootloaderareasize_ARG;
commands[87].optional_opt_args[12].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[87].optional_opt_args[13].opt = force_ARG;
commands[87].optional_opt_args[14].opt = test_ARG;
commands[87].optional_opt_args[15].opt = labelsector_ARG;
commands[87].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[87].optional_opt_args[16].opt = metadatatype_ARG;
commands[87].optional_opt_args[16].def.val_bits = val_enum_to_bit(metadatatype_VAL);
commands[87].optional_opt_args[17].opt = pvmetadatacopies_ARG;
commands[87].optional_opt_args[17].def.val_bits = val_enum_to_bit(number_VAL);
commands[87].optional_opt_args[18].opt = metadatacopies_ARG;
commands[87].optional_opt_args[18].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[87].optional_opt_args[19].opt = metadatasize_ARG;
commands[87].optional_opt_args[19].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[87].optional_opt_args[20].opt = metadataignore_ARG;
commands[87].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[87].optional_opt_args[21].opt = norestorefile_ARG;
commands[87].optional_opt_args[22].opt = physicalvolumesize_ARG;
commands[87].optional_opt_args[22].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[87].optional_opt_args[23].opt = reportformat_ARG;
commands[87].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[87].optional_opt_args[24].opt = restorefile_ARG;
commands[87].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[87].optional_opt_args[25].opt = uuidstr_ARG;
commands[87].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[87].optional_opt_args[26].opt = zero_ARG;
commands[87].optional_opt_args[26].def.val_bits = val_enum_to_bit(bool_VAL);

commands[88].name = "pvdisplay";
commands[88].command_line_id = "pvdisplay_general";
commands[88].command_line_enum = pvdisplay_general_CMD;
commands[88].fn = pvdisplay;
commands[88].ro_count = 0;
commands[88].rp_count = 0;
commands[88].oo_count = 33;
commands[88].op_count = 1;
commands[88].desc = "";
commands[88].usage = "pvdisplay"
" [ --aligned, --all, --binary, --colon, --columns, --configreport String, --foreign, --ignorelockingfailure, --ignoreskippedcluster, --logonly, --maps, --noheadings, --nosuffix, --options String, --readonly, --reportformat String, --select String, --separator String, --shared, --short, --sort String, --unbuffered, --units hHbBsSkKmMgGtTpPeE ]"
" [ PV|Tag ... ]";
commands[88].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[88].optional_opt_args[0].opt = commandprofile_ARG;
commands[88].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[1].opt = config_ARG;
commands[88].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[2].opt = debug_ARG;
commands[88].optional_opt_args[3].opt = driverloaded_ARG;
commands[88].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[88].optional_opt_args[4].opt = help_ARG;
commands[88].optional_opt_args[5].opt = profile_ARG;
commands[88].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[6].opt = quiet_ARG;
commands[88].optional_opt_args[7].opt = verbose_ARG;
commands[88].optional_opt_args[8].opt = version_ARG;
commands[88].optional_opt_args[9].opt = yes_ARG;
commands[88].optional_opt_args[10].opt = aligned_ARG;
commands[88].optional_opt_args[11].opt = all_ARG;
commands[88].optional_opt_args[12].opt = binary_ARG;
commands[88].optional_opt_args[13].opt = colon_ARG;
commands[88].optional_opt_args[14].opt = columns_ARG;
commands[88].optional_opt_args[15].opt = configreport_ARG;
commands[88].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[16].opt = foreign_ARG;
commands[88].optional_opt_args[17].opt = ignorelockingfailure_ARG;
commands[88].optional_opt_args[18].opt = ignoreskippedcluster_ARG;
commands[88].optional_opt_args[19].opt = logonly_ARG;
commands[88].optional_opt_args[20].opt = maps_ARG;
commands[88].optional_opt_args[21].opt = noheadings_ARG;
commands[88].optional_opt_args[22].opt = nosuffix_ARG;
commands[88].optional_opt_args[23].opt = options_ARG;
commands[88].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[24].opt = readonly_ARG;
commands[88].optional_opt_args[25].opt = reportformat_ARG;
commands[88].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[26].opt = select_ARG;
commands[88].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[27].opt = separator_ARG;
commands[88].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[28].opt = shared_ARG;
commands[88].optional_opt_args[29].opt = short_ARG;
commands[88].optional_opt_args[30].opt = sort_ARG;
commands[88].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[88].optional_opt_args[31].opt = unbuffered_ARG;
commands[88].optional_opt_args[32].opt = units_ARG;
commands[88].optional_opt_args[32].def.val_bits = val_enum_to_bit(units_VAL);
commands[88].optional_pos_args[0].pos = 1;
commands[88].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL) | val_enum_to_bit(tag_VAL);
commands[88].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[89].name = "pvmove";
commands[89].command_line_id = "pvmove_one";
commands[89].command_line_enum = pvmove_one_CMD;
commands[89].fn = pvmove;
commands[89].ro_count = 0;
commands[89].rp_count = 1;
commands[89].oo_count = 20;
commands[89].op_count = 1;
commands[89].desc = "";
commands[89].usage = "pvmove PV"
" [ --abort, --alloc contiguous|cling|normal|anywhere|inherit, --atomic, --autobackup y|n, --background, --interval Number, --name LV, --reportformat String ]"
" [ PV ... ]";
commands[89].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[89].required_pos_args[0].pos = 1;
commands[89].required_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[89].optional_opt_args[0].opt = commandprofile_ARG;
commands[89].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[89].optional_opt_args[1].opt = config_ARG;
commands[89].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[89].optional_opt_args[2].opt = debug_ARG;
commands[89].optional_opt_args[3].opt = driverloaded_ARG;
commands[89].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[89].optional_opt_args[4].opt = help_ARG;
commands[89].optional_opt_args[5].opt = profile_ARG;
commands[89].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[89].optional_opt_args[6].opt = quiet_ARG;
commands[89].optional_opt_args[7].opt = verbose_ARG;
commands[89].optional_opt_args[8].opt = version_ARG;
commands[89].optional_opt_args[9].opt = yes_ARG;
commands[89].optional_opt_args[10].opt = abort_ARG;
commands[89].optional_opt_args[11].opt = alloc_ARG;
commands[89].optional_opt_args[11].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[89].optional_opt_args[12].opt = atomic_ARG;
commands[89].optional_opt_args[13].opt = autobackup_ARG;
commands[89].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[89].optional_opt_args[14].opt = background_ARG;
commands[89].optional_opt_args[15].opt = interval_ARG;
commands[89].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[89].optional_opt_args[16].opt = name_ARG;
commands[89].optional_opt_args[16].def.val_bits = val_enum_to_bit(lv_VAL);
commands[89].optional_opt_args[17].opt = noudevsync_ARG;
commands[89].optional_opt_args[18].opt = reportformat_ARG;
commands[89].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[89].optional_opt_args[19].opt = test_ARG;
commands[89].optional_pos_args[0].pos = 2;
commands[89].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[89].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[90].name = "pvmove";
commands[90].command_line_id = "pvmove_any";
commands[90].command_line_enum = pvmove_any_CMD;
commands[90].fn = pvmove;
commands[90].ro_count = 0;
commands[90].rp_count = 0;
commands[90].oo_count = 13;
commands[90].op_count = 0;
commands[90].desc = "";
commands[90].usage = "pvmove"
" [ --abort, --background ]";
commands[90].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[90].optional_opt_args[0].opt = commandprofile_ARG;
commands[90].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[90].optional_opt_args[1].opt = config_ARG;
commands[90].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[90].optional_opt_args[2].opt = debug_ARG;
commands[90].optional_opt_args[3].opt = driverloaded_ARG;
commands[90].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[90].optional_opt_args[4].opt = help_ARG;
commands[90].optional_opt_args[5].opt = profile_ARG;
commands[90].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[90].optional_opt_args[6].opt = quiet_ARG;
commands[90].optional_opt_args[7].opt = verbose_ARG;
commands[90].optional_opt_args[8].opt = version_ARG;
commands[90].optional_opt_args[9].opt = yes_ARG;
commands[90].optional_opt_args[10].opt = abort_ARG;
commands[90].optional_opt_args[11].opt = background_ARG;
commands[90].optional_opt_args[12].opt = test_ARG;

commands[91].name = "pvremove";
commands[91].command_line_id = "pvremove_general";
commands[91].command_line_enum = pvremove_general_CMD;
commands[91].fn = pvremove;
commands[91].ro_count = 0;
commands[91].rp_count = 1;
commands[91].oo_count = 13;
commands[91].op_count = 0;
commands[91].desc = "";
commands[91].usage = "pvremove PV ..."
" [ --reportformat String ]";
commands[91].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[91].required_pos_args[0].pos = 1;
commands[91].required_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[91].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[91].optional_opt_args[0].opt = commandprofile_ARG;
commands[91].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[91].optional_opt_args[1].opt = config_ARG;
commands[91].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[91].optional_opt_args[2].opt = debug_ARG;
commands[91].optional_opt_args[3].opt = driverloaded_ARG;
commands[91].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[91].optional_opt_args[4].opt = help_ARG;
commands[91].optional_opt_args[5].opt = profile_ARG;
commands[91].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[91].optional_opt_args[6].opt = quiet_ARG;
commands[91].optional_opt_args[7].opt = verbose_ARG;
commands[91].optional_opt_args[8].opt = version_ARG;
commands[91].optional_opt_args[9].opt = yes_ARG;
commands[91].optional_opt_args[10].opt = force_ARG;
commands[91].optional_opt_args[11].opt = reportformat_ARG;
commands[91].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[91].optional_opt_args[12].opt = test_ARG;

commands[92].name = "pvs";
commands[92].command_line_id = "pvs_general";
commands[92].command_line_enum = pvs_general_CMD;
commands[92].fn = pvs;
commands[92].ro_count = 0;
commands[92].rp_count = 0;
commands[92].oo_count = 36;
commands[92].op_count = 1;
commands[92].desc = "";
commands[92].usage = "pvs"
" [ --segments, --aligned, --all, --binary, --configreport String, --foreign, --ignorelockingfailure, --ignoreskippedcluster, --logonly, --nameprefixes, --noheadings, --nolocking, --nosuffix, --options String, --partial, --readonly, --reportformat String, --rows, --select String, --separator String, --shared, --sort String, --trustcache, --unbuffered, --units hHbBsSkKmMgGtTpPeE, --unquoted ]"
" [ PV|Tag ... ]";
commands[92].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[92].optional_opt_args[0].opt = commandprofile_ARG;
commands[92].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[1].opt = config_ARG;
commands[92].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[2].opt = debug_ARG;
commands[92].optional_opt_args[3].opt = driverloaded_ARG;
commands[92].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[92].optional_opt_args[4].opt = help_ARG;
commands[92].optional_opt_args[5].opt = profile_ARG;
commands[92].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[6].opt = quiet_ARG;
commands[92].optional_opt_args[7].opt = verbose_ARG;
commands[92].optional_opt_args[8].opt = version_ARG;
commands[92].optional_opt_args[9].opt = yes_ARG;
commands[92].optional_opt_args[10].opt = segments_ARG;
commands[92].optional_opt_args[11].opt = aligned_ARG;
commands[92].optional_opt_args[12].opt = all_ARG;
commands[92].optional_opt_args[13].opt = binary_ARG;
commands[92].optional_opt_args[14].opt = configreport_ARG;
commands[92].optional_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[15].opt = foreign_ARG;
commands[92].optional_opt_args[16].opt = ignorelockingfailure_ARG;
commands[92].optional_opt_args[17].opt = ignoreskippedcluster_ARG;
commands[92].optional_opt_args[18].opt = logonly_ARG;
commands[92].optional_opt_args[19].opt = nameprefixes_ARG;
commands[92].optional_opt_args[20].opt = noheadings_ARG;
commands[92].optional_opt_args[21].opt = nolocking_ARG;
commands[92].optional_opt_args[22].opt = nosuffix_ARG;
commands[92].optional_opt_args[23].opt = options_ARG;
commands[92].optional_opt_args[23].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[24].opt = partial_ARG;
commands[92].optional_opt_args[25].opt = readonly_ARG;
commands[92].optional_opt_args[26].opt = reportformat_ARG;
commands[92].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[27].opt = rows_ARG;
commands[92].optional_opt_args[28].opt = select_ARG;
commands[92].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[29].opt = separator_ARG;
commands[92].optional_opt_args[29].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[30].opt = shared_ARG;
commands[92].optional_opt_args[31].opt = sort_ARG;
commands[92].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[92].optional_opt_args[32].opt = trustcache_ARG;
commands[92].optional_opt_args[33].opt = unbuffered_ARG;
commands[92].optional_opt_args[34].opt = units_ARG;
commands[92].optional_opt_args[34].def.val_bits = val_enum_to_bit(units_VAL);
commands[92].optional_opt_args[35].opt = unquoted_ARG;
commands[92].optional_pos_args[0].pos = 1;
commands[92].optional_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL) | val_enum_to_bit(tag_VAL);
commands[92].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[93].name = "pvscan";
commands[93].command_line_id = "pvscan_show";
commands[93].command_line_enum = pvscan_show_CMD;
commands[93].fn = pvscan;
commands[93].ro_count = 0;
commands[93].rp_count = 0;
commands[93].oo_count = 16;
commands[93].op_count = 0;
commands[93].desc = "";
commands[93].usage = "pvscan"
" [ --ignorelockingfailure, --reportformat String, --exported, --novolumegroup, --short, --uuid ]";
commands[93].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[93].optional_opt_args[0].opt = commandprofile_ARG;
commands[93].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[93].optional_opt_args[1].opt = config_ARG;
commands[93].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[93].optional_opt_args[2].opt = debug_ARG;
commands[93].optional_opt_args[3].opt = driverloaded_ARG;
commands[93].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[93].optional_opt_args[4].opt = help_ARG;
commands[93].optional_opt_args[5].opt = profile_ARG;
commands[93].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[93].optional_opt_args[6].opt = quiet_ARG;
commands[93].optional_opt_args[7].opt = verbose_ARG;
commands[93].optional_opt_args[8].opt = version_ARG;
commands[93].optional_opt_args[9].opt = yes_ARG;
commands[93].optional_opt_args[10].opt = ignorelockingfailure_ARG;
commands[93].optional_opt_args[11].opt = reportformat_ARG;
commands[93].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[93].optional_opt_args[12].opt = exported_ARG;
commands[93].optional_opt_args[13].opt = novolumegroup_ARG;
commands[93].optional_opt_args[14].opt = short_ARG;
commands[93].optional_opt_args[15].opt = uuid_ARG;

commands[94].name = "pvscan";
commands[94].command_line_id = "pvscan_cache";
commands[94].command_line_enum = pvscan_cache_CMD;
commands[94].fn = pvscan;
commands[94].ro_count = 1;
commands[94].rp_count = 0;
commands[94].oo_count = 16;
commands[94].op_count = 1;
commands[94].desc = "";
commands[94].usage = "pvscan --cache"
" [ --ignorelockingfailure, --reportformat String, --background, --activate y|n|ay, --major Number, --minor Number ]"
" [ String|PV ... ]";
commands[94].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[94].required_opt_args[0].opt = cache_long_ARG;
commands[94].optional_opt_args[0].opt = commandprofile_ARG;
commands[94].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[94].optional_opt_args[1].opt = config_ARG;
commands[94].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[94].optional_opt_args[2].opt = debug_ARG;
commands[94].optional_opt_args[3].opt = driverloaded_ARG;
commands[94].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[94].optional_opt_args[4].opt = help_ARG;
commands[94].optional_opt_args[5].opt = profile_ARG;
commands[94].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[94].optional_opt_args[6].opt = quiet_ARG;
commands[94].optional_opt_args[7].opt = verbose_ARG;
commands[94].optional_opt_args[8].opt = version_ARG;
commands[94].optional_opt_args[9].opt = yes_ARG;
commands[94].optional_opt_args[10].opt = ignorelockingfailure_ARG;
commands[94].optional_opt_args[11].opt = reportformat_ARG;
commands[94].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[94].optional_opt_args[12].opt = background_ARG;
commands[94].optional_opt_args[13].opt = activate_ARG;
commands[94].optional_opt_args[13].def.val_bits = val_enum_to_bit(activation_VAL);
commands[94].optional_opt_args[14].opt = major_ARG;
commands[94].optional_opt_args[14].def.val_bits = val_enum_to_bit(number_VAL);
commands[94].optional_opt_args[15].opt = minor_ARG;
commands[94].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[94].optional_pos_args[0].pos = 1;
commands[94].optional_pos_args[0].def.val_bits = val_enum_to_bit(string_VAL) | val_enum_to_bit(pv_VAL);
commands[94].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[95].name = "vgcfgbackup";
commands[95].command_line_id = "vgcfgbackup_general";
commands[95].command_line_enum = vgcfgbackup_general_CMD;
commands[95].fn = vgcfgbackup;
commands[95].ro_count = 0;
commands[95].rp_count = 0;
commands[95].oo_count = 16;
commands[95].op_count = 1;
commands[95].desc = "";
commands[95].usage = "vgcfgbackup"
" [ --file String, --foreign, --ignorelockingfailure, --partial, --readonly, --reportformat String ]"
" [ VG ... ]";
commands[95].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[95].optional_opt_args[0].opt = commandprofile_ARG;
commands[95].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[95].optional_opt_args[1].opt = config_ARG;
commands[95].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[95].optional_opt_args[2].opt = debug_ARG;
commands[95].optional_opt_args[3].opt = driverloaded_ARG;
commands[95].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[95].optional_opt_args[4].opt = help_ARG;
commands[95].optional_opt_args[5].opt = profile_ARG;
commands[95].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[95].optional_opt_args[6].opt = quiet_ARG;
commands[95].optional_opt_args[7].opt = verbose_ARG;
commands[95].optional_opt_args[8].opt = version_ARG;
commands[95].optional_opt_args[9].opt = yes_ARG;
commands[95].optional_opt_args[10].opt = file_ARG;
commands[95].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[95].optional_opt_args[11].opt = foreign_ARG;
commands[95].optional_opt_args[12].opt = ignorelockingfailure_ARG;
commands[95].optional_opt_args[13].opt = partial_ARG;
commands[95].optional_opt_args[14].opt = readonly_ARG;
commands[95].optional_opt_args[15].opt = reportformat_ARG;
commands[95].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[95].optional_pos_args[0].pos = 1;
commands[95].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[95].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[96].name = "vgcfgrestore";
commands[96].command_line_id = "vgcfgrestore_by_vg";
commands[96].command_line_enum = vgcfgrestore_by_vg_CMD;
commands[96].fn = vgcfgrestore;
commands[96].ro_count = 0;
commands[96].rp_count = 1;
commands[96].oo_count = 15;
commands[96].op_count = 0;
commands[96].desc = "";
commands[96].usage = "vgcfgrestore VG"
" [ --file String, --force, --list, --metadatatype lvm2|lvm1 ]";
commands[96].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[96].required_pos_args[0].pos = 1;
commands[96].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[96].optional_opt_args[0].opt = commandprofile_ARG;
commands[96].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[96].optional_opt_args[1].opt = config_ARG;
commands[96].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[96].optional_opt_args[2].opt = debug_ARG;
commands[96].optional_opt_args[3].opt = driverloaded_ARG;
commands[96].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[96].optional_opt_args[4].opt = help_ARG;
commands[96].optional_opt_args[5].opt = profile_ARG;
commands[96].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[96].optional_opt_args[6].opt = quiet_ARG;
commands[96].optional_opt_args[7].opt = verbose_ARG;
commands[96].optional_opt_args[8].opt = version_ARG;
commands[96].optional_opt_args[9].opt = yes_ARG;
commands[96].optional_opt_args[10].opt = file_ARG;
commands[96].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[96].optional_opt_args[11].opt = force_long_ARG;
commands[96].optional_opt_args[12].opt = list_ARG;
commands[96].optional_opt_args[13].opt = metadatatype_ARG;
commands[96].optional_opt_args[13].def.val_bits = val_enum_to_bit(metadatatype_VAL);
commands[96].optional_opt_args[14].opt = test_ARG;

commands[97].name = "vgcfgrestore";
commands[97].command_line_id = "vgcfgrestore_by_file";
commands[97].command_line_enum = vgcfgrestore_by_file_CMD;
commands[97].fn = vgcfgrestore;
commands[97].ro_count = 2;
commands[97].rp_count = 0;
commands[97].oo_count = 10;
commands[97].op_count = 0;
commands[97].desc = "";
commands[97].usage = "vgcfgrestore --list --file String";
commands[97].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[97].required_opt_args[0].opt = list_ARG;
commands[97].required_opt_args[1].opt = file_ARG;
commands[97].required_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[97].optional_opt_args[0].opt = commandprofile_ARG;
commands[97].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[97].optional_opt_args[1].opt = config_ARG;
commands[97].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[97].optional_opt_args[2].opt = debug_ARG;
commands[97].optional_opt_args[3].opt = driverloaded_ARG;
commands[97].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[97].optional_opt_args[4].opt = help_ARG;
commands[97].optional_opt_args[5].opt = profile_ARG;
commands[97].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[97].optional_opt_args[6].opt = quiet_ARG;
commands[97].optional_opt_args[7].opt = verbose_ARG;
commands[97].optional_opt_args[8].opt = version_ARG;
commands[97].optional_opt_args[9].opt = yes_ARG;

commands[98].name = "vgchange";
commands[98].command_line_id = "vgchange_properties";
commands[98].command_line_enum = vgchange_properties_CMD;
commands[98].fn = vgchange;
commands[98].ro_count = 16;
commands[98].rp_count = 0;
commands[98].oo_count = 18;
commands[98].op_count = 1;
commands[98].cmd_flags = CMD_FLAG_ONE_REQUIRED_OPT;
commands[98].desc = "";
commands[98].usage = "vgchange ( --addtag Tag, --deltag Tag, --logicalvolume Number, --maxphysicalvolumes Number, --alloc contiguous|cling|normal|anywhere|inherit, --uuid, --clustered y|n, --metadatacopies all|unmanaged|Number, --vgmetadatacopies all|unmanaged|Number, --physicalextentsize Number[m|unit], --resizeable y|n, --systemid String, --locktype sanlock|dlm|none, --profile String, --detachprofile, --metadataprofile String )"
" [ --autobackup y|n, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --select String ]"
" [ VG|Tag ... ]";
commands[98].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[98].required_opt_args[0].opt = addtag_ARG;
commands[98].required_opt_args[0].def.val_bits = val_enum_to_bit(tag_VAL);
commands[98].required_opt_args[1].opt = deltag_ARG;
commands[98].required_opt_args[1].def.val_bits = val_enum_to_bit(tag_VAL);
commands[98].required_opt_args[2].opt = logicalvolume_ARG;
commands[98].required_opt_args[2].def.val_bits = val_enum_to_bit(number_VAL);
commands[98].required_opt_args[3].opt = maxphysicalvolumes_ARG;
commands[98].required_opt_args[3].def.val_bits = val_enum_to_bit(number_VAL);
commands[98].required_opt_args[4].opt = alloc_ARG;
commands[98].required_opt_args[4].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[98].required_opt_args[5].opt = uuid_ARG;
commands[98].required_opt_args[6].opt = clustered_ARG;
commands[98].required_opt_args[6].def.val_bits = val_enum_to_bit(bool_VAL);
commands[98].required_opt_args[7].opt = metadatacopies_ARG;
commands[98].required_opt_args[7].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[98].required_opt_args[8].opt = vgmetadatacopies_ARG;
commands[98].required_opt_args[8].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[98].required_opt_args[9].opt = physicalextentsize_ARG;
commands[98].required_opt_args[9].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[98].required_opt_args[10].opt = resizeable_ARG;
commands[98].required_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[98].required_opt_args[11].opt = systemid_ARG;
commands[98].required_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[98].required_opt_args[12].opt = locktype_ARG;
commands[98].required_opt_args[12].def.val_bits = val_enum_to_bit(locktype_VAL);
commands[98].required_opt_args[13].opt = profile_ARG;
commands[98].required_opt_args[13].def.val_bits = val_enum_to_bit(string_VAL);
commands[98].required_opt_args[14].opt = detachprofile_ARG;
commands[98].required_opt_args[15].opt = metadataprofile_ARG;
commands[98].required_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[98].optional_opt_args[0].opt = commandprofile_ARG;
commands[98].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[98].optional_opt_args[1].opt = config_ARG;
commands[98].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[98].optional_opt_args[2].opt = debug_ARG;
commands[98].optional_opt_args[3].opt = driverloaded_ARG;
commands[98].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[98].optional_opt_args[4].opt = help_ARG;
commands[98].optional_opt_args[5].opt = profile_ARG;
commands[98].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[98].optional_opt_args[6].opt = quiet_ARG;
commands[98].optional_opt_args[7].opt = verbose_ARG;
commands[98].optional_opt_args[8].opt = version_ARG;
commands[98].optional_opt_args[9].opt = yes_ARG;
commands[98].optional_opt_args[10].opt = autobackup_ARG;
commands[98].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[98].optional_opt_args[11].opt = ignoremonitoring_ARG;
commands[98].optional_opt_args[12].opt = ignoreskippedcluster_ARG;
commands[98].optional_opt_args[13].opt = noudevsync_ARG;
commands[98].optional_opt_args[14].opt = reportformat_ARG;
commands[98].optional_opt_args[14].def.val_bits = val_enum_to_bit(string_VAL);
commands[98].optional_opt_args[15].opt = select_ARG;
commands[98].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[98].optional_opt_args[16].opt = test_ARG;
commands[98].optional_opt_args[17].opt = force_ARG;
commands[98].optional_pos_args[0].pos = 1;
commands[98].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[98].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[99].name = "vgchange";
commands[99].command_line_id = "vgchange_monitor";
commands[99].command_line_enum = vgchange_monitor_CMD;
commands[99].fn = vgchange;
commands[99].ro_count = 1;
commands[99].rp_count = 0;
commands[99].oo_count = 37;
commands[99].op_count = 1;
commands[99].desc = "";
commands[99].usage = "vgchange --monitor y|n"
" [ --sysinit, --ignorelockingfailure, --poll y|n, --addtag Tag, --deltag Tag, --logicalvolume Number, --maxphysicalvolumes Number, --alloc contiguous|cling|normal|anywhere|inherit, --uuid, --clustered y|n, --metadatacopies all|unmanaged|Number, --vgmetadatacopies all|unmanaged|Number, --physicalextentsize Number[m|unit], --resizeable y|n, --systemid String, --locktype sanlock|dlm|none, --detachprofile, --metadataprofile String, --autobackup y|n, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --select String ]"
" [ VG|Tag ... ]";
commands[99].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[99].required_opt_args[0].opt = monitor_ARG;
commands[99].required_opt_args[0].def.val_bits = val_enum_to_bit(bool_VAL);
commands[99].optional_opt_args[0].opt = commandprofile_ARG;
commands[99].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[99].optional_opt_args[1].opt = config_ARG;
commands[99].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[99].optional_opt_args[2].opt = debug_ARG;
commands[99].optional_opt_args[3].opt = driverloaded_ARG;
commands[99].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[99].optional_opt_args[4].opt = help_ARG;
commands[99].optional_opt_args[5].opt = profile_ARG;
commands[99].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[99].optional_opt_args[6].opt = quiet_ARG;
commands[99].optional_opt_args[7].opt = verbose_ARG;
commands[99].optional_opt_args[8].opt = version_ARG;
commands[99].optional_opt_args[9].opt = yes_ARG;
commands[99].optional_opt_args[10].opt = sysinit_ARG;
commands[99].optional_opt_args[11].opt = ignorelockingfailure_ARG;
commands[99].optional_opt_args[12].opt = poll_ARG;
commands[99].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[99].optional_opt_args[13].opt = addtag_ARG;
commands[99].optional_opt_args[13].def.val_bits = val_enum_to_bit(tag_VAL);
commands[99].optional_opt_args[14].opt = deltag_ARG;
commands[99].optional_opt_args[14].def.val_bits = val_enum_to_bit(tag_VAL);
commands[99].optional_opt_args[15].opt = logicalvolume_ARG;
commands[99].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[99].optional_opt_args[16].opt = maxphysicalvolumes_ARG;
commands[99].optional_opt_args[16].def.val_bits = val_enum_to_bit(number_VAL);
commands[99].optional_opt_args[17].opt = alloc_ARG;
commands[99].optional_opt_args[17].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[99].optional_opt_args[18].opt = uuid_ARG;
commands[99].optional_opt_args[19].opt = clustered_ARG;
commands[99].optional_opt_args[19].def.val_bits = val_enum_to_bit(bool_VAL);
commands[99].optional_opt_args[20].opt = metadatacopies_ARG;
commands[99].optional_opt_args[20].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[99].optional_opt_args[21].opt = vgmetadatacopies_ARG;
commands[99].optional_opt_args[21].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[99].optional_opt_args[22].opt = physicalextentsize_ARG;
commands[99].optional_opt_args[22].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[99].optional_opt_args[23].opt = resizeable_ARG;
commands[99].optional_opt_args[23].def.val_bits = val_enum_to_bit(bool_VAL);
commands[99].optional_opt_args[24].opt = systemid_ARG;
commands[99].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[99].optional_opt_args[25].opt = locktype_ARG;
commands[99].optional_opt_args[25].def.val_bits = val_enum_to_bit(locktype_VAL);
commands[99].optional_opt_args[26].opt = profile_ARG;
commands[99].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[99].optional_opt_args[27].opt = detachprofile_ARG;
commands[99].optional_opt_args[28].opt = metadataprofile_ARG;
commands[99].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[99].optional_opt_args[29].opt = autobackup_ARG;
commands[99].optional_opt_args[29].def.val_bits = val_enum_to_bit(bool_VAL);
commands[99].optional_opt_args[30].opt = ignoremonitoring_ARG;
commands[99].optional_opt_args[31].opt = ignoreskippedcluster_ARG;
commands[99].optional_opt_args[32].opt = noudevsync_ARG;
commands[99].optional_opt_args[33].opt = reportformat_ARG;
commands[99].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);
commands[99].optional_opt_args[34].opt = select_ARG;
commands[99].optional_opt_args[34].def.val_bits = val_enum_to_bit(string_VAL);
commands[99].optional_opt_args[35].opt = test_ARG;
commands[99].optional_opt_args[36].opt = force_ARG;
commands[99].optional_pos_args[0].pos = 1;
commands[99].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[99].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[100].name = "vgchange";
commands[100].command_line_id = "vgchange_poll";
commands[100].command_line_enum = vgchange_poll_CMD;
commands[100].fn = vgchange;
commands[100].ro_count = 1;
commands[100].rp_count = 0;
commands[100].oo_count = 35;
commands[100].op_count = 1;
commands[100].desc = "";
commands[100].usage = "vgchange --poll y|n"
" [ --ignorelockingfailure, --addtag Tag, --deltag Tag, --logicalvolume Number, --maxphysicalvolumes Number, --alloc contiguous|cling|normal|anywhere|inherit, --uuid, --clustered y|n, --metadatacopies all|unmanaged|Number, --vgmetadatacopies all|unmanaged|Number, --physicalextentsize Number[m|unit], --resizeable y|n, --systemid String, --locktype sanlock|dlm|none, --detachprofile, --metadataprofile String, --autobackup y|n, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --select String ]"
" [ VG|Tag ... ]";
commands[100].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[100].required_opt_args[0].opt = poll_ARG;
commands[100].required_opt_args[0].def.val_bits = val_enum_to_bit(bool_VAL);
commands[100].optional_opt_args[0].opt = commandprofile_ARG;
commands[100].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[100].optional_opt_args[1].opt = config_ARG;
commands[100].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[100].optional_opt_args[2].opt = debug_ARG;
commands[100].optional_opt_args[3].opt = driverloaded_ARG;
commands[100].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[100].optional_opt_args[4].opt = help_ARG;
commands[100].optional_opt_args[5].opt = profile_ARG;
commands[100].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[100].optional_opt_args[6].opt = quiet_ARG;
commands[100].optional_opt_args[7].opt = verbose_ARG;
commands[100].optional_opt_args[8].opt = version_ARG;
commands[100].optional_opt_args[9].opt = yes_ARG;
commands[100].optional_opt_args[10].opt = ignorelockingfailure_ARG;
commands[100].optional_opt_args[11].opt = addtag_ARG;
commands[100].optional_opt_args[11].def.val_bits = val_enum_to_bit(tag_VAL);
commands[100].optional_opt_args[12].opt = deltag_ARG;
commands[100].optional_opt_args[12].def.val_bits = val_enum_to_bit(tag_VAL);
commands[100].optional_opt_args[13].opt = logicalvolume_ARG;
commands[100].optional_opt_args[13].def.val_bits = val_enum_to_bit(number_VAL);
commands[100].optional_opt_args[14].opt = maxphysicalvolumes_ARG;
commands[100].optional_opt_args[14].def.val_bits = val_enum_to_bit(number_VAL);
commands[100].optional_opt_args[15].opt = alloc_ARG;
commands[100].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[100].optional_opt_args[16].opt = uuid_ARG;
commands[100].optional_opt_args[17].opt = clustered_ARG;
commands[100].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[100].optional_opt_args[18].opt = metadatacopies_ARG;
commands[100].optional_opt_args[18].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[100].optional_opt_args[19].opt = vgmetadatacopies_ARG;
commands[100].optional_opt_args[19].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[100].optional_opt_args[20].opt = physicalextentsize_ARG;
commands[100].optional_opt_args[20].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[100].optional_opt_args[21].opt = resizeable_ARG;
commands[100].optional_opt_args[21].def.val_bits = val_enum_to_bit(bool_VAL);
commands[100].optional_opt_args[22].opt = systemid_ARG;
commands[100].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[100].optional_opt_args[23].opt = locktype_ARG;
commands[100].optional_opt_args[23].def.val_bits = val_enum_to_bit(locktype_VAL);
commands[100].optional_opt_args[24].opt = profile_ARG;
commands[100].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[100].optional_opt_args[25].opt = detachprofile_ARG;
commands[100].optional_opt_args[26].opt = metadataprofile_ARG;
commands[100].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[100].optional_opt_args[27].opt = autobackup_ARG;
commands[100].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[100].optional_opt_args[28].opt = ignoremonitoring_ARG;
commands[100].optional_opt_args[29].opt = ignoreskippedcluster_ARG;
commands[100].optional_opt_args[30].opt = noudevsync_ARG;
commands[100].optional_opt_args[31].opt = reportformat_ARG;
commands[100].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[100].optional_opt_args[32].opt = select_ARG;
commands[100].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[100].optional_opt_args[33].opt = test_ARG;
commands[100].optional_opt_args[34].opt = force_ARG;
commands[100].optional_pos_args[0].pos = 1;
commands[100].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[100].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[101].name = "vgchange";
commands[101].command_line_id = "vgchange_activate";
commands[101].command_line_enum = vgchange_activate_CMD;
commands[101].fn = vgchange;
commands[101].ro_count = 1;
commands[101].rp_count = 0;
commands[101].oo_count = 41;
commands[101].op_count = 1;
commands[101].desc = "";
commands[101].usage = "vgchange --activate y|n|ay"
" [ --activationmode partial|degraded|complete, --ignoreactivationskip, --partial, --sysinit, --ignorelockingfailure, --monitor y|n, --poll y|n, --addtag Tag, --deltag Tag, --logicalvolume Number, --maxphysicalvolumes Number, --alloc contiguous|cling|normal|anywhere|inherit, --uuid, --clustered y|n, --metadatacopies all|unmanaged|Number, --vgmetadatacopies all|unmanaged|Number, --physicalextentsize Number[m|unit], --resizeable y|n, --systemid String, --locktype sanlock|dlm|none, --detachprofile, --metadataprofile String, --autobackup y|n, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --select String ]"
" [ VG|Tag ... ]";
commands[101].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[101].required_opt_args[0].opt = activate_ARG;
commands[101].required_opt_args[0].def.val_bits = val_enum_to_bit(activation_VAL);
commands[101].optional_opt_args[0].opt = commandprofile_ARG;
commands[101].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[101].optional_opt_args[1].opt = config_ARG;
commands[101].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[101].optional_opt_args[2].opt = debug_ARG;
commands[101].optional_opt_args[3].opt = driverloaded_ARG;
commands[101].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[101].optional_opt_args[4].opt = help_ARG;
commands[101].optional_opt_args[5].opt = profile_ARG;
commands[101].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[101].optional_opt_args[6].opt = quiet_ARG;
commands[101].optional_opt_args[7].opt = verbose_ARG;
commands[101].optional_opt_args[8].opt = version_ARG;
commands[101].optional_opt_args[9].opt = yes_ARG;
commands[101].optional_opt_args[10].opt = activationmode_ARG;
commands[101].optional_opt_args[10].def.val_bits = val_enum_to_bit(activationmode_VAL);
commands[101].optional_opt_args[11].opt = ignoreactivationskip_ARG;
commands[101].optional_opt_args[12].opt = partial_ARG;
commands[101].optional_opt_args[13].opt = sysinit_ARG;
commands[101].optional_opt_args[14].opt = ignorelockingfailure_ARG;
commands[101].optional_opt_args[15].opt = monitor_ARG;
commands[101].optional_opt_args[15].def.val_bits = val_enum_to_bit(bool_VAL);
commands[101].optional_opt_args[16].opt = poll_ARG;
commands[101].optional_opt_args[16].def.val_bits = val_enum_to_bit(bool_VAL);
commands[101].optional_opt_args[17].opt = addtag_ARG;
commands[101].optional_opt_args[17].def.val_bits = val_enum_to_bit(tag_VAL);
commands[101].optional_opt_args[18].opt = deltag_ARG;
commands[101].optional_opt_args[18].def.val_bits = val_enum_to_bit(tag_VAL);
commands[101].optional_opt_args[19].opt = logicalvolume_ARG;
commands[101].optional_opt_args[19].def.val_bits = val_enum_to_bit(number_VAL);
commands[101].optional_opt_args[20].opt = maxphysicalvolumes_ARG;
commands[101].optional_opt_args[20].def.val_bits = val_enum_to_bit(number_VAL);
commands[101].optional_opt_args[21].opt = alloc_ARG;
commands[101].optional_opt_args[21].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[101].optional_opt_args[22].opt = uuid_ARG;
commands[101].optional_opt_args[23].opt = clustered_ARG;
commands[101].optional_opt_args[23].def.val_bits = val_enum_to_bit(bool_VAL);
commands[101].optional_opt_args[24].opt = metadatacopies_ARG;
commands[101].optional_opt_args[24].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[101].optional_opt_args[25].opt = vgmetadatacopies_ARG;
commands[101].optional_opt_args[25].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[101].optional_opt_args[26].opt = physicalextentsize_ARG;
commands[101].optional_opt_args[26].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[101].optional_opt_args[27].opt = resizeable_ARG;
commands[101].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[101].optional_opt_args[28].opt = systemid_ARG;
commands[101].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[101].optional_opt_args[29].opt = locktype_ARG;
commands[101].optional_opt_args[29].def.val_bits = val_enum_to_bit(locktype_VAL);
commands[101].optional_opt_args[30].opt = profile_ARG;
commands[101].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[101].optional_opt_args[31].opt = detachprofile_ARG;
commands[101].optional_opt_args[32].opt = metadataprofile_ARG;
commands[101].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[101].optional_opt_args[33].opt = autobackup_ARG;
commands[101].optional_opt_args[33].def.val_bits = val_enum_to_bit(bool_VAL);
commands[101].optional_opt_args[34].opt = ignoremonitoring_ARG;
commands[101].optional_opt_args[35].opt = ignoreskippedcluster_ARG;
commands[101].optional_opt_args[36].opt = noudevsync_ARG;
commands[101].optional_opt_args[37].opt = reportformat_ARG;
commands[101].optional_opt_args[37].def.val_bits = val_enum_to_bit(string_VAL);
commands[101].optional_opt_args[38].opt = select_ARG;
commands[101].optional_opt_args[38].def.val_bits = val_enum_to_bit(string_VAL);
commands[101].optional_opt_args[39].opt = test_ARG;
commands[101].optional_opt_args[40].opt = force_ARG;
commands[101].optional_pos_args[0].pos = 1;
commands[101].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[101].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[102].name = "vgchange";
commands[102].command_line_id = "vgchange_refresh";
commands[102].command_line_enum = vgchange_refresh_CMD;
commands[102].fn = vgchange;
commands[102].ro_count = 1;
commands[102].rp_count = 0;
commands[102].oo_count = 38;
commands[102].op_count = 1;
commands[102].desc = "";
commands[102].usage = "vgchange --refresh"
" [ --sysinit, --ignorelockingfailure, --monitor y|n, --poll y|n, --addtag Tag, --deltag Tag, --logicalvolume Number, --maxphysicalvolumes Number, --alloc contiguous|cling|normal|anywhere|inherit, --uuid, --clustered y|n, --metadatacopies all|unmanaged|Number, --vgmetadatacopies all|unmanaged|Number, --physicalextentsize Number[m|unit], --resizeable y|n, --systemid String, --locktype sanlock|dlm|none, --detachprofile, --metadataprofile String, --autobackup y|n, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --select String ]"
" [ VG|Tag ... ]";
commands[102].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[102].required_opt_args[0].opt = refresh_ARG;
commands[102].optional_opt_args[0].opt = commandprofile_ARG;
commands[102].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[102].optional_opt_args[1].opt = config_ARG;
commands[102].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[102].optional_opt_args[2].opt = debug_ARG;
commands[102].optional_opt_args[3].opt = driverloaded_ARG;
commands[102].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[102].optional_opt_args[4].opt = help_ARG;
commands[102].optional_opt_args[5].opt = profile_ARG;
commands[102].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[102].optional_opt_args[6].opt = quiet_ARG;
commands[102].optional_opt_args[7].opt = verbose_ARG;
commands[102].optional_opt_args[8].opt = version_ARG;
commands[102].optional_opt_args[9].opt = yes_ARG;
commands[102].optional_opt_args[10].opt = sysinit_ARG;
commands[102].optional_opt_args[11].opt = ignorelockingfailure_ARG;
commands[102].optional_opt_args[12].opt = monitor_ARG;
commands[102].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[102].optional_opt_args[13].opt = poll_ARG;
commands[102].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[102].optional_opt_args[14].opt = addtag_ARG;
commands[102].optional_opt_args[14].def.val_bits = val_enum_to_bit(tag_VAL);
commands[102].optional_opt_args[15].opt = deltag_ARG;
commands[102].optional_opt_args[15].def.val_bits = val_enum_to_bit(tag_VAL);
commands[102].optional_opt_args[16].opt = logicalvolume_ARG;
commands[102].optional_opt_args[16].def.val_bits = val_enum_to_bit(number_VAL);
commands[102].optional_opt_args[17].opt = maxphysicalvolumes_ARG;
commands[102].optional_opt_args[17].def.val_bits = val_enum_to_bit(number_VAL);
commands[102].optional_opt_args[18].opt = alloc_ARG;
commands[102].optional_opt_args[18].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[102].optional_opt_args[19].opt = uuid_ARG;
commands[102].optional_opt_args[20].opt = clustered_ARG;
commands[102].optional_opt_args[20].def.val_bits = val_enum_to_bit(bool_VAL);
commands[102].optional_opt_args[21].opt = metadatacopies_ARG;
commands[102].optional_opt_args[21].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[102].optional_opt_args[22].opt = vgmetadatacopies_ARG;
commands[102].optional_opt_args[22].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[102].optional_opt_args[23].opt = physicalextentsize_ARG;
commands[102].optional_opt_args[23].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[102].optional_opt_args[24].opt = resizeable_ARG;
commands[102].optional_opt_args[24].def.val_bits = val_enum_to_bit(bool_VAL);
commands[102].optional_opt_args[25].opt = systemid_ARG;
commands[102].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[102].optional_opt_args[26].opt = locktype_ARG;
commands[102].optional_opt_args[26].def.val_bits = val_enum_to_bit(locktype_VAL);
commands[102].optional_opt_args[27].opt = profile_ARG;
commands[102].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[102].optional_opt_args[28].opt = detachprofile_ARG;
commands[102].optional_opt_args[29].opt = metadataprofile_ARG;
commands[102].optional_opt_args[29].def.val_bits = val_enum_to_bit(string_VAL);
commands[102].optional_opt_args[30].opt = autobackup_ARG;
commands[102].optional_opt_args[30].def.val_bits = val_enum_to_bit(bool_VAL);
commands[102].optional_opt_args[31].opt = ignoremonitoring_ARG;
commands[102].optional_opt_args[32].opt = ignoreskippedcluster_ARG;
commands[102].optional_opt_args[33].opt = noudevsync_ARG;
commands[102].optional_opt_args[34].opt = reportformat_ARG;
commands[102].optional_opt_args[34].def.val_bits = val_enum_to_bit(string_VAL);
commands[102].optional_opt_args[35].opt = select_ARG;
commands[102].optional_opt_args[35].def.val_bits = val_enum_to_bit(string_VAL);
commands[102].optional_opt_args[36].opt = test_ARG;
commands[102].optional_opt_args[37].opt = force_ARG;
commands[102].optional_pos_args[0].pos = 1;
commands[102].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[102].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[103].name = "vgchange";
commands[103].command_line_id = "vgchange_lockstart";
commands[103].command_line_enum = vgchange_lockstart_CMD;
commands[103].fn = vgchange;
commands[103].ro_count = 1;
commands[103].rp_count = 0;
commands[103].oo_count = 35;
commands[103].op_count = 1;
commands[103].desc = "";
commands[103].usage = "vgchange --lockstart"
" [ --lockopt String, --addtag Tag, --deltag Tag, --logicalvolume Number, --maxphysicalvolumes Number, --alloc contiguous|cling|normal|anywhere|inherit, --uuid, --clustered y|n, --metadatacopies all|unmanaged|Number, --vgmetadatacopies all|unmanaged|Number, --physicalextentsize Number[m|unit], --resizeable y|n, --systemid String, --locktype sanlock|dlm|none, --detachprofile, --metadataprofile String, --autobackup y|n, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --select String ]"
" [ VG|Tag ... ]";
commands[103].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[103].required_opt_args[0].opt = lockstart_ARG;
commands[103].optional_opt_args[0].opt = commandprofile_ARG;
commands[103].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[1].opt = config_ARG;
commands[103].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[2].opt = debug_ARG;
commands[103].optional_opt_args[3].opt = driverloaded_ARG;
commands[103].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[103].optional_opt_args[4].opt = help_ARG;
commands[103].optional_opt_args[5].opt = profile_ARG;
commands[103].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[6].opt = quiet_ARG;
commands[103].optional_opt_args[7].opt = verbose_ARG;
commands[103].optional_opt_args[8].opt = version_ARG;
commands[103].optional_opt_args[9].opt = yes_ARG;
commands[103].optional_opt_args[10].opt = lockopt_ARG;
commands[103].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[11].opt = addtag_ARG;
commands[103].optional_opt_args[11].def.val_bits = val_enum_to_bit(tag_VAL);
commands[103].optional_opt_args[12].opt = deltag_ARG;
commands[103].optional_opt_args[12].def.val_bits = val_enum_to_bit(tag_VAL);
commands[103].optional_opt_args[13].opt = logicalvolume_ARG;
commands[103].optional_opt_args[13].def.val_bits = val_enum_to_bit(number_VAL);
commands[103].optional_opt_args[14].opt = maxphysicalvolumes_ARG;
commands[103].optional_opt_args[14].def.val_bits = val_enum_to_bit(number_VAL);
commands[103].optional_opt_args[15].opt = alloc_ARG;
commands[103].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[103].optional_opt_args[16].opt = uuid_ARG;
commands[103].optional_opt_args[17].opt = clustered_ARG;
commands[103].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[103].optional_opt_args[18].opt = metadatacopies_ARG;
commands[103].optional_opt_args[18].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[103].optional_opt_args[19].opt = vgmetadatacopies_ARG;
commands[103].optional_opt_args[19].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[103].optional_opt_args[20].opt = physicalextentsize_ARG;
commands[103].optional_opt_args[20].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[103].optional_opt_args[21].opt = resizeable_ARG;
commands[103].optional_opt_args[21].def.val_bits = val_enum_to_bit(bool_VAL);
commands[103].optional_opt_args[22].opt = systemid_ARG;
commands[103].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[23].opt = locktype_ARG;
commands[103].optional_opt_args[23].def.val_bits = val_enum_to_bit(locktype_VAL);
commands[103].optional_opt_args[24].opt = profile_ARG;
commands[103].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[25].opt = detachprofile_ARG;
commands[103].optional_opt_args[26].opt = metadataprofile_ARG;
commands[103].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[27].opt = autobackup_ARG;
commands[103].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[103].optional_opt_args[28].opt = ignoremonitoring_ARG;
commands[103].optional_opt_args[29].opt = ignoreskippedcluster_ARG;
commands[103].optional_opt_args[30].opt = noudevsync_ARG;
commands[103].optional_opt_args[31].opt = reportformat_ARG;
commands[103].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[32].opt = select_ARG;
commands[103].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[103].optional_opt_args[33].opt = test_ARG;
commands[103].optional_opt_args[34].opt = force_ARG;
commands[103].optional_pos_args[0].pos = 1;
commands[103].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[103].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[104].name = "vgchange";
commands[104].command_line_id = "vgchange_lockstop";
commands[104].command_line_enum = vgchange_lockstop_CMD;
commands[104].fn = vgchange;
commands[104].ro_count = 1;
commands[104].rp_count = 0;
commands[104].oo_count = 35;
commands[104].op_count = 1;
commands[104].desc = "";
commands[104].usage = "vgchange --lockstop"
" [ --lockopt String, --addtag Tag, --deltag Tag, --logicalvolume Number, --maxphysicalvolumes Number, --alloc contiguous|cling|normal|anywhere|inherit, --uuid, --clustered y|n, --metadatacopies all|unmanaged|Number, --vgmetadatacopies all|unmanaged|Number, --physicalextentsize Number[m|unit], --resizeable y|n, --systemid String, --locktype sanlock|dlm|none, --detachprofile, --metadataprofile String, --autobackup y|n, --ignoremonitoring, --ignoreskippedcluster, --reportformat String, --select String ]"
" [ VG|Tag ... ]";
commands[104].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[104].required_opt_args[0].opt = lockstop_ARG;
commands[104].optional_opt_args[0].opt = commandprofile_ARG;
commands[104].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[1].opt = config_ARG;
commands[104].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[2].opt = debug_ARG;
commands[104].optional_opt_args[3].opt = driverloaded_ARG;
commands[104].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[104].optional_opt_args[4].opt = help_ARG;
commands[104].optional_opt_args[5].opt = profile_ARG;
commands[104].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[6].opt = quiet_ARG;
commands[104].optional_opt_args[7].opt = verbose_ARG;
commands[104].optional_opt_args[8].opt = version_ARG;
commands[104].optional_opt_args[9].opt = yes_ARG;
commands[104].optional_opt_args[10].opt = lockopt_ARG;
commands[104].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[11].opt = addtag_ARG;
commands[104].optional_opt_args[11].def.val_bits = val_enum_to_bit(tag_VAL);
commands[104].optional_opt_args[12].opt = deltag_ARG;
commands[104].optional_opt_args[12].def.val_bits = val_enum_to_bit(tag_VAL);
commands[104].optional_opt_args[13].opt = logicalvolume_ARG;
commands[104].optional_opt_args[13].def.val_bits = val_enum_to_bit(number_VAL);
commands[104].optional_opt_args[14].opt = maxphysicalvolumes_ARG;
commands[104].optional_opt_args[14].def.val_bits = val_enum_to_bit(number_VAL);
commands[104].optional_opt_args[15].opt = alloc_ARG;
commands[104].optional_opt_args[15].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[104].optional_opt_args[16].opt = uuid_ARG;
commands[104].optional_opt_args[17].opt = clustered_ARG;
commands[104].optional_opt_args[17].def.val_bits = val_enum_to_bit(bool_VAL);
commands[104].optional_opt_args[18].opt = metadatacopies_ARG;
commands[104].optional_opt_args[18].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[104].optional_opt_args[19].opt = vgmetadatacopies_ARG;
commands[104].optional_opt_args[19].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[104].optional_opt_args[20].opt = physicalextentsize_ARG;
commands[104].optional_opt_args[20].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[104].optional_opt_args[21].opt = resizeable_ARG;
commands[104].optional_opt_args[21].def.val_bits = val_enum_to_bit(bool_VAL);
commands[104].optional_opt_args[22].opt = systemid_ARG;
commands[104].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[23].opt = locktype_ARG;
commands[104].optional_opt_args[23].def.val_bits = val_enum_to_bit(locktype_VAL);
commands[104].optional_opt_args[24].opt = profile_ARG;
commands[104].optional_opt_args[24].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[25].opt = detachprofile_ARG;
commands[104].optional_opt_args[26].opt = metadataprofile_ARG;
commands[104].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[27].opt = autobackup_ARG;
commands[104].optional_opt_args[27].def.val_bits = val_enum_to_bit(bool_VAL);
commands[104].optional_opt_args[28].opt = ignoremonitoring_ARG;
commands[104].optional_opt_args[29].opt = ignoreskippedcluster_ARG;
commands[104].optional_opt_args[30].opt = noudevsync_ARG;
commands[104].optional_opt_args[31].opt = reportformat_ARG;
commands[104].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[32].opt = select_ARG;
commands[104].optional_opt_args[32].def.val_bits = val_enum_to_bit(string_VAL);
commands[104].optional_opt_args[33].opt = test_ARG;
commands[104].optional_opt_args[34].opt = force_ARG;
commands[104].optional_pos_args[0].pos = 1;
commands[104].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[104].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[105].name = "vgck";
commands[105].command_line_id = "vgck_general";
commands[105].command_line_enum = vgck_general_CMD;
commands[105].fn = vgck;
commands[105].ro_count = 0;
commands[105].rp_count = 0;
commands[105].oo_count = 11;
commands[105].op_count = 1;
commands[105].desc = "";
commands[105].usage = "vgck"
" [ --reportformat String ]"
" [ VG|Tag ... ]";
commands[105].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[105].optional_opt_args[0].opt = commandprofile_ARG;
commands[105].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[105].optional_opt_args[1].opt = config_ARG;
commands[105].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[105].optional_opt_args[2].opt = debug_ARG;
commands[105].optional_opt_args[3].opt = driverloaded_ARG;
commands[105].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[105].optional_opt_args[4].opt = help_ARG;
commands[105].optional_opt_args[5].opt = profile_ARG;
commands[105].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[105].optional_opt_args[6].opt = quiet_ARG;
commands[105].optional_opt_args[7].opt = verbose_ARG;
commands[105].optional_opt_args[8].opt = version_ARG;
commands[105].optional_opt_args[9].opt = yes_ARG;
commands[105].optional_opt_args[10].opt = reportformat_ARG;
commands[105].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[105].optional_pos_args[0].pos = 1;
commands[105].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[105].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[106].name = "vgconvert";
commands[106].command_line_id = "vgconvert_general";
commands[106].command_line_enum = vgconvert_general_CMD;
commands[106].fn = vgconvert;
commands[106].ro_count = 0;
commands[106].rp_count = 1;
commands[106].oo_count = 18;
commands[106].op_count = 0;
commands[106].desc = "";
commands[106].usage = "vgconvert VG ..."
" [ --labelsector Number, --bootloaderareasize Number[m|unit], --metadatatype lvm2|lvm1, --pvmetadatacopies Number, --metadatasize Number[m|unit], --reportformat String ]";
commands[106].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[106].required_pos_args[0].pos = 1;
commands[106].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[106].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[106].optional_opt_args[0].opt = commandprofile_ARG;
commands[106].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[106].optional_opt_args[1].opt = config_ARG;
commands[106].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[106].optional_opt_args[2].opt = debug_ARG;
commands[106].optional_opt_args[3].opt = driverloaded_ARG;
commands[106].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[106].optional_opt_args[4].opt = help_ARG;
commands[106].optional_opt_args[5].opt = profile_ARG;
commands[106].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[106].optional_opt_args[6].opt = quiet_ARG;
commands[106].optional_opt_args[7].opt = verbose_ARG;
commands[106].optional_opt_args[8].opt = version_ARG;
commands[106].optional_opt_args[9].opt = yes_ARG;
commands[106].optional_opt_args[10].opt = force_ARG;
commands[106].optional_opt_args[11].opt = test_ARG;
commands[106].optional_opt_args[12].opt = labelsector_ARG;
commands[106].optional_opt_args[12].def.val_bits = val_enum_to_bit(number_VAL);
commands[106].optional_opt_args[13].opt = bootloaderareasize_ARG;
commands[106].optional_opt_args[13].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[106].optional_opt_args[14].opt = metadatatype_ARG;
commands[106].optional_opt_args[14].def.val_bits = val_enum_to_bit(metadatatype_VAL);
commands[106].optional_opt_args[15].opt = pvmetadatacopies_ARG;
commands[106].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[106].optional_opt_args[16].opt = metadatasize_ARG;
commands[106].optional_opt_args[16].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[106].optional_opt_args[17].opt = reportformat_ARG;
commands[106].optional_opt_args[17].def.val_bits = val_enum_to_bit(string_VAL);

commands[107].name = "vgcreate";
commands[107].command_line_id = "vgcreate_general";
commands[107].command_line_enum = vgcreate_general_CMD;
commands[107].fn = vgcreate;
commands[107].ro_count = 0;
commands[107].rp_count = 2;
commands[107].oo_count = 34;
commands[107].op_count = 0;
commands[107].desc = "";
commands[107].usage = "vgcreate VG_new PV ..."
" [ --addtag Tag, --alloc contiguous|cling|normal|anywhere|inherit, --autobackup y|n, --clustered y|n, --maxlogicalvolumes Number, --maxphysicalvolumes Number, --metadataprofile String, --metadatatype lvm2|lvm1, --physicalextentsize Number[m|unit], --zero y|n, --labelsector Number, --metadatasize Number[m|unit], --pvmetadatacopies Number, --reportformat String, --metadatacopies all|unmanaged|Number, --vgmetadatacopies all|unmanaged|Number, --dataalignment Number[k|unit], --dataalignmentoffset Number[k|unit], --shared, --systemid String, --locktype sanlock|dlm|none, --lockopt String ]";
commands[107].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[107].required_pos_args[0].pos = 1;
commands[107].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[107].required_pos_args[0].def.flags = ARG_DEF_FLAG_NEW;
commands[107].required_pos_args[1].pos = 2;
commands[107].required_pos_args[1].def.val_bits = val_enum_to_bit(pv_VAL);
commands[107].required_pos_args[1].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[107].optional_opt_args[0].opt = commandprofile_ARG;
commands[107].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[107].optional_opt_args[1].opt = config_ARG;
commands[107].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[107].optional_opt_args[2].opt = debug_ARG;
commands[107].optional_opt_args[3].opt = driverloaded_ARG;
commands[107].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[107].optional_opt_args[4].opt = help_ARG;
commands[107].optional_opt_args[5].opt = profile_ARG;
commands[107].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[107].optional_opt_args[6].opt = quiet_ARG;
commands[107].optional_opt_args[7].opt = verbose_ARG;
commands[107].optional_opt_args[8].opt = version_ARG;
commands[107].optional_opt_args[9].opt = yes_ARG;
commands[107].optional_opt_args[10].opt = addtag_ARG;
commands[107].optional_opt_args[10].def.val_bits = val_enum_to_bit(tag_VAL);
commands[107].optional_opt_args[11].opt = alloc_ARG;
commands[107].optional_opt_args[11].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[107].optional_opt_args[12].opt = autobackup_ARG;
commands[107].optional_opt_args[12].def.val_bits = val_enum_to_bit(bool_VAL);
commands[107].optional_opt_args[13].opt = clustered_ARG;
commands[107].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[107].optional_opt_args[14].opt = maxlogicalvolumes_ARG;
commands[107].optional_opt_args[14].def.val_bits = val_enum_to_bit(number_VAL);
commands[107].optional_opt_args[15].opt = maxphysicalvolumes_ARG;
commands[107].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[107].optional_opt_args[16].opt = metadataprofile_ARG;
commands[107].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[107].optional_opt_args[17].opt = metadatatype_ARG;
commands[107].optional_opt_args[17].def.val_bits = val_enum_to_bit(metadatatype_VAL);
commands[107].optional_opt_args[18].opt = physicalextentsize_ARG;
commands[107].optional_opt_args[18].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[107].optional_opt_args[19].opt = test_ARG;
commands[107].optional_opt_args[20].opt = force_ARG;
commands[107].optional_opt_args[21].opt = zero_ARG;
commands[107].optional_opt_args[21].def.val_bits = val_enum_to_bit(bool_VAL);
commands[107].optional_opt_args[22].opt = labelsector_ARG;
commands[107].optional_opt_args[22].def.val_bits = val_enum_to_bit(number_VAL);
commands[107].optional_opt_args[23].opt = metadatasize_ARG;
commands[107].optional_opt_args[23].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[107].optional_opt_args[24].opt = pvmetadatacopies_ARG;
commands[107].optional_opt_args[24].def.val_bits = val_enum_to_bit(number_VAL);
commands[107].optional_opt_args[25].opt = reportformat_ARG;
commands[107].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[107].optional_opt_args[26].opt = metadatacopies_ARG;
commands[107].optional_opt_args[26].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[107].optional_opt_args[27].opt = vgmetadatacopies_ARG;
commands[107].optional_opt_args[27].def.val_bits = val_enum_to_bit(metadatacopies_VAL);
commands[107].optional_opt_args[28].opt = dataalignment_ARG;
commands[107].optional_opt_args[28].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[107].optional_opt_args[29].opt = dataalignmentoffset_ARG;
commands[107].optional_opt_args[29].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[107].optional_opt_args[30].opt = shared_ARG;
commands[107].optional_opt_args[31].opt = systemid_ARG;
commands[107].optional_opt_args[31].def.val_bits = val_enum_to_bit(string_VAL);
commands[107].optional_opt_args[32].opt = locktype_ARG;
commands[107].optional_opt_args[32].def.val_bits = val_enum_to_bit(locktype_VAL);
commands[107].optional_opt_args[33].opt = lockopt_ARG;
commands[107].optional_opt_args[33].def.val_bits = val_enum_to_bit(string_VAL);

commands[108].name = "vgdisplay";
commands[108].command_line_id = "vgdisplay_general";
commands[108].command_line_enum = vgdisplay_general_CMD;
commands[108].fn = vgdisplay;
commands[108].ro_count = 0;
commands[108].rp_count = 0;
commands[108].oo_count = 33;
commands[108].op_count = 1;
commands[108].desc = "";
commands[108].usage = "vgdisplay"
" [ --activevolumegroups, --aligned, --binary, --colon, --columns, --configreport String, --foreign, --ignorelockingfailure, --ignoreskippedcluster, --logonly, --noheadings, --nosuffix, --options String, --partial, --readonly, --reportformat String, --select String, --shared, --short, --separator String, --sort String, --unbuffered, --units hHbBsSkKmMgGtTpPeE ]"
" [ VG|Tag ... ]";
commands[108].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[108].optional_opt_args[0].opt = commandprofile_ARG;
commands[108].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[1].opt = config_ARG;
commands[108].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[2].opt = debug_ARG;
commands[108].optional_opt_args[3].opt = driverloaded_ARG;
commands[108].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[108].optional_opt_args[4].opt = help_ARG;
commands[108].optional_opt_args[5].opt = profile_ARG;
commands[108].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[6].opt = quiet_ARG;
commands[108].optional_opt_args[7].opt = verbose_ARG;
commands[108].optional_opt_args[8].opt = version_ARG;
commands[108].optional_opt_args[9].opt = yes_ARG;
commands[108].optional_opt_args[10].opt = activevolumegroups_ARG;
commands[108].optional_opt_args[11].opt = aligned_ARG;
commands[108].optional_opt_args[12].opt = binary_ARG;
commands[108].optional_opt_args[13].opt = colon_ARG;
commands[108].optional_opt_args[14].opt = columns_ARG;
commands[108].optional_opt_args[15].opt = configreport_ARG;
commands[108].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[16].opt = foreign_ARG;
commands[108].optional_opt_args[17].opt = ignorelockingfailure_ARG;
commands[108].optional_opt_args[18].opt = ignoreskippedcluster_ARG;
commands[108].optional_opt_args[19].opt = logonly_ARG;
commands[108].optional_opt_args[20].opt = noheadings_ARG;
commands[108].optional_opt_args[21].opt = nosuffix_ARG;
commands[108].optional_opt_args[22].opt = options_ARG;
commands[108].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[23].opt = partial_ARG;
commands[108].optional_opt_args[24].opt = readonly_ARG;
commands[108].optional_opt_args[25].opt = reportformat_ARG;
commands[108].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[26].opt = select_ARG;
commands[108].optional_opt_args[26].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[27].opt = shared_ARG;
commands[108].optional_opt_args[28].opt = short_ARG;
commands[108].optional_opt_args[29].opt = separator_ARG;
commands[108].optional_opt_args[29].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[30].opt = sort_ARG;
commands[108].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[108].optional_opt_args[31].opt = unbuffered_ARG;
commands[108].optional_opt_args[32].opt = units_ARG;
commands[108].optional_opt_args[32].def.val_bits = val_enum_to_bit(units_VAL);
commands[108].optional_pos_args[0].pos = 1;
commands[108].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[108].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[109].name = "vgexport";
commands[109].command_line_id = "vgexport_some";
commands[109].command_line_enum = vgexport_some_CMD;
commands[109].fn = vgexport;
commands[109].ro_count = 0;
commands[109].rp_count = 1;
commands[109].oo_count = 13;
commands[109].op_count = 0;
commands[109].desc = "";
commands[109].usage = "vgexport VG|Tag|Select ..."
" [ --select String, --reportformat String ]";
commands[109].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[109].required_pos_args[0].pos = 1;
commands[109].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[109].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[109].optional_opt_args[0].opt = commandprofile_ARG;
commands[109].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[109].optional_opt_args[1].opt = config_ARG;
commands[109].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[109].optional_opt_args[2].opt = debug_ARG;
commands[109].optional_opt_args[3].opt = driverloaded_ARG;
commands[109].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[109].optional_opt_args[4].opt = help_ARG;
commands[109].optional_opt_args[5].opt = profile_ARG;
commands[109].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[109].optional_opt_args[6].opt = quiet_ARG;
commands[109].optional_opt_args[7].opt = verbose_ARG;
commands[109].optional_opt_args[8].opt = version_ARG;
commands[109].optional_opt_args[9].opt = yes_ARG;
commands[109].optional_opt_args[10].opt = select_ARG;
commands[109].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[109].optional_opt_args[11].opt = reportformat_ARG;
commands[109].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[109].optional_opt_args[12].opt = test_ARG;

commands[110].name = "vgexport";
commands[110].command_line_id = "vgexport_all";
commands[110].command_line_enum = vgexport_all_CMD;
commands[110].fn = vgexport;
commands[110].ro_count = 1;
commands[110].rp_count = 0;
commands[110].oo_count = 12;
commands[110].op_count = 0;
commands[110].desc = "";
commands[110].usage = "vgexport --all"
" [ --reportformat String ]";
commands[110].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[110].required_opt_args[0].opt = all_ARG;
commands[110].optional_opt_args[0].opt = commandprofile_ARG;
commands[110].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[110].optional_opt_args[1].opt = config_ARG;
commands[110].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[110].optional_opt_args[2].opt = debug_ARG;
commands[110].optional_opt_args[3].opt = driverloaded_ARG;
commands[110].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[110].optional_opt_args[4].opt = help_ARG;
commands[110].optional_opt_args[5].opt = profile_ARG;
commands[110].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[110].optional_opt_args[6].opt = quiet_ARG;
commands[110].optional_opt_args[7].opt = verbose_ARG;
commands[110].optional_opt_args[8].opt = version_ARG;
commands[110].optional_opt_args[9].opt = yes_ARG;
commands[110].optional_opt_args[10].opt = reportformat_ARG;
commands[110].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[110].optional_opt_args[11].opt = test_ARG;

commands[111].name = "vgextend";
commands[111].command_line_id = "vgextend_general";
commands[111].command_line_enum = vgextend_general_CMD;
commands[111].fn = vgextend;
commands[111].ro_count = 0;
commands[111].rp_count = 2;
commands[111].oo_count = 23;
commands[111].op_count = 0;
commands[111].desc = "";
commands[111].usage = "vgextend VG PV ..."
" [ --autobackup y|n, --zero y|n, --labelsector Number, --metadatatype lvm2|lvm1, --metadatasize Number[m|unit], --pvmetadatacopies Number, --metadataignore y|n, --dataalignment Number[k|unit], --dataalignmentoffset Number[k|unit], --reportformat String, --restoremissing ]";
commands[111].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[111].required_pos_args[0].pos = 1;
commands[111].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[111].required_pos_args[1].pos = 2;
commands[111].required_pos_args[1].def.val_bits = val_enum_to_bit(pv_VAL);
commands[111].required_pos_args[1].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[111].optional_opt_args[0].opt = commandprofile_ARG;
commands[111].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[111].optional_opt_args[1].opt = config_ARG;
commands[111].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[111].optional_opt_args[2].opt = debug_ARG;
commands[111].optional_opt_args[3].opt = driverloaded_ARG;
commands[111].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[111].optional_opt_args[4].opt = help_ARG;
commands[111].optional_opt_args[5].opt = profile_ARG;
commands[111].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[111].optional_opt_args[6].opt = quiet_ARG;
commands[111].optional_opt_args[7].opt = verbose_ARG;
commands[111].optional_opt_args[8].opt = version_ARG;
commands[111].optional_opt_args[9].opt = yes_ARG;
commands[111].optional_opt_args[10].opt = autobackup_ARG;
commands[111].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[111].optional_opt_args[11].opt = test_ARG;
commands[111].optional_opt_args[12].opt = force_ARG;
commands[111].optional_opt_args[13].opt = zero_ARG;
commands[111].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[111].optional_opt_args[14].opt = labelsector_ARG;
commands[111].optional_opt_args[14].def.val_bits = val_enum_to_bit(number_VAL);
commands[111].optional_opt_args[15].opt = metadatatype_ARG;
commands[111].optional_opt_args[15].def.val_bits = val_enum_to_bit(metadatatype_VAL);
commands[111].optional_opt_args[16].opt = metadatasize_ARG;
commands[111].optional_opt_args[16].def.val_bits = val_enum_to_bit(sizemb_VAL);
commands[111].optional_opt_args[17].opt = pvmetadatacopies_ARG;
commands[111].optional_opt_args[17].def.val_bits = val_enum_to_bit(number_VAL);
commands[111].optional_opt_args[18].opt = metadataignore_ARG;
commands[111].optional_opt_args[18].def.val_bits = val_enum_to_bit(bool_VAL);
commands[111].optional_opt_args[19].opt = dataalignment_ARG;
commands[111].optional_opt_args[19].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[111].optional_opt_args[20].opt = dataalignmentoffset_ARG;
commands[111].optional_opt_args[20].def.val_bits = val_enum_to_bit(sizekb_VAL);
commands[111].optional_opt_args[21].opt = reportformat_ARG;
commands[111].optional_opt_args[21].def.val_bits = val_enum_to_bit(string_VAL);
commands[111].optional_opt_args[22].opt = restoremissing_ARG;

commands[112].name = "vgimport";
commands[112].command_line_id = "vgimport_some";
commands[112].command_line_enum = vgimport_some_CMD;
commands[112].fn = vgimport;
commands[112].ro_count = 0;
commands[112].rp_count = 1;
commands[112].oo_count = 14;
commands[112].op_count = 0;
commands[112].desc = "";
commands[112].usage = "vgimport VG|Tag|Select ..."
" [ --select String, --reportformat String ]";
commands[112].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[112].required_pos_args[0].pos = 1;
commands[112].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[112].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[112].optional_opt_args[0].opt = commandprofile_ARG;
commands[112].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[112].optional_opt_args[1].opt = config_ARG;
commands[112].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[112].optional_opt_args[2].opt = debug_ARG;
commands[112].optional_opt_args[3].opt = driverloaded_ARG;
commands[112].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[112].optional_opt_args[4].opt = help_ARG;
commands[112].optional_opt_args[5].opt = profile_ARG;
commands[112].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[112].optional_opt_args[6].opt = quiet_ARG;
commands[112].optional_opt_args[7].opt = verbose_ARG;
commands[112].optional_opt_args[8].opt = version_ARG;
commands[112].optional_opt_args[9].opt = yes_ARG;
commands[112].optional_opt_args[10].opt = select_ARG;
commands[112].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[112].optional_opt_args[11].opt = force_ARG;
commands[112].optional_opt_args[12].opt = reportformat_ARG;
commands[112].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[112].optional_opt_args[13].opt = test_ARG;

commands[113].name = "vgimport";
commands[113].command_line_id = "vgimport_all";
commands[113].command_line_enum = vgimport_all_CMD;
commands[113].fn = vgimport;
commands[113].ro_count = 1;
commands[113].rp_count = 0;
commands[113].oo_count = 13;
commands[113].op_count = 0;
commands[113].desc = "";
commands[113].usage = "vgimport --all"
" [ --reportformat String ]";
commands[113].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[113].required_opt_args[0].opt = all_ARG;
commands[113].optional_opt_args[0].opt = commandprofile_ARG;
commands[113].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[113].optional_opt_args[1].opt = config_ARG;
commands[113].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[113].optional_opt_args[2].opt = debug_ARG;
commands[113].optional_opt_args[3].opt = driverloaded_ARG;
commands[113].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[113].optional_opt_args[4].opt = help_ARG;
commands[113].optional_opt_args[5].opt = profile_ARG;
commands[113].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[113].optional_opt_args[6].opt = quiet_ARG;
commands[113].optional_opt_args[7].opt = verbose_ARG;
commands[113].optional_opt_args[8].opt = version_ARG;
commands[113].optional_opt_args[9].opt = yes_ARG;
commands[113].optional_opt_args[10].opt = force_ARG;
commands[113].optional_opt_args[11].opt = reportformat_ARG;
commands[113].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[113].optional_opt_args[12].opt = test_ARG;

commands[114].name = "vgimportclone";
commands[114].command_line_id = "vgimportclone_general";
commands[114].command_line_enum = vgimportclone_general_CMD;
commands[114].fn = vgimportclone;
commands[114].ro_count = 0;
commands[114].rp_count = 1;
commands[114].oo_count = 13;
commands[114].op_count = 0;
commands[114].desc = "";
commands[114].usage = "vgimportclone PV ..."
" [ --basevgname VG, --import ]";
commands[114].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[114].required_pos_args[0].pos = 1;
commands[114].required_pos_args[0].def.val_bits = val_enum_to_bit(pv_VAL);
commands[114].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[114].optional_opt_args[0].opt = commandprofile_ARG;
commands[114].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[114].optional_opt_args[1].opt = config_ARG;
commands[114].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[114].optional_opt_args[2].opt = debug_ARG;
commands[114].optional_opt_args[3].opt = driverloaded_ARG;
commands[114].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[114].optional_opt_args[4].opt = help_ARG;
commands[114].optional_opt_args[5].opt = profile_ARG;
commands[114].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[114].optional_opt_args[6].opt = quiet_ARG;
commands[114].optional_opt_args[7].opt = verbose_ARG;
commands[114].optional_opt_args[8].opt = version_ARG;
commands[114].optional_opt_args[9].opt = yes_ARG;
commands[114].optional_opt_args[10].opt = basevgname_ARG;
commands[114].optional_opt_args[10].def.val_bits = val_enum_to_bit(vg_VAL);
commands[114].optional_opt_args[11].opt = test_ARG;
commands[114].optional_opt_args[12].opt = import_ARG;

commands[115].name = "vgmerge";
commands[115].command_line_id = "vgmerge_general";
commands[115].command_line_enum = vgmerge_general_CMD;
commands[115].fn = vgmerge;
commands[115].ro_count = 0;
commands[115].rp_count = 2;
commands[115].oo_count = 13;
commands[115].op_count = 0;
commands[115].desc = "";
commands[115].usage = "vgmerge VG VG"
" [ --autobackup y|n, --list ]";
commands[115].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[115].required_pos_args[0].pos = 1;
commands[115].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[115].required_pos_args[1].pos = 2;
commands[115].required_pos_args[1].def.val_bits = val_enum_to_bit(vg_VAL);
commands[115].optional_opt_args[0].opt = commandprofile_ARG;
commands[115].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[115].optional_opt_args[1].opt = config_ARG;
commands[115].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[115].optional_opt_args[2].opt = debug_ARG;
commands[115].optional_opt_args[3].opt = driverloaded_ARG;
commands[115].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[115].optional_opt_args[4].opt = help_ARG;
commands[115].optional_opt_args[5].opt = profile_ARG;
commands[115].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[115].optional_opt_args[6].opt = quiet_ARG;
commands[115].optional_opt_args[7].opt = verbose_ARG;
commands[115].optional_opt_args[8].opt = version_ARG;
commands[115].optional_opt_args[9].opt = yes_ARG;
commands[115].optional_opt_args[10].opt = autobackup_ARG;
commands[115].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[115].optional_opt_args[11].opt = list_ARG;
commands[115].optional_opt_args[12].opt = test_ARG;

commands[116].name = "vgmknodes";
commands[116].command_line_id = "vgmknodes_general";
commands[116].command_line_enum = vgmknodes_general_CMD;
commands[116].fn = vgmknodes;
commands[116].ro_count = 0;
commands[116].rp_count = 0;
commands[116].oo_count = 13;
commands[116].op_count = 1;
commands[116].desc = "";
commands[116].usage = "vgmknodes"
" [ --ignorelockingfailure, --refresh, --reportformat String ]"
" [ VG|LV|Tag ... ]";
commands[116].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[116].optional_opt_args[0].opt = commandprofile_ARG;
commands[116].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[116].optional_opt_args[1].opt = config_ARG;
commands[116].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[116].optional_opt_args[2].opt = debug_ARG;
commands[116].optional_opt_args[3].opt = driverloaded_ARG;
commands[116].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[116].optional_opt_args[4].opt = help_ARG;
commands[116].optional_opt_args[5].opt = profile_ARG;
commands[116].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[116].optional_opt_args[6].opt = quiet_ARG;
commands[116].optional_opt_args[7].opt = verbose_ARG;
commands[116].optional_opt_args[8].opt = version_ARG;
commands[116].optional_opt_args[9].opt = yes_ARG;
commands[116].optional_opt_args[10].opt = ignorelockingfailure_ARG;
commands[116].optional_opt_args[11].opt = refresh_ARG;
commands[116].optional_opt_args[12].opt = reportformat_ARG;
commands[116].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[116].optional_pos_args[0].pos = 1;
commands[116].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(lv_VAL) | val_enum_to_bit(tag_VAL);
commands[116].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[117].name = "vgreduce";
commands[117].command_line_id = "vgreduce_by_pv";
commands[117].command_line_enum = vgreduce_by_pv_CMD;
commands[117].fn = vgreduce;
commands[117].ro_count = 0;
commands[117].rp_count = 2;
commands[117].oo_count = 14;
commands[117].op_count = 0;
commands[117].desc = "";
commands[117].usage = "vgreduce VG PV ..."
" [ --autobackup y|n, --reportformat String ]";
commands[117].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[117].required_pos_args[0].pos = 1;
commands[117].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[117].required_pos_args[1].pos = 2;
commands[117].required_pos_args[1].def.val_bits = val_enum_to_bit(pv_VAL);
commands[117].required_pos_args[1].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[117].optional_opt_args[0].opt = commandprofile_ARG;
commands[117].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[117].optional_opt_args[1].opt = config_ARG;
commands[117].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[117].optional_opt_args[2].opt = debug_ARG;
commands[117].optional_opt_args[3].opt = driverloaded_ARG;
commands[117].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[117].optional_opt_args[4].opt = help_ARG;
commands[117].optional_opt_args[5].opt = profile_ARG;
commands[117].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[117].optional_opt_args[6].opt = quiet_ARG;
commands[117].optional_opt_args[7].opt = verbose_ARG;
commands[117].optional_opt_args[8].opt = version_ARG;
commands[117].optional_opt_args[9].opt = yes_ARG;
commands[117].optional_opt_args[10].opt = autobackup_ARG;
commands[117].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[117].optional_opt_args[11].opt = force_ARG;
commands[117].optional_opt_args[12].opt = reportformat_ARG;
commands[117].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[117].optional_opt_args[13].opt = test_ARG;

commands[118].name = "vgreduce";
commands[118].command_line_id = "vgreduce_all";
commands[118].command_line_enum = vgreduce_all_CMD;
commands[118].fn = vgreduce;
commands[118].ro_count = 1;
commands[118].rp_count = 1;
commands[118].oo_count = 14;
commands[118].op_count = 0;
commands[118].desc = "";
commands[118].usage = "vgreduce --all VG"
" [ --autobackup y|n, --reportformat String ]";
commands[118].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[118].required_opt_args[0].opt = all_ARG;
commands[118].required_pos_args[0].pos = 1;
commands[118].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[118].optional_opt_args[0].opt = commandprofile_ARG;
commands[118].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[118].optional_opt_args[1].opt = config_ARG;
commands[118].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[118].optional_opt_args[2].opt = debug_ARG;
commands[118].optional_opt_args[3].opt = driverloaded_ARG;
commands[118].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[118].optional_opt_args[4].opt = help_ARG;
commands[118].optional_opt_args[5].opt = profile_ARG;
commands[118].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[118].optional_opt_args[6].opt = quiet_ARG;
commands[118].optional_opt_args[7].opt = verbose_ARG;
commands[118].optional_opt_args[8].opt = version_ARG;
commands[118].optional_opt_args[9].opt = yes_ARG;
commands[118].optional_opt_args[10].opt = autobackup_ARG;
commands[118].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[118].optional_opt_args[11].opt = force_ARG;
commands[118].optional_opt_args[12].opt = reportformat_ARG;
commands[118].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[118].optional_opt_args[13].opt = test_ARG;

commands[119].name = "vgreduce";
commands[119].command_line_id = "vgreduce_missing";
commands[119].command_line_enum = vgreduce_missing_CMD;
commands[119].fn = vgreduce;
commands[119].ro_count = 1;
commands[119].rp_count = 1;
commands[119].oo_count = 15;
commands[119].op_count = 0;
commands[119].desc = "";
commands[119].usage = "vgreduce --removemissing VG"
" [ --mirrorsonly, --autobackup y|n, --reportformat String ]";
commands[119].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[119].required_opt_args[0].opt = removemissing_ARG;
commands[119].required_pos_args[0].pos = 1;
commands[119].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[119].optional_opt_args[0].opt = commandprofile_ARG;
commands[119].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[119].optional_opt_args[1].opt = config_ARG;
commands[119].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[119].optional_opt_args[2].opt = debug_ARG;
commands[119].optional_opt_args[3].opt = driverloaded_ARG;
commands[119].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[119].optional_opt_args[4].opt = help_ARG;
commands[119].optional_opt_args[5].opt = profile_ARG;
commands[119].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[119].optional_opt_args[6].opt = quiet_ARG;
commands[119].optional_opt_args[7].opt = verbose_ARG;
commands[119].optional_opt_args[8].opt = version_ARG;
commands[119].optional_opt_args[9].opt = yes_ARG;
commands[119].optional_opt_args[10].opt = mirrorsonly_ARG;
commands[119].optional_opt_args[11].opt = autobackup_ARG;
commands[119].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[119].optional_opt_args[12].opt = force_ARG;
commands[119].optional_opt_args[13].opt = reportformat_ARG;
commands[119].optional_opt_args[13].def.val_bits = val_enum_to_bit(string_VAL);
commands[119].optional_opt_args[14].opt = test_ARG;

commands[120].name = "vgremove";
commands[120].command_line_id = "vgremove_general";
commands[120].command_line_enum = vgremove_general_CMD;
commands[120].fn = vgremove;
commands[120].ro_count = 0;
commands[120].rp_count = 1;
commands[120].oo_count = 15;
commands[120].op_count = 0;
commands[120].desc = "";
commands[120].usage = "vgremove VG|Tag|Select ..."
" [ --reportformat String, --select String ]";
commands[120].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[120].required_pos_args[0].pos = 1;
commands[120].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL) | val_enum_to_bit(select_VAL);
commands[120].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[120].optional_opt_args[0].opt = commandprofile_ARG;
commands[120].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[120].optional_opt_args[1].opt = config_ARG;
commands[120].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[120].optional_opt_args[2].opt = debug_ARG;
commands[120].optional_opt_args[3].opt = driverloaded_ARG;
commands[120].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[120].optional_opt_args[4].opt = help_ARG;
commands[120].optional_opt_args[5].opt = profile_ARG;
commands[120].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[120].optional_opt_args[6].opt = quiet_ARG;
commands[120].optional_opt_args[7].opt = verbose_ARG;
commands[120].optional_opt_args[8].opt = version_ARG;
commands[120].optional_opt_args[9].opt = yes_ARG;
commands[120].optional_opt_args[10].opt = force_ARG;
commands[120].optional_opt_args[11].opt = noudevsync_ARG;
commands[120].optional_opt_args[12].opt = reportformat_ARG;
commands[120].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[120].optional_opt_args[13].opt = select_ARG;
commands[120].optional_opt_args[13].def.val_bits = val_enum_to_bit(string_VAL);
commands[120].optional_opt_args[14].opt = test_ARG;

commands[121].name = "vgrename";
commands[121].command_line_id = "vgrename_by_name";
commands[121].command_line_enum = vgrename_by_name_CMD;
commands[121].fn = vgrename;
commands[121].ro_count = 0;
commands[121].rp_count = 2;
commands[121].oo_count = 14;
commands[121].op_count = 0;
commands[121].desc = "";
commands[121].usage = "vgrename VG VG_new"
" [ --autobackup y|n, --reportformat String ]";
commands[121].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[121].required_pos_args[0].pos = 1;
commands[121].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[121].required_pos_args[1].pos = 2;
commands[121].required_pos_args[1].def.val_bits = val_enum_to_bit(vg_VAL);
commands[121].required_pos_args[1].def.flags = ARG_DEF_FLAG_NEW;
commands[121].optional_opt_args[0].opt = commandprofile_ARG;
commands[121].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[121].optional_opt_args[1].opt = config_ARG;
commands[121].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[121].optional_opt_args[2].opt = debug_ARG;
commands[121].optional_opt_args[3].opt = driverloaded_ARG;
commands[121].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[121].optional_opt_args[4].opt = help_ARG;
commands[121].optional_opt_args[5].opt = profile_ARG;
commands[121].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[121].optional_opt_args[6].opt = quiet_ARG;
commands[121].optional_opt_args[7].opt = verbose_ARG;
commands[121].optional_opt_args[8].opt = version_ARG;
commands[121].optional_opt_args[9].opt = yes_ARG;
commands[121].optional_opt_args[10].opt = autobackup_ARG;
commands[121].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[121].optional_opt_args[11].opt = force_ARG;
commands[121].optional_opt_args[12].opt = reportformat_ARG;
commands[121].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[121].optional_opt_args[13].opt = test_ARG;

commands[122].name = "vgrename";
commands[122].command_line_id = "vgrename_by_uuid";
commands[122].command_line_enum = vgrename_by_uuid_CMD;
commands[122].fn = vgrename;
commands[122].ro_count = 0;
commands[122].rp_count = 2;
commands[122].oo_count = 14;
commands[122].op_count = 0;
commands[122].desc = "";
commands[122].usage = "vgrename String VG_new"
" [ --autobackup y|n, --reportformat String ]";
commands[122].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[122].required_pos_args[0].pos = 1;
commands[122].required_pos_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[122].required_pos_args[1].pos = 2;
commands[122].required_pos_args[1].def.val_bits = val_enum_to_bit(vg_VAL);
commands[122].required_pos_args[1].def.flags = ARG_DEF_FLAG_NEW;
commands[122].optional_opt_args[0].opt = commandprofile_ARG;
commands[122].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[122].optional_opt_args[1].opt = config_ARG;
commands[122].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[122].optional_opt_args[2].opt = debug_ARG;
commands[122].optional_opt_args[3].opt = driverloaded_ARG;
commands[122].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[122].optional_opt_args[4].opt = help_ARG;
commands[122].optional_opt_args[5].opt = profile_ARG;
commands[122].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[122].optional_opt_args[6].opt = quiet_ARG;
commands[122].optional_opt_args[7].opt = verbose_ARG;
commands[122].optional_opt_args[8].opt = version_ARG;
commands[122].optional_opt_args[9].opt = yes_ARG;
commands[122].optional_opt_args[10].opt = autobackup_ARG;
commands[122].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[122].optional_opt_args[11].opt = force_ARG;
commands[122].optional_opt_args[12].opt = reportformat_ARG;
commands[122].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[122].optional_opt_args[13].opt = test_ARG;

commands[123].name = "vgs";
commands[123].command_line_id = "vgs_general";
commands[123].command_line_enum = vgs_general_CMD;
commands[123].fn = vgs;
commands[123].ro_count = 0;
commands[123].rp_count = 0;
commands[123].oo_count = 35;
commands[123].op_count = 1;
commands[123].desc = "";
commands[123].usage = "vgs"
" [ --aligned, --all, --binary, --configreport String, --foreign, --ignorelockingfailure, --ignoreskippedcluster, --logonly, --nameprefixes, --noheadings, --nolocking, --nosuffix, --options String, --partial, --readonly, --reportformat String, --rows, --select String, --separator String, --shared, --sort String, --trustcache, --unbuffered, --units hHbBsSkKmMgGtTpPeE, --unquoted ]"
" [ VG|Tag ... ]";
commands[123].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[123].optional_opt_args[0].opt = commandprofile_ARG;
commands[123].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[1].opt = config_ARG;
commands[123].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[2].opt = debug_ARG;
commands[123].optional_opt_args[3].opt = driverloaded_ARG;
commands[123].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[123].optional_opt_args[4].opt = help_ARG;
commands[123].optional_opt_args[5].opt = profile_ARG;
commands[123].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[6].opt = quiet_ARG;
commands[123].optional_opt_args[7].opt = verbose_ARG;
commands[123].optional_opt_args[8].opt = version_ARG;
commands[123].optional_opt_args[9].opt = yes_ARG;
commands[123].optional_opt_args[10].opt = aligned_ARG;
commands[123].optional_opt_args[11].opt = all_ARG;
commands[123].optional_opt_args[12].opt = binary_ARG;
commands[123].optional_opt_args[13].opt = configreport_ARG;
commands[123].optional_opt_args[13].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[14].opt = foreign_ARG;
commands[123].optional_opt_args[15].opt = ignorelockingfailure_ARG;
commands[123].optional_opt_args[16].opt = ignoreskippedcluster_ARG;
commands[123].optional_opt_args[17].opt = logonly_ARG;
commands[123].optional_opt_args[18].opt = nameprefixes_ARG;
commands[123].optional_opt_args[19].opt = noheadings_ARG;
commands[123].optional_opt_args[20].opt = nolocking_ARG;
commands[123].optional_opt_args[21].opt = nosuffix_ARG;
commands[123].optional_opt_args[22].opt = options_ARG;
commands[123].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[23].opt = partial_ARG;
commands[123].optional_opt_args[24].opt = readonly_ARG;
commands[123].optional_opt_args[25].opt = reportformat_ARG;
commands[123].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[26].opt = rows_ARG;
commands[123].optional_opt_args[27].opt = select_ARG;
commands[123].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[28].opt = separator_ARG;
commands[123].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[29].opt = shared_ARG;
commands[123].optional_opt_args[30].opt = sort_ARG;
commands[123].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[123].optional_opt_args[31].opt = trustcache_ARG;
commands[123].optional_opt_args[32].opt = unbuffered_ARG;
commands[123].optional_opt_args[33].opt = units_ARG;
commands[123].optional_opt_args[33].def.val_bits = val_enum_to_bit(units_VAL);
commands[123].optional_opt_args[34].opt = unquoted_ARG;
commands[123].optional_pos_args[0].pos = 1;
commands[123].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL) | val_enum_to_bit(tag_VAL);
commands[123].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[124].name = "vgscan";
commands[124].command_line_id = "vgscan_general";
commands[124].command_line_enum = vgscan_general_CMD;
commands[124].fn = vgscan;
commands[124].ro_count = 0;
commands[124].rp_count = 0;
commands[124].oo_count = 16;
commands[124].op_count = 0;
commands[124].desc = "";
commands[124].usage = "vgscan"
" [ --cache, --ignorelockingfailure, --mknodes, --notifydbus, --partial, --reportformat String ]";
commands[124].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[124].optional_opt_args[0].opt = commandprofile_ARG;
commands[124].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[124].optional_opt_args[1].opt = config_ARG;
commands[124].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[124].optional_opt_args[2].opt = debug_ARG;
commands[124].optional_opt_args[3].opt = driverloaded_ARG;
commands[124].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[124].optional_opt_args[4].opt = help_ARG;
commands[124].optional_opt_args[5].opt = profile_ARG;
commands[124].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[124].optional_opt_args[6].opt = quiet_ARG;
commands[124].optional_opt_args[7].opt = verbose_ARG;
commands[124].optional_opt_args[8].opt = version_ARG;
commands[124].optional_opt_args[9].opt = yes_ARG;
commands[124].optional_opt_args[10].opt = cache_long_ARG;
commands[124].optional_opt_args[11].opt = ignorelockingfailure_ARG;
commands[124].optional_opt_args[12].opt = mknodes_ARG;
commands[124].optional_opt_args[13].opt = notifydbus_ARG;
commands[124].optional_opt_args[14].opt = partial_ARG;
commands[124].optional_opt_args[15].opt = reportformat_ARG;
commands[124].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);

commands[125].name = "vgsplit";
commands[125].command_line_id = "vgsplit_by_pv_to_existing";
commands[125].command_line_enum = vgsplit_by_pv_to_existing_CMD;
commands[125].fn = vgsplit;
commands[125].ro_count = 0;
commands[125].rp_count = 3;
commands[125].oo_count = 12;
commands[125].op_count = 0;
commands[125].desc = "";
commands[125].usage = "vgsplit VG VG PV ..."
" [ --autobackup y|n ]";
commands[125].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[125].required_pos_args[0].pos = 1;
commands[125].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[125].required_pos_args[1].pos = 2;
commands[125].required_pos_args[1].def.val_bits = val_enum_to_bit(vg_VAL);
commands[125].required_pos_args[2].pos = 3;
commands[125].required_pos_args[2].def.val_bits = val_enum_to_bit(pv_VAL);
commands[125].required_pos_args[2].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[125].optional_opt_args[0].opt = commandprofile_ARG;
commands[125].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[125].optional_opt_args[1].opt = config_ARG;
commands[125].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[125].optional_opt_args[2].opt = debug_ARG;
commands[125].optional_opt_args[3].opt = driverloaded_ARG;
commands[125].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[125].optional_opt_args[4].opt = help_ARG;
commands[125].optional_opt_args[5].opt = profile_ARG;
commands[125].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[125].optional_opt_args[6].opt = quiet_ARG;
commands[125].optional_opt_args[7].opt = verbose_ARG;
commands[125].optional_opt_args[8].opt = version_ARG;
commands[125].optional_opt_args[9].opt = yes_ARG;
commands[125].optional_opt_args[10].opt = autobackup_ARG;
commands[125].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[125].optional_opt_args[11].opt = test_ARG;

commands[126].name = "vgsplit";
commands[126].command_line_id = "vgsplit_by_lv_to_existing";
commands[126].command_line_enum = vgsplit_by_lv_to_existing_CMD;
commands[126].fn = vgsplit;
commands[126].ro_count = 1;
commands[126].rp_count = 2;
commands[126].oo_count = 12;
commands[126].op_count = 0;
commands[126].desc = "";
commands[126].usage = "vgsplit --name LV VG VG"
" [ --autobackup y|n ]";
commands[126].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[126].required_opt_args[0].opt = name_ARG;
commands[126].required_opt_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[126].required_pos_args[0].pos = 1;
commands[126].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[126].required_pos_args[1].pos = 2;
commands[126].required_pos_args[1].def.val_bits = val_enum_to_bit(vg_VAL);
commands[126].optional_opt_args[0].opt = commandprofile_ARG;
commands[126].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[126].optional_opt_args[1].opt = config_ARG;
commands[126].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[126].optional_opt_args[2].opt = debug_ARG;
commands[126].optional_opt_args[3].opt = driverloaded_ARG;
commands[126].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[126].optional_opt_args[4].opt = help_ARG;
commands[126].optional_opt_args[5].opt = profile_ARG;
commands[126].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[126].optional_opt_args[6].opt = quiet_ARG;
commands[126].optional_opt_args[7].opt = verbose_ARG;
commands[126].optional_opt_args[8].opt = version_ARG;
commands[126].optional_opt_args[9].opt = yes_ARG;
commands[126].optional_opt_args[10].opt = autobackup_ARG;
commands[126].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[126].optional_opt_args[11].opt = test_ARG;

commands[127].name = "vgsplit";
commands[127].command_line_id = "vgsplit_by_pv_to_new";
commands[127].command_line_enum = vgsplit_by_pv_to_new_CMD;
commands[127].fn = vgsplit;
commands[127].ro_count = 0;
commands[127].rp_count = 3;
commands[127].oo_count = 18;
commands[127].op_count = 0;
commands[127].desc = "";
commands[127].usage = "vgsplit VG VG_new PV ..."
" [ --autobackup y|n, --alloc contiguous|cling|normal|anywhere|inherit, --clustered y|n, --maxlogicalvolumes Number, --maxphysicalvolumes Number, --metadatatype lvm2|lvm1, --vgmetadatacopies all|unmanaged|Number ]";
commands[127].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[127].required_pos_args[0].pos = 1;
commands[127].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[127].required_pos_args[1].pos = 2;
commands[127].required_pos_args[1].def.val_bits = val_enum_to_bit(vg_VAL);
commands[127].required_pos_args[1].def.flags = ARG_DEF_FLAG_NEW;
commands[127].required_pos_args[2].pos = 3;
commands[127].required_pos_args[2].def.val_bits = val_enum_to_bit(pv_VAL);
commands[127].required_pos_args[2].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[127].optional_opt_args[0].opt = commandprofile_ARG;
commands[127].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[127].optional_opt_args[1].opt = config_ARG;
commands[127].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[127].optional_opt_args[2].opt = debug_ARG;
commands[127].optional_opt_args[3].opt = driverloaded_ARG;
commands[127].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[127].optional_opt_args[4].opt = help_ARG;
commands[127].optional_opt_args[5].opt = profile_ARG;
commands[127].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[127].optional_opt_args[6].opt = quiet_ARG;
commands[127].optional_opt_args[7].opt = verbose_ARG;
commands[127].optional_opt_args[8].opt = version_ARG;
commands[127].optional_opt_args[9].opt = yes_ARG;
commands[127].optional_opt_args[10].opt = autobackup_ARG;
commands[127].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[127].optional_opt_args[11].opt = test_ARG;
commands[127].optional_opt_args[12].opt = alloc_ARG;
commands[127].optional_opt_args[12].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[127].optional_opt_args[13].opt = clustered_ARG;
commands[127].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[127].optional_opt_args[14].opt = maxlogicalvolumes_ARG;
commands[127].optional_opt_args[14].def.val_bits = val_enum_to_bit(number_VAL);
commands[127].optional_opt_args[15].opt = maxphysicalvolumes_ARG;
commands[127].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[127].optional_opt_args[16].opt = metadatatype_ARG;
commands[127].optional_opt_args[16].def.val_bits = val_enum_to_bit(metadatatype_VAL);
commands[127].optional_opt_args[17].opt = vgmetadatacopies_ARG;
commands[127].optional_opt_args[17].def.val_bits = val_enum_to_bit(metadatacopies_VAL);

commands[128].name = "vgsplit";
commands[128].command_line_id = "vgsplit_by_lv_to_new";
commands[128].command_line_enum = vgsplit_by_lv_to_new_CMD;
commands[128].fn = vgsplit;
commands[128].ro_count = 1;
commands[128].rp_count = 2;
commands[128].oo_count = 18;
commands[128].op_count = 0;
commands[128].desc = "";
commands[128].usage = "vgsplit --name LV VG VG_new"
" [ --autobackup y|n, --alloc contiguous|cling|normal|anywhere|inherit, --clustered y|n, --maxlogicalvolumes Number, --maxphysicalvolumes Number, --metadatatype lvm2|lvm1, --vgmetadatacopies all|unmanaged|Number ]";
commands[128].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[128].required_opt_args[0].opt = name_ARG;
commands[128].required_opt_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[128].required_pos_args[0].pos = 1;
commands[128].required_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[128].required_pos_args[1].pos = 2;
commands[128].required_pos_args[1].def.val_bits = val_enum_to_bit(vg_VAL);
commands[128].required_pos_args[1].def.flags = ARG_DEF_FLAG_NEW;
commands[128].optional_opt_args[0].opt = commandprofile_ARG;
commands[128].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[128].optional_opt_args[1].opt = config_ARG;
commands[128].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[128].optional_opt_args[2].opt = debug_ARG;
commands[128].optional_opt_args[3].opt = driverloaded_ARG;
commands[128].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[128].optional_opt_args[4].opt = help_ARG;
commands[128].optional_opt_args[5].opt = profile_ARG;
commands[128].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[128].optional_opt_args[6].opt = quiet_ARG;
commands[128].optional_opt_args[7].opt = verbose_ARG;
commands[128].optional_opt_args[8].opt = version_ARG;
commands[128].optional_opt_args[9].opt = yes_ARG;
commands[128].optional_opt_args[10].opt = autobackup_ARG;
commands[128].optional_opt_args[10].def.val_bits = val_enum_to_bit(bool_VAL);
commands[128].optional_opt_args[11].opt = test_ARG;
commands[128].optional_opt_args[12].opt = alloc_ARG;
commands[128].optional_opt_args[12].def.val_bits = val_enum_to_bit(alloc_VAL);
commands[128].optional_opt_args[13].opt = clustered_ARG;
commands[128].optional_opt_args[13].def.val_bits = val_enum_to_bit(bool_VAL);
commands[128].optional_opt_args[14].opt = maxlogicalvolumes_ARG;
commands[128].optional_opt_args[14].def.val_bits = val_enum_to_bit(number_VAL);
commands[128].optional_opt_args[15].opt = maxphysicalvolumes_ARG;
commands[128].optional_opt_args[15].def.val_bits = val_enum_to_bit(number_VAL);
commands[128].optional_opt_args[16].opt = metadatatype_ARG;
commands[128].optional_opt_args[16].def.val_bits = val_enum_to_bit(metadatatype_VAL);
commands[128].optional_opt_args[17].opt = vgmetadatacopies_ARG;
commands[128].optional_opt_args[17].def.val_bits = val_enum_to_bit(metadatacopies_VAL);

commands[129].name = "config";
commands[129].command_line_id = "lvmconfig_general";
commands[129].command_line_enum = lvmconfig_general_CMD;
commands[129].fn = config;
commands[129].ro_count = 0;
commands[129].rp_count = 0;
commands[129].oo_count = 28;
commands[129].op_count = 1;
commands[129].desc = "";
commands[129].usage = "config"
" [ --atversion String, --typeconfig String, --file String, --ignoreadvanced, --ignoreunsupported, --ignorelocal, --list, --mergedconfig, --metadataprofile String, --sinceversion String, --showdeprecated, --showunsupported, --validate, --withsummary, --withcomments, --withspaces, --unconfigured, --withversions ]"
" [ String ... ]";
commands[129].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[129].optional_opt_args[0].opt = commandprofile_ARG;
commands[129].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_opt_args[1].opt = config_ARG;
commands[129].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_opt_args[2].opt = debug_ARG;
commands[129].optional_opt_args[3].opt = driverloaded_ARG;
commands[129].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[129].optional_opt_args[4].opt = help_ARG;
commands[129].optional_opt_args[5].opt = profile_ARG;
commands[129].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_opt_args[6].opt = quiet_ARG;
commands[129].optional_opt_args[7].opt = verbose_ARG;
commands[129].optional_opt_args[8].opt = version_ARG;
commands[129].optional_opt_args[9].opt = yes_ARG;
commands[129].optional_opt_args[10].opt = atversion_ARG;
commands[129].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_opt_args[11].opt = configtype_ARG;
commands[129].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_opt_args[12].opt = file_ARG;
commands[129].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_opt_args[13].opt = ignoreadvanced_ARG;
commands[129].optional_opt_args[14].opt = ignoreunsupported_ARG;
commands[129].optional_opt_args[15].opt = ignorelocal_ARG;
commands[129].optional_opt_args[16].opt = list_ARG;
commands[129].optional_opt_args[17].opt = mergedconfig_ARG;
commands[129].optional_opt_args[18].opt = metadataprofile_ARG;
commands[129].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_opt_args[19].opt = sinceversion_ARG;
commands[129].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_opt_args[20].opt = showdeprecated_ARG;
commands[129].optional_opt_args[21].opt = showunsupported_ARG;
commands[129].optional_opt_args[22].opt = validate_ARG;
commands[129].optional_opt_args[23].opt = withsummary_ARG;
commands[129].optional_opt_args[24].opt = withcomments_ARG;
commands[129].optional_opt_args[25].opt = withspaces_ARG;
commands[129].optional_opt_args[26].opt = unconfigured_ARG;
commands[129].optional_opt_args[27].opt = withversions_ARG;
commands[129].optional_pos_args[0].pos = 1;
commands[129].optional_pos_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[129].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[130].name = "dumpconfig";
commands[130].command_line_id = "lvmconfig_general";
commands[130].command_line_enum = lvmconfig_general_CMD;
commands[130].fn = dumpconfig;
commands[130].ro_count = 0;
commands[130].rp_count = 0;
commands[130].oo_count = 28;
commands[130].op_count = 1;
commands[130].desc = "";
commands[130].usage = "dumpconfig"
" [ --atversion String, --typeconfig String, --file String, --ignoreadvanced, --ignoreunsupported, --ignorelocal, --list, --mergedconfig, --metadataprofile String, --sinceversion String, --showdeprecated, --showunsupported, --validate, --withsummary, --withcomments, --withspaces, --unconfigured, --withversions ]"
" [ String ... ]";
commands[130].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[130].optional_opt_args[0].opt = commandprofile_ARG;
commands[130].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_opt_args[1].opt = config_ARG;
commands[130].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_opt_args[2].opt = debug_ARG;
commands[130].optional_opt_args[3].opt = driverloaded_ARG;
commands[130].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[130].optional_opt_args[4].opt = help_ARG;
commands[130].optional_opt_args[5].opt = profile_ARG;
commands[130].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_opt_args[6].opt = quiet_ARG;
commands[130].optional_opt_args[7].opt = verbose_ARG;
commands[130].optional_opt_args[8].opt = version_ARG;
commands[130].optional_opt_args[9].opt = yes_ARG;
commands[130].optional_opt_args[10].opt = atversion_ARG;
commands[130].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_opt_args[11].opt = configtype_ARG;
commands[130].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_opt_args[12].opt = file_ARG;
commands[130].optional_opt_args[12].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_opt_args[13].opt = ignoreadvanced_ARG;
commands[130].optional_opt_args[14].opt = ignoreunsupported_ARG;
commands[130].optional_opt_args[15].opt = ignorelocal_ARG;
commands[130].optional_opt_args[16].opt = list_ARG;
commands[130].optional_opt_args[17].opt = mergedconfig_ARG;
commands[130].optional_opt_args[18].opt = metadataprofile_ARG;
commands[130].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_opt_args[19].opt = sinceversion_ARG;
commands[130].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_opt_args[20].opt = showdeprecated_ARG;
commands[130].optional_opt_args[21].opt = showunsupported_ARG;
commands[130].optional_opt_args[22].opt = validate_ARG;
commands[130].optional_opt_args[23].opt = withsummary_ARG;
commands[130].optional_opt_args[24].opt = withcomments_ARG;
commands[130].optional_opt_args[25].opt = withspaces_ARG;
commands[130].optional_opt_args[26].opt = unconfigured_ARG;
commands[130].optional_opt_args[27].opt = withversions_ARG;
commands[130].optional_pos_args[0].pos = 1;
commands[130].optional_pos_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[130].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[131].name = "devtypes";
commands[131].command_line_id = "devtypes_general";
commands[131].command_line_enum = devtypes_general_CMD;
commands[131].fn = devtypes;
commands[131].ro_count = 0;
commands[131].rp_count = 0;
commands[131].oo_count = 23;
commands[131].op_count = 0;
commands[131].desc = "";
commands[131].usage = "devtypes"
" [ --aligned, --binary, --nameprefixes, --noheadings, --nosuffix, --options String, --reportformat String, --rows, --select String, --separator String, --sort String, --unbuffered, --unquoted ]";
commands[131].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[131].optional_opt_args[0].opt = commandprofile_ARG;
commands[131].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[131].optional_opt_args[1].opt = config_ARG;
commands[131].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[131].optional_opt_args[2].opt = debug_ARG;
commands[131].optional_opt_args[3].opt = driverloaded_ARG;
commands[131].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[131].optional_opt_args[4].opt = help_ARG;
commands[131].optional_opt_args[5].opt = profile_ARG;
commands[131].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[131].optional_opt_args[6].opt = quiet_ARG;
commands[131].optional_opt_args[7].opt = verbose_ARG;
commands[131].optional_opt_args[8].opt = version_ARG;
commands[131].optional_opt_args[9].opt = yes_ARG;
commands[131].optional_opt_args[10].opt = aligned_ARG;
commands[131].optional_opt_args[11].opt = binary_ARG;
commands[131].optional_opt_args[12].opt = nameprefixes_ARG;
commands[131].optional_opt_args[13].opt = noheadings_ARG;
commands[131].optional_opt_args[14].opt = nosuffix_ARG;
commands[131].optional_opt_args[15].opt = options_ARG;
commands[131].optional_opt_args[15].def.val_bits = val_enum_to_bit(string_VAL);
commands[131].optional_opt_args[16].opt = reportformat_ARG;
commands[131].optional_opt_args[16].def.val_bits = val_enum_to_bit(string_VAL);
commands[131].optional_opt_args[17].opt = rows_ARG;
commands[131].optional_opt_args[18].opt = select_ARG;
commands[131].optional_opt_args[18].def.val_bits = val_enum_to_bit(string_VAL);
commands[131].optional_opt_args[19].opt = separator_ARG;
commands[131].optional_opt_args[19].def.val_bits = val_enum_to_bit(string_VAL);
commands[131].optional_opt_args[20].opt = sort_ARG;
commands[131].optional_opt_args[20].def.val_bits = val_enum_to_bit(string_VAL);
commands[131].optional_opt_args[21].opt = unbuffered_ARG;
commands[131].optional_opt_args[22].opt = unquoted_ARG;

commands[132].name = "fullreport";
commands[132].command_line_id = "fullreport_general";
commands[132].command_line_enum = fullreport_general_CMD;
commands[132].fn = fullreport;
commands[132].ro_count = 0;
commands[132].rp_count = 0;
commands[132].oo_count = 35;
commands[132].op_count = 1;
commands[132].desc = "";
commands[132].usage = "fullreport"
" [ --aligned, --all, --binary, --configreport String, --foreign, --ignorelockingfailure, --ignoreskippedcluster, --logonly, --nameprefixes, --noheadings, --nolocking, --nosuffix, --options String, --partial, --readonly, --reportformat String, --rows, --select String, --separator String, --shared, --sort String, --trustcache, --unbuffered, --units hHbBsSkKmMgGtTpPeE, --unquoted ]"
" [ VG ... ]";
commands[132].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[132].optional_opt_args[0].opt = commandprofile_ARG;
commands[132].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[1].opt = config_ARG;
commands[132].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[2].opt = debug_ARG;
commands[132].optional_opt_args[3].opt = driverloaded_ARG;
commands[132].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[132].optional_opt_args[4].opt = help_ARG;
commands[132].optional_opt_args[5].opt = profile_ARG;
commands[132].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[6].opt = quiet_ARG;
commands[132].optional_opt_args[7].opt = verbose_ARG;
commands[132].optional_opt_args[8].opt = version_ARG;
commands[132].optional_opt_args[9].opt = yes_ARG;
commands[132].optional_opt_args[10].opt = aligned_ARG;
commands[132].optional_opt_args[11].opt = all_ARG;
commands[132].optional_opt_args[12].opt = binary_ARG;
commands[132].optional_opt_args[13].opt = configreport_ARG;
commands[132].optional_opt_args[13].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[14].opt = foreign_ARG;
commands[132].optional_opt_args[15].opt = ignorelockingfailure_ARG;
commands[132].optional_opt_args[16].opt = ignoreskippedcluster_ARG;
commands[132].optional_opt_args[17].opt = logonly_ARG;
commands[132].optional_opt_args[18].opt = nameprefixes_ARG;
commands[132].optional_opt_args[19].opt = noheadings_ARG;
commands[132].optional_opt_args[20].opt = nolocking_ARG;
commands[132].optional_opt_args[21].opt = nosuffix_ARG;
commands[132].optional_opt_args[22].opt = options_ARG;
commands[132].optional_opt_args[22].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[23].opt = partial_ARG;
commands[132].optional_opt_args[24].opt = readonly_ARG;
commands[132].optional_opt_args[25].opt = reportformat_ARG;
commands[132].optional_opt_args[25].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[26].opt = rows_ARG;
commands[132].optional_opt_args[27].opt = select_ARG;
commands[132].optional_opt_args[27].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[28].opt = separator_ARG;
commands[132].optional_opt_args[28].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[29].opt = shared_ARG;
commands[132].optional_opt_args[30].opt = sort_ARG;
commands[132].optional_opt_args[30].def.val_bits = val_enum_to_bit(string_VAL);
commands[132].optional_opt_args[31].opt = trustcache_ARG;
commands[132].optional_opt_args[32].opt = unbuffered_ARG;
commands[132].optional_opt_args[33].opt = units_ARG;
commands[132].optional_opt_args[33].def.val_bits = val_enum_to_bit(units_VAL);
commands[132].optional_opt_args[34].opt = unquoted_ARG;
commands[132].optional_pos_args[0].pos = 1;
commands[132].optional_pos_args[0].def.val_bits = val_enum_to_bit(vg_VAL);
commands[132].optional_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;

commands[133].name = "lastlog";
commands[133].command_line_id = "lastlog_general";
commands[133].command_line_enum = lastlog_general_CMD;
commands[133].fn = lastlog;
commands[133].ro_count = 0;
commands[133].rp_count = 0;
commands[133].oo_count = 12;
commands[133].op_count = 0;
commands[133].desc = "";
commands[133].usage = "lastlog"
" [ --reportformat String, --select String ]";
commands[133].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[133].optional_opt_args[0].opt = commandprofile_ARG;
commands[133].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[133].optional_opt_args[1].opt = config_ARG;
commands[133].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[133].optional_opt_args[2].opt = debug_ARG;
commands[133].optional_opt_args[3].opt = driverloaded_ARG;
commands[133].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[133].optional_opt_args[4].opt = help_ARG;
commands[133].optional_opt_args[5].opt = profile_ARG;
commands[133].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[133].optional_opt_args[6].opt = quiet_ARG;
commands[133].optional_opt_args[7].opt = verbose_ARG;
commands[133].optional_opt_args[8].opt = version_ARG;
commands[133].optional_opt_args[9].opt = yes_ARG;
commands[133].optional_opt_args[10].opt = reportformat_ARG;
commands[133].optional_opt_args[10].def.val_bits = val_enum_to_bit(string_VAL);
commands[133].optional_opt_args[11].opt = select_ARG;
commands[133].optional_opt_args[11].def.val_bits = val_enum_to_bit(string_VAL);

commands[134].name = "lvpoll";
commands[134].command_line_id = "lvpoll_general";
commands[134].command_line_enum = lvpoll_general_CMD;
commands[134].fn = lvpoll;
commands[134].ro_count = 1;
commands[134].rp_count = 1;
commands[134].oo_count = 15;
commands[134].op_count = 0;
commands[134].desc = "";
commands[134].usage = "lvpoll --polloperation String LV ..."
" [ --abort, --autobackup y|n, --handlemissingpvs, --interval Number ]";
commands[134].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[134].required_opt_args[0].opt = polloperation_ARG;
commands[134].required_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[134].required_pos_args[0].pos = 1;
commands[134].required_pos_args[0].def.val_bits = val_enum_to_bit(lv_VAL);
commands[134].required_pos_args[0].def.flags = ARG_DEF_FLAG_MAY_REPEAT;
commands[134].optional_opt_args[0].opt = commandprofile_ARG;
commands[134].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[134].optional_opt_args[1].opt = config_ARG;
commands[134].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[134].optional_opt_args[2].opt = debug_ARG;
commands[134].optional_opt_args[3].opt = driverloaded_ARG;
commands[134].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[134].optional_opt_args[4].opt = help_ARG;
commands[134].optional_opt_args[5].opt = profile_ARG;
commands[134].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[134].optional_opt_args[6].opt = quiet_ARG;
commands[134].optional_opt_args[7].opt = verbose_ARG;
commands[134].optional_opt_args[8].opt = version_ARG;
commands[134].optional_opt_args[9].opt = yes_ARG;
commands[134].optional_opt_args[10].opt = abort_ARG;
commands[134].optional_opt_args[11].opt = autobackup_ARG;
commands[134].optional_opt_args[11].def.val_bits = val_enum_to_bit(bool_VAL);
commands[134].optional_opt_args[12].opt = handlemissingpvs_ARG;
commands[134].optional_opt_args[13].opt = interval_ARG;
commands[134].optional_opt_args[13].def.val_bits = val_enum_to_bit(number_VAL);
commands[134].optional_opt_args[14].opt = test_ARG;

commands[135].name = "formats";
commands[135].command_line_id = "formats_general";
commands[135].command_line_enum = formats_general_CMD;
commands[135].fn = formats;
commands[135].ro_count = 0;
commands[135].rp_count = 0;
commands[135].oo_count = 10;
commands[135].op_count = 0;
commands[135].desc = "";
commands[135].usage = "formats";
commands[135].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[135].optional_opt_args[0].opt = commandprofile_ARG;
commands[135].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[135].optional_opt_args[1].opt = config_ARG;
commands[135].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[135].optional_opt_args[2].opt = debug_ARG;
commands[135].optional_opt_args[3].opt = driverloaded_ARG;
commands[135].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[135].optional_opt_args[4].opt = help_ARG;
commands[135].optional_opt_args[5].opt = profile_ARG;
commands[135].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[135].optional_opt_args[6].opt = quiet_ARG;
commands[135].optional_opt_args[7].opt = verbose_ARG;
commands[135].optional_opt_args[8].opt = version_ARG;
commands[135].optional_opt_args[9].opt = yes_ARG;

commands[136].name = "help";
commands[136].command_line_id = "help_general";
commands[136].command_line_enum = help_general_CMD;
commands[136].fn = help;
commands[136].ro_count = 0;
commands[136].rp_count = 0;
commands[136].oo_count = 10;
commands[136].op_count = 0;
commands[136].desc = "";
commands[136].usage = "help";
commands[136].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[136].optional_opt_args[0].opt = commandprofile_ARG;
commands[136].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[136].optional_opt_args[1].opt = config_ARG;
commands[136].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[136].optional_opt_args[2].opt = debug_ARG;
commands[136].optional_opt_args[3].opt = driverloaded_ARG;
commands[136].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[136].optional_opt_args[4].opt = help_ARG;
commands[136].optional_opt_args[5].opt = profile_ARG;
commands[136].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[136].optional_opt_args[6].opt = quiet_ARG;
commands[136].optional_opt_args[7].opt = verbose_ARG;
commands[136].optional_opt_args[8].opt = version_ARG;
commands[136].optional_opt_args[9].opt = yes_ARG;

commands[137].name = "version";
commands[137].command_line_id = "version_general";
commands[137].command_line_enum = version_general_CMD;
commands[137].fn = version;
commands[137].ro_count = 0;
commands[137].rp_count = 0;
commands[137].oo_count = 10;
commands[137].op_count = 0;
commands[137].desc = "";
commands[137].usage = "version";
commands[137].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[137].optional_opt_args[0].opt = commandprofile_ARG;
commands[137].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[137].optional_opt_args[1].opt = config_ARG;
commands[137].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[137].optional_opt_args[2].opt = debug_ARG;
commands[137].optional_opt_args[3].opt = driverloaded_ARG;
commands[137].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[137].optional_opt_args[4].opt = help_ARG;
commands[137].optional_opt_args[5].opt = profile_ARG;
commands[137].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[137].optional_opt_args[6].opt = quiet_ARG;
commands[137].optional_opt_args[7].opt = verbose_ARG;
commands[137].optional_opt_args[8].opt = version_ARG;
commands[137].optional_opt_args[9].opt = yes_ARG;

commands[138].name = "pvdata";
commands[138].command_line_id = "pvdata_general";
commands[138].command_line_enum = pvdata_general_CMD;
commands[138].fn = pvdata;
commands[138].ro_count = 0;
commands[138].rp_count = 0;
commands[138].oo_count = 10;
commands[138].op_count = 0;
commands[138].desc = "";
commands[138].usage = "pvdata";
commands[138].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[138].optional_opt_args[0].opt = commandprofile_ARG;
commands[138].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[138].optional_opt_args[1].opt = config_ARG;
commands[138].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[138].optional_opt_args[2].opt = debug_ARG;
commands[138].optional_opt_args[3].opt = driverloaded_ARG;
commands[138].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[138].optional_opt_args[4].opt = help_ARG;
commands[138].optional_opt_args[5].opt = profile_ARG;
commands[138].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[138].optional_opt_args[6].opt = quiet_ARG;
commands[138].optional_opt_args[7].opt = verbose_ARG;
commands[138].optional_opt_args[8].opt = version_ARG;
commands[138].optional_opt_args[9].opt = yes_ARG;

commands[139].name = "segtypes";
commands[139].command_line_id = "segtypes_general";
commands[139].command_line_enum = segtypes_general_CMD;
commands[139].fn = segtypes;
commands[139].ro_count = 0;
commands[139].rp_count = 0;
commands[139].oo_count = 10;
commands[139].op_count = 0;
commands[139].desc = "";
commands[139].usage = "segtypes";
commands[139].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[139].optional_opt_args[0].opt = commandprofile_ARG;
commands[139].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[139].optional_opt_args[1].opt = config_ARG;
commands[139].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[139].optional_opt_args[2].opt = debug_ARG;
commands[139].optional_opt_args[3].opt = driverloaded_ARG;
commands[139].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[139].optional_opt_args[4].opt = help_ARG;
commands[139].optional_opt_args[5].opt = profile_ARG;
commands[139].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[139].optional_opt_args[6].opt = quiet_ARG;
commands[139].optional_opt_args[7].opt = verbose_ARG;
commands[139].optional_opt_args[8].opt = version_ARG;
commands[139].optional_opt_args[9].opt = yes_ARG;

commands[140].name = "systemid";
commands[140].command_line_id = "systemid_general";
commands[140].command_line_enum = systemid_general_CMD;
commands[140].fn = systemid;
commands[140].ro_count = 0;
commands[140].rp_count = 0;
commands[140].oo_count = 10;
commands[140].op_count = 0;
commands[140].desc = "";
commands[140].usage = "systemid";
commands[140].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[140].optional_opt_args[0].opt = commandprofile_ARG;
commands[140].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[140].optional_opt_args[1].opt = config_ARG;
commands[140].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[140].optional_opt_args[2].opt = debug_ARG;
commands[140].optional_opt_args[3].opt = driverloaded_ARG;
commands[140].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[140].optional_opt_args[4].opt = help_ARG;
commands[140].optional_opt_args[5].opt = profile_ARG;
commands[140].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[140].optional_opt_args[6].opt = quiet_ARG;
commands[140].optional_opt_args[7].opt = verbose_ARG;
commands[140].optional_opt_args[8].opt = version_ARG;
commands[140].optional_opt_args[9].opt = yes_ARG;

commands[141].name = "tags";
commands[141].command_line_id = "tags_general";
commands[141].command_line_enum = tags_general_CMD;
commands[141].fn = tags;
commands[141].ro_count = 0;
commands[141].rp_count = 0;
commands[141].oo_count = 10;
commands[141].op_count = 0;
commands[141].desc = "";
commands[141].usage = "tags";
commands[141].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[141].optional_opt_args[0].opt = commandprofile_ARG;
commands[141].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[141].optional_opt_args[1].opt = config_ARG;
commands[141].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[141].optional_opt_args[2].opt = debug_ARG;
commands[141].optional_opt_args[3].opt = driverloaded_ARG;
commands[141].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[141].optional_opt_args[4].opt = help_ARG;
commands[141].optional_opt_args[5].opt = profile_ARG;
commands[141].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[141].optional_opt_args[6].opt = quiet_ARG;
commands[141].optional_opt_args[7].opt = verbose_ARG;
commands[141].optional_opt_args[8].opt = version_ARG;
commands[141].optional_opt_args[9].opt = yes_ARG;

commands[142].name = "lvmchange";
commands[142].command_line_id = "lvmchange_general";
commands[142].command_line_enum = lvmchange_general_CMD;
commands[142].fn = lvmchange;
commands[142].ro_count = 0;
commands[142].rp_count = 0;
commands[142].oo_count = 10;
commands[142].op_count = 0;
commands[142].desc = "";
commands[142].usage = "lvmchange";
commands[142].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[142].optional_opt_args[0].opt = commandprofile_ARG;
commands[142].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[142].optional_opt_args[1].opt = config_ARG;
commands[142].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[142].optional_opt_args[2].opt = debug_ARG;
commands[142].optional_opt_args[3].opt = driverloaded_ARG;
commands[142].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[142].optional_opt_args[4].opt = help_ARG;
commands[142].optional_opt_args[5].opt = profile_ARG;
commands[142].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[142].optional_opt_args[6].opt = quiet_ARG;
commands[142].optional_opt_args[7].opt = verbose_ARG;
commands[142].optional_opt_args[8].opt = version_ARG;
commands[142].optional_opt_args[9].opt = yes_ARG;

commands[143].name = "lvmdiskscan";
commands[143].command_line_id = "lvmdiskscan_general";
commands[143].command_line_enum = lvmdiskscan_general_CMD;
commands[143].fn = lvmdiskscan;
commands[143].ro_count = 0;
commands[143].rp_count = 0;
commands[143].oo_count = 12;
commands[143].op_count = 0;
commands[143].desc = "";
commands[143].usage = "lvmdiskscan"
" [ --lvmpartition, --readonly ]";
commands[143].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[143].optional_opt_args[0].opt = commandprofile_ARG;
commands[143].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[143].optional_opt_args[1].opt = config_ARG;
commands[143].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[143].optional_opt_args[2].opt = debug_ARG;
commands[143].optional_opt_args[3].opt = driverloaded_ARG;
commands[143].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[143].optional_opt_args[4].opt = help_ARG;
commands[143].optional_opt_args[5].opt = profile_ARG;
commands[143].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[143].optional_opt_args[6].opt = quiet_ARG;
commands[143].optional_opt_args[7].opt = verbose_ARG;
commands[143].optional_opt_args[8].opt = version_ARG;
commands[143].optional_opt_args[9].opt = yes_ARG;
commands[143].optional_opt_args[10].opt = lvmpartition_ARG;
commands[143].optional_opt_args[11].opt = readonly_ARG;

commands[144].name = "lvmsadc";
commands[144].command_line_id = "lvmsadc_general";
commands[144].command_line_enum = lvmsadc_general_CMD;
commands[144].fn = lvmsadc;
commands[144].ro_count = 0;
commands[144].rp_count = 0;
commands[144].oo_count = 10;
commands[144].op_count = 0;
commands[144].desc = "";
commands[144].usage = "lvmsadc";
commands[144].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[144].optional_opt_args[0].opt = commandprofile_ARG;
commands[144].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[144].optional_opt_args[1].opt = config_ARG;
commands[144].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[144].optional_opt_args[2].opt = debug_ARG;
commands[144].optional_opt_args[3].opt = driverloaded_ARG;
commands[144].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[144].optional_opt_args[4].opt = help_ARG;
commands[144].optional_opt_args[5].opt = profile_ARG;
commands[144].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[144].optional_opt_args[6].opt = quiet_ARG;
commands[144].optional_opt_args[7].opt = verbose_ARG;
commands[144].optional_opt_args[8].opt = version_ARG;
commands[144].optional_opt_args[9].opt = yes_ARG;

commands[145].name = "lvmsar";
commands[145].command_line_id = "lvmsar_general";
commands[145].command_line_enum = lvmsar_general_CMD;
commands[145].fn = lvmsar;
commands[145].ro_count = 0;
commands[145].rp_count = 0;
commands[145].oo_count = 12;
commands[145].op_count = 0;
commands[145].desc = "";
commands[145].usage = "lvmsar"
" [ --full, --stdin ]";
commands[145].usage_common = 
" [ --commandprofile String, --config String, --debug, --driverloaded y|n, --help, --profile String, --quiet, --verbose, --version, --yes, --force, --test, --noudevsync ]";
commands[145].optional_opt_args[0].opt = commandprofile_ARG;
commands[145].optional_opt_args[0].def.val_bits = val_enum_to_bit(string_VAL);
commands[145].optional_opt_args[1].opt = config_ARG;
commands[145].optional_opt_args[1].def.val_bits = val_enum_to_bit(string_VAL);
commands[145].optional_opt_args[2].opt = debug_ARG;
commands[145].optional_opt_args[3].opt = driverloaded_ARG;
commands[145].optional_opt_args[3].def.val_bits = val_enum_to_bit(bool_VAL);
commands[145].optional_opt_args[4].opt = help_ARG;
commands[145].optional_opt_args[5].opt = profile_ARG;
commands[145].optional_opt_args[5].def.val_bits = val_enum_to_bit(string_VAL);
commands[145].optional_opt_args[6].opt = quiet_ARG;
commands[145].optional_opt_args[7].opt = verbose_ARG;
commands[145].optional_opt_args[8].opt = version_ARG;
commands[145].optional_opt_args[9].opt = yes_ARG;
commands[145].optional_opt_args[10].opt = full_ARG;
commands[145].optional_opt_args[11].opt = stdin_ARG;

